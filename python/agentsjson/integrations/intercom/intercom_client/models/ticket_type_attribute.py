# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TicketTypeAttribute(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'workspace_id': 'str',
        'name': 'str',
        'description': 'str',
        'data_type': 'str',
        'input_options': 'object',
        'order': 'int',
        'required_to_create': 'bool',
        'required_to_create_for_contacts': 'bool',
        'visible_on_create': 'bool',
        'visible_to_contacts': 'bool',
        'default': 'bool',
        'ticket_type_id': 'int',
        'archived': 'bool',
        'created_at': 'int',
        'updated_at': 'int'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'workspace_id': 'workspace_id',
        'name': 'name',
        'description': 'description',
        'data_type': 'data_type',
        'input_options': 'input_options',
        'order': 'order',
        'required_to_create': 'required_to_create',
        'required_to_create_for_contacts': 'required_to_create_for_contacts',
        'visible_on_create': 'visible_on_create',
        'visible_to_contacts': 'visible_to_contacts',
        'default': 'default',
        'ticket_type_id': 'ticket_type_id',
        'archived': 'archived',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, type=None, id=None, workspace_id=None, name=None, description=None, data_type=None, input_options=None, order=None, required_to_create=False, required_to_create_for_contacts=False, visible_on_create=True, visible_to_contacts=True, default=None, ticket_type_id=None, archived=None, created_at=None, updated_at=None):  # noqa: E501
        """TicketTypeAttribute - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self._workspace_id = None
        self._name = None
        self._description = None
        self._data_type = None
        self._input_options = None
        self._order = None
        self._required_to_create = None
        self._required_to_create_for_contacts = None
        self._visible_on_create = None
        self._visible_to_contacts = None
        self._default = None
        self._ticket_type_id = None
        self._archived = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.type = type
        self.id = id
        self.workspace_id = workspace_id
        self.name = name
        self.description = description
        self.data_type = data_type
        self.input_options = input_options
        self.order = order
        self.required_to_create = required_to_create
        self.required_to_create_for_contacts = required_to_create_for_contacts
        self.visible_on_create = visible_on_create
        self.visible_to_contacts = visible_to_contacts
        self.default = default
        self.ticket_type_id = ticket_type_id
        self.archived = archived
        self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def type(self):
        """Gets the type of this TicketTypeAttribute.  # noqa: E501

        String representing the object's type. Always has the value `ticket_type_attribute`.  # noqa: E501

        :return: The type of this TicketTypeAttribute.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TicketTypeAttribute.

        String representing the object's type. Always has the value `ticket_type_attribute`.  # noqa: E501

        :param type: The type of this TicketTypeAttribute.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["ticket_type_attribute"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this TicketTypeAttribute.  # noqa: E501

        The id representing the ticket type attribute.  # noqa: E501

        :return: The id of this TicketTypeAttribute.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TicketTypeAttribute.

        The id representing the ticket type attribute.  # noqa: E501

        :param id: The id of this TicketTypeAttribute.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this TicketTypeAttribute.  # noqa: E501

        The id of the workspace that the ticket type attribute belongs to.  # noqa: E501

        :return: The workspace_id of this TicketTypeAttribute.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this TicketTypeAttribute.

        The id of the workspace that the ticket type attribute belongs to.  # noqa: E501

        :param workspace_id: The workspace_id of this TicketTypeAttribute.  # noqa: E501
        :type: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")  # noqa: E501

        self._workspace_id = workspace_id

    @property
    def name(self):
        """Gets the name of this TicketTypeAttribute.  # noqa: E501

        The name of the ticket type attribute  # noqa: E501

        :return: The name of this TicketTypeAttribute.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TicketTypeAttribute.

        The name of the ticket type attribute  # noqa: E501

        :param name: The name of this TicketTypeAttribute.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this TicketTypeAttribute.  # noqa: E501

        The description of the ticket type attribute  # noqa: E501

        :return: The description of this TicketTypeAttribute.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TicketTypeAttribute.

        The description of the ticket type attribute  # noqa: E501

        :param description: The description of this TicketTypeAttribute.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def data_type(self):
        """Gets the data_type of this TicketTypeAttribute.  # noqa: E501

        The type of the data attribute (allowed values: \"string list integer decimal boolean datetime files\")  # noqa: E501

        :return: The data_type of this TicketTypeAttribute.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this TicketTypeAttribute.

        The type of the data attribute (allowed values: \"string list integer decimal boolean datetime files\")  # noqa: E501

        :param data_type: The data_type of this TicketTypeAttribute.  # noqa: E501
        :type: str
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")  # noqa: E501

        self._data_type = data_type

    @property
    def input_options(self):
        """Gets the input_options of this TicketTypeAttribute.  # noqa: E501

        Input options for the attribute  # noqa: E501

        :return: The input_options of this TicketTypeAttribute.  # noqa: E501
        :rtype: object
        """
        return self._input_options

    @input_options.setter
    def input_options(self, input_options):
        """Sets the input_options of this TicketTypeAttribute.

        Input options for the attribute  # noqa: E501

        :param input_options: The input_options of this TicketTypeAttribute.  # noqa: E501
        :type: object
        """
        if input_options is None:
            raise ValueError("Invalid value for `input_options`, must not be `None`")  # noqa: E501

        self._input_options = input_options

    @property
    def order(self):
        """Gets the order of this TicketTypeAttribute.  # noqa: E501

        The order of the attribute against other attributes  # noqa: E501

        :return: The order of this TicketTypeAttribute.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this TicketTypeAttribute.

        The order of the attribute against other attributes  # noqa: E501

        :param order: The order of this TicketTypeAttribute.  # noqa: E501
        :type: int
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")  # noqa: E501

        self._order = order

    @property
    def required_to_create(self):
        """Gets the required_to_create of this TicketTypeAttribute.  # noqa: E501

        Whether the attribute is required or not for teammates.  # noqa: E501

        :return: The required_to_create of this TicketTypeAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._required_to_create

    @required_to_create.setter
    def required_to_create(self, required_to_create):
        """Sets the required_to_create of this TicketTypeAttribute.

        Whether the attribute is required or not for teammates.  # noqa: E501

        :param required_to_create: The required_to_create of this TicketTypeAttribute.  # noqa: E501
        :type: bool
        """
        if required_to_create is None:
            raise ValueError("Invalid value for `required_to_create`, must not be `None`")  # noqa: E501

        self._required_to_create = required_to_create

    @property
    def required_to_create_for_contacts(self):
        """Gets the required_to_create_for_contacts of this TicketTypeAttribute.  # noqa: E501

        Whether the attribute is required or not for contacts.  # noqa: E501

        :return: The required_to_create_for_contacts of this TicketTypeAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._required_to_create_for_contacts

    @required_to_create_for_contacts.setter
    def required_to_create_for_contacts(self, required_to_create_for_contacts):
        """Sets the required_to_create_for_contacts of this TicketTypeAttribute.

        Whether the attribute is required or not for contacts.  # noqa: E501

        :param required_to_create_for_contacts: The required_to_create_for_contacts of this TicketTypeAttribute.  # noqa: E501
        :type: bool
        """
        if required_to_create_for_contacts is None:
            raise ValueError("Invalid value for `required_to_create_for_contacts`, must not be `None`")  # noqa: E501

        self._required_to_create_for_contacts = required_to_create_for_contacts

    @property
    def visible_on_create(self):
        """Gets the visible_on_create of this TicketTypeAttribute.  # noqa: E501

        Whether the attribute is visible or not to teammates.  # noqa: E501

        :return: The visible_on_create of this TicketTypeAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._visible_on_create

    @visible_on_create.setter
    def visible_on_create(self, visible_on_create):
        """Sets the visible_on_create of this TicketTypeAttribute.

        Whether the attribute is visible or not to teammates.  # noqa: E501

        :param visible_on_create: The visible_on_create of this TicketTypeAttribute.  # noqa: E501
        :type: bool
        """
        if visible_on_create is None:
            raise ValueError("Invalid value for `visible_on_create`, must not be `None`")  # noqa: E501

        self._visible_on_create = visible_on_create

    @property
    def visible_to_contacts(self):
        """Gets the visible_to_contacts of this TicketTypeAttribute.  # noqa: E501

        Whether the attribute is visible or not to contacts.  # noqa: E501

        :return: The visible_to_contacts of this TicketTypeAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._visible_to_contacts

    @visible_to_contacts.setter
    def visible_to_contacts(self, visible_to_contacts):
        """Sets the visible_to_contacts of this TicketTypeAttribute.

        Whether the attribute is visible or not to contacts.  # noqa: E501

        :param visible_to_contacts: The visible_to_contacts of this TicketTypeAttribute.  # noqa: E501
        :type: bool
        """
        if visible_to_contacts is None:
            raise ValueError("Invalid value for `visible_to_contacts`, must not be `None`")  # noqa: E501

        self._visible_to_contacts = visible_to_contacts

    @property
    def default(self):
        """Gets the default of this TicketTypeAttribute.  # noqa: E501

        Whether the attribute is built in or not.  # noqa: E501

        :return: The default of this TicketTypeAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this TicketTypeAttribute.

        Whether the attribute is built in or not.  # noqa: E501

        :param default: The default of this TicketTypeAttribute.  # noqa: E501
        :type: bool
        """
        if default is None:
            raise ValueError("Invalid value for `default`, must not be `None`")  # noqa: E501

        self._default = default

    @property
    def ticket_type_id(self):
        """Gets the ticket_type_id of this TicketTypeAttribute.  # noqa: E501

        The id of the ticket type that the attribute belongs to.  # noqa: E501

        :return: The ticket_type_id of this TicketTypeAttribute.  # noqa: E501
        :rtype: int
        """
        return self._ticket_type_id

    @ticket_type_id.setter
    def ticket_type_id(self, ticket_type_id):
        """Sets the ticket_type_id of this TicketTypeAttribute.

        The id of the ticket type that the attribute belongs to.  # noqa: E501

        :param ticket_type_id: The ticket_type_id of this TicketTypeAttribute.  # noqa: E501
        :type: int
        """
        if ticket_type_id is None:
            raise ValueError("Invalid value for `ticket_type_id`, must not be `None`")  # noqa: E501

        self._ticket_type_id = ticket_type_id

    @property
    def archived(self):
        """Gets the archived of this TicketTypeAttribute.  # noqa: E501

        Whether the ticket type attribute is archived or not.  # noqa: E501

        :return: The archived of this TicketTypeAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this TicketTypeAttribute.

        Whether the ticket type attribute is archived or not.  # noqa: E501

        :param archived: The archived of this TicketTypeAttribute.  # noqa: E501
        :type: bool
        """
        if archived is None:
            raise ValueError("Invalid value for `archived`, must not be `None`")  # noqa: E501

        self._archived = archived

    @property
    def created_at(self):
        """Gets the created_at of this TicketTypeAttribute.  # noqa: E501

        The date and time the ticket type attribute was created.  # noqa: E501

        :return: The created_at of this TicketTypeAttribute.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TicketTypeAttribute.

        The date and time the ticket type attribute was created.  # noqa: E501

        :param created_at: The created_at of this TicketTypeAttribute.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this TicketTypeAttribute.  # noqa: E501

        The date and time the ticket type attribute was last updated.  # noqa: E501

        :return: The updated_at of this TicketTypeAttribute.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TicketTypeAttribute.

        The date and time the ticket type attribute was last updated.  # noqa: E501

        :param updated_at: The updated_at of this TicketTypeAttribute.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TicketTypeAttribute, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TicketTypeAttribute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
