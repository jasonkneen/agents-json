# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataExportCsv(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'user_external_id': 'str',
        'company_id': 'str',
        'email': 'str',
        'name': 'str',
        'ruleset_id': 'str',
        'content_id': 'str',
        'content_type': 'str',
        'content_title': 'str',
        'ruleset_version_id': 'str',
        'receipt_id': 'str',
        'received_at': 'int',
        'series_id': 'str',
        'series_title': 'str',
        'node_id': 'str',
        'first_reply': 'int',
        'first_completion': 'int',
        'first_series_completion': 'int',
        'first_series_disengagement': 'int',
        'first_series_exit': 'int',
        'first_goal_success': 'int',
        'first_open': 'int',
        'first_click': 'int',
        'first_dismisall': 'int',
        'first_unsubscribe': 'int',
        'first_hard_bounce': 'int'
    }

    attribute_map = {
        'user_id': 'user_id',
        'user_external_id': 'user_external_id',
        'company_id': 'company_id',
        'email': 'email',
        'name': 'name',
        'ruleset_id': 'ruleset_id',
        'content_id': 'content_id',
        'content_type': 'content_type',
        'content_title': 'content_title',
        'ruleset_version_id': 'ruleset_version_id',
        'receipt_id': 'receipt_id',
        'received_at': 'received_at',
        'series_id': 'series_id',
        'series_title': 'series_title',
        'node_id': 'node_id',
        'first_reply': 'first_reply',
        'first_completion': 'first_completion',
        'first_series_completion': 'first_series_completion',
        'first_series_disengagement': 'first_series_disengagement',
        'first_series_exit': 'first_series_exit',
        'first_goal_success': 'first_goal_success',
        'first_open': 'first_open',
        'first_click': 'first_click',
        'first_dismisall': 'first_dismisall',
        'first_unsubscribe': 'first_unsubscribe',
        'first_hard_bounce': 'first_hard_bounce'
    }

    def __init__(self, user_id=None, user_external_id=None, company_id=None, email=None, name=None, ruleset_id=None, content_id=None, content_type=None, content_title=None, ruleset_version_id=None, receipt_id=None, received_at=None, series_id=None, series_title=None, node_id=None, first_reply=None, first_completion=None, first_series_completion=None, first_series_disengagement=None, first_series_exit=None, first_goal_success=None, first_open=None, first_click=None, first_dismisall=None, first_unsubscribe=None, first_hard_bounce=None):  # noqa: E501
        """DataExportCsv - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._user_external_id = None
        self._company_id = None
        self._email = None
        self._name = None
        self._ruleset_id = None
        self._content_id = None
        self._content_type = None
        self._content_title = None
        self._ruleset_version_id = None
        self._receipt_id = None
        self._received_at = None
        self._series_id = None
        self._series_title = None
        self._node_id = None
        self._first_reply = None
        self._first_completion = None
        self._first_series_completion = None
        self._first_series_disengagement = None
        self._first_series_exit = None
        self._first_goal_success = None
        self._first_open = None
        self._first_click = None
        self._first_dismisall = None
        self._first_unsubscribe = None
        self._first_hard_bounce = None
        self.discriminator = None
        self.user_id = user_id
        if user_external_id is not None:
            self.user_external_id = user_external_id
        self.company_id = company_id
        self.email = email
        self.name = name
        self.ruleset_id = ruleset_id
        self.content_id = content_id
        self.content_type = content_type
        self.content_title = content_title
        if ruleset_version_id is not None:
            self.ruleset_version_id = ruleset_version_id
        if receipt_id is not None:
            self.receipt_id = receipt_id
        if received_at is not None:
            self.received_at = received_at
        if series_id is not None:
            self.series_id = series_id
        if series_title is not None:
            self.series_title = series_title
        if node_id is not None:
            self.node_id = node_id
        if first_reply is not None:
            self.first_reply = first_reply
        if first_completion is not None:
            self.first_completion = first_completion
        if first_series_completion is not None:
            self.first_series_completion = first_series_completion
        if first_series_disengagement is not None:
            self.first_series_disengagement = first_series_disengagement
        if first_series_exit is not None:
            self.first_series_exit = first_series_exit
        if first_goal_success is not None:
            self.first_goal_success = first_goal_success
        if first_open is not None:
            self.first_open = first_open
        if first_click is not None:
            self.first_click = first_click
        if first_dismisall is not None:
            self.first_dismisall = first_dismisall
        if first_unsubscribe is not None:
            self.first_unsubscribe = first_unsubscribe
        if first_hard_bounce is not None:
            self.first_hard_bounce = first_hard_bounce

    @property
    def user_id(self):
        """Gets the user_id of this DataExportCsv.  # noqa: E501

        The user_id of the user who was sent the message.  # noqa: E501

        :return: The user_id of this DataExportCsv.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DataExportCsv.

        The user_id of the user who was sent the message.  # noqa: E501

        :param user_id: The user_id of this DataExportCsv.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def user_external_id(self):
        """Gets the user_external_id of this DataExportCsv.  # noqa: E501

        The external_user_id of the user who was sent the message  # noqa: E501

        :return: The user_external_id of this DataExportCsv.  # noqa: E501
        :rtype: str
        """
        return self._user_external_id

    @user_external_id.setter
    def user_external_id(self, user_external_id):
        """Sets the user_external_id of this DataExportCsv.

        The external_user_id of the user who was sent the message  # noqa: E501

        :param user_external_id: The user_external_id of this DataExportCsv.  # noqa: E501
        :type: str
        """

        self._user_external_id = user_external_id

    @property
    def company_id(self):
        """Gets the company_id of this DataExportCsv.  # noqa: E501

        The company ID of the user in relation to the message that was sent. Will return -1 if no company is present.  # noqa: E501

        :return: The company_id of this DataExportCsv.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this DataExportCsv.

        The company ID of the user in relation to the message that was sent. Will return -1 if no company is present.  # noqa: E501

        :param company_id: The company_id of this DataExportCsv.  # noqa: E501
        :type: str
        """
        if company_id is None:
            raise ValueError("Invalid value for `company_id`, must not be `None`")  # noqa: E501

        self._company_id = company_id

    @property
    def email(self):
        """Gets the email of this DataExportCsv.  # noqa: E501

        The users email who was sent the message.  # noqa: E501

        :return: The email of this DataExportCsv.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this DataExportCsv.

        The users email who was sent the message.  # noqa: E501

        :param email: The email of this DataExportCsv.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def name(self):
        """Gets the name of this DataExportCsv.  # noqa: E501

        The full name of the user receiving the message  # noqa: E501

        :return: The name of this DataExportCsv.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataExportCsv.

        The full name of the user receiving the message  # noqa: E501

        :param name: The name of this DataExportCsv.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def ruleset_id(self):
        """Gets the ruleset_id of this DataExportCsv.  # noqa: E501

        The id of the message.  # noqa: E501

        :return: The ruleset_id of this DataExportCsv.  # noqa: E501
        :rtype: str
        """
        return self._ruleset_id

    @ruleset_id.setter
    def ruleset_id(self, ruleset_id):
        """Sets the ruleset_id of this DataExportCsv.

        The id of the message.  # noqa: E501

        :param ruleset_id: The ruleset_id of this DataExportCsv.  # noqa: E501
        :type: str
        """
        if ruleset_id is None:
            raise ValueError("Invalid value for `ruleset_id`, must not be `None`")  # noqa: E501

        self._ruleset_id = ruleset_id

    @property
    def content_id(self):
        """Gets the content_id of this DataExportCsv.  # noqa: E501

        The specific content that was received. In an A/B test each version has its own Content ID.  # noqa: E501

        :return: The content_id of this DataExportCsv.  # noqa: E501
        :rtype: str
        """
        return self._content_id

    @content_id.setter
    def content_id(self, content_id):
        """Sets the content_id of this DataExportCsv.

        The specific content that was received. In an A/B test each version has its own Content ID.  # noqa: E501

        :param content_id: The content_id of this DataExportCsv.  # noqa: E501
        :type: str
        """
        if content_id is None:
            raise ValueError("Invalid value for `content_id`, must not be `None`")  # noqa: E501

        self._content_id = content_id

    @property
    def content_type(self):
        """Gets the content_type of this DataExportCsv.  # noqa: E501

        Email, Chat, Post etc.  # noqa: E501

        :return: The content_type of this DataExportCsv.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this DataExportCsv.

        Email, Chat, Post etc.  # noqa: E501

        :param content_type: The content_type of this DataExportCsv.  # noqa: E501
        :type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")  # noqa: E501

        self._content_type = content_type

    @property
    def content_title(self):
        """Gets the content_title of this DataExportCsv.  # noqa: E501

        The title of the content you see in your Intercom workspace.  # noqa: E501

        :return: The content_title of this DataExportCsv.  # noqa: E501
        :rtype: str
        """
        return self._content_title

    @content_title.setter
    def content_title(self, content_title):
        """Sets the content_title of this DataExportCsv.

        The title of the content you see in your Intercom workspace.  # noqa: E501

        :param content_title: The content_title of this DataExportCsv.  # noqa: E501
        :type: str
        """
        if content_title is None:
            raise ValueError("Invalid value for `content_title`, must not be `None`")  # noqa: E501

        self._content_title = content_title

    @property
    def ruleset_version_id(self):
        """Gets the ruleset_version_id of this DataExportCsv.  # noqa: E501

        As you edit content we record new versions. This ID can help you determine which version of a piece of content that was received.  # noqa: E501

        :return: The ruleset_version_id of this DataExportCsv.  # noqa: E501
        :rtype: str
        """
        return self._ruleset_version_id

    @ruleset_version_id.setter
    def ruleset_version_id(self, ruleset_version_id):
        """Sets the ruleset_version_id of this DataExportCsv.

        As you edit content we record new versions. This ID can help you determine which version of a piece of content that was received.  # noqa: E501

        :param ruleset_version_id: The ruleset_version_id of this DataExportCsv.  # noqa: E501
        :type: str
        """

        self._ruleset_version_id = ruleset_version_id

    @property
    def receipt_id(self):
        """Gets the receipt_id of this DataExportCsv.  # noqa: E501

        ID for this receipt. Will be included with any related stats in other files to identify this specific delivery of a message.  # noqa: E501

        :return: The receipt_id of this DataExportCsv.  # noqa: E501
        :rtype: str
        """
        return self._receipt_id

    @receipt_id.setter
    def receipt_id(self, receipt_id):
        """Sets the receipt_id of this DataExportCsv.

        ID for this receipt. Will be included with any related stats in other files to identify this specific delivery of a message.  # noqa: E501

        :param receipt_id: The receipt_id of this DataExportCsv.  # noqa: E501
        :type: str
        """

        self._receipt_id = receipt_id

    @property
    def received_at(self):
        """Gets the received_at of this DataExportCsv.  # noqa: E501

        Timestamp for when the receipt was recorded.  # noqa: E501

        :return: The received_at of this DataExportCsv.  # noqa: E501
        :rtype: int
        """
        return self._received_at

    @received_at.setter
    def received_at(self, received_at):
        """Sets the received_at of this DataExportCsv.

        Timestamp for when the receipt was recorded.  # noqa: E501

        :param received_at: The received_at of this DataExportCsv.  # noqa: E501
        :type: int
        """

        self._received_at = received_at

    @property
    def series_id(self):
        """Gets the series_id of this DataExportCsv.  # noqa: E501

        The id of the series that this content is part of. Will return -1 if not part of a series.  # noqa: E501

        :return: The series_id of this DataExportCsv.  # noqa: E501
        :rtype: str
        """
        return self._series_id

    @series_id.setter
    def series_id(self, series_id):
        """Sets the series_id of this DataExportCsv.

        The id of the series that this content is part of. Will return -1 if not part of a series.  # noqa: E501

        :param series_id: The series_id of this DataExportCsv.  # noqa: E501
        :type: str
        """

        self._series_id = series_id

    @property
    def series_title(self):
        """Gets the series_title of this DataExportCsv.  # noqa: E501

        The title of the series that this content is part of.  # noqa: E501

        :return: The series_title of this DataExportCsv.  # noqa: E501
        :rtype: str
        """
        return self._series_title

    @series_title.setter
    def series_title(self, series_title):
        """Sets the series_title of this DataExportCsv.

        The title of the series that this content is part of.  # noqa: E501

        :param series_title: The series_title of this DataExportCsv.  # noqa: E501
        :type: str
        """

        self._series_title = series_title

    @property
    def node_id(self):
        """Gets the node_id of this DataExportCsv.  # noqa: E501

        The id of the series node that this ruleset is associated with. Each block in a series has a corresponding node_id.  # noqa: E501

        :return: The node_id of this DataExportCsv.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this DataExportCsv.

        The id of the series node that this ruleset is associated with. Each block in a series has a corresponding node_id.  # noqa: E501

        :param node_id: The node_id of this DataExportCsv.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def first_reply(self):
        """Gets the first_reply of this DataExportCsv.  # noqa: E501

        The first time a user replied to this message if the content was able to receive replies.  # noqa: E501

        :return: The first_reply of this DataExportCsv.  # noqa: E501
        :rtype: int
        """
        return self._first_reply

    @first_reply.setter
    def first_reply(self, first_reply):
        """Sets the first_reply of this DataExportCsv.

        The first time a user replied to this message if the content was able to receive replies.  # noqa: E501

        :param first_reply: The first_reply of this DataExportCsv.  # noqa: E501
        :type: int
        """

        self._first_reply = first_reply

    @property
    def first_completion(self):
        """Gets the first_completion of this DataExportCsv.  # noqa: E501

        The first time a user completed this message if the content was able to be completed e.g. Tours, Surveys.  # noqa: E501

        :return: The first_completion of this DataExportCsv.  # noqa: E501
        :rtype: int
        """
        return self._first_completion

    @first_completion.setter
    def first_completion(self, first_completion):
        """Sets the first_completion of this DataExportCsv.

        The first time a user completed this message if the content was able to be completed e.g. Tours, Surveys.  # noqa: E501

        :param first_completion: The first_completion of this DataExportCsv.  # noqa: E501
        :type: int
        """

        self._first_completion = first_completion

    @property
    def first_series_completion(self):
        """Gets the first_series_completion of this DataExportCsv.  # noqa: E501

        The first time the series this message was a part of was completed by the user.  # noqa: E501

        :return: The first_series_completion of this DataExportCsv.  # noqa: E501
        :rtype: int
        """
        return self._first_series_completion

    @first_series_completion.setter
    def first_series_completion(self, first_series_completion):
        """Sets the first_series_completion of this DataExportCsv.

        The first time the series this message was a part of was completed by the user.  # noqa: E501

        :param first_series_completion: The first_series_completion of this DataExportCsv.  # noqa: E501
        :type: int
        """

        self._first_series_completion = first_series_completion

    @property
    def first_series_disengagement(self):
        """Gets the first_series_disengagement of this DataExportCsv.  # noqa: E501

        The first time the series this message was a part of was disengaged by the user.  # noqa: E501

        :return: The first_series_disengagement of this DataExportCsv.  # noqa: E501
        :rtype: int
        """
        return self._first_series_disengagement

    @first_series_disengagement.setter
    def first_series_disengagement(self, first_series_disengagement):
        """Sets the first_series_disengagement of this DataExportCsv.

        The first time the series this message was a part of was disengaged by the user.  # noqa: E501

        :param first_series_disengagement: The first_series_disengagement of this DataExportCsv.  # noqa: E501
        :type: int
        """

        self._first_series_disengagement = first_series_disengagement

    @property
    def first_series_exit(self):
        """Gets the first_series_exit of this DataExportCsv.  # noqa: E501

        The first time the series this message was a part of was exited by the user.  # noqa: E501

        :return: The first_series_exit of this DataExportCsv.  # noqa: E501
        :rtype: int
        """
        return self._first_series_exit

    @first_series_exit.setter
    def first_series_exit(self, first_series_exit):
        """Sets the first_series_exit of this DataExportCsv.

        The first time the series this message was a part of was exited by the user.  # noqa: E501

        :param first_series_exit: The first_series_exit of this DataExportCsv.  # noqa: E501
        :type: int
        """

        self._first_series_exit = first_series_exit

    @property
    def first_goal_success(self):
        """Gets the first_goal_success of this DataExportCsv.  # noqa: E501

        The first time the user met this messages associated goal if one exists.  # noqa: E501

        :return: The first_goal_success of this DataExportCsv.  # noqa: E501
        :rtype: int
        """
        return self._first_goal_success

    @first_goal_success.setter
    def first_goal_success(self, first_goal_success):
        """Sets the first_goal_success of this DataExportCsv.

        The first time the user met this messages associated goal if one exists.  # noqa: E501

        :param first_goal_success: The first_goal_success of this DataExportCsv.  # noqa: E501
        :type: int
        """

        self._first_goal_success = first_goal_success

    @property
    def first_open(self):
        """Gets the first_open of this DataExportCsv.  # noqa: E501

        The first time the user opened this message.  # noqa: E501

        :return: The first_open of this DataExportCsv.  # noqa: E501
        :rtype: int
        """
        return self._first_open

    @first_open.setter
    def first_open(self, first_open):
        """Sets the first_open of this DataExportCsv.

        The first time the user opened this message.  # noqa: E501

        :param first_open: The first_open of this DataExportCsv.  # noqa: E501
        :type: int
        """

        self._first_open = first_open

    @property
    def first_click(self):
        """Gets the first_click of this DataExportCsv.  # noqa: E501

        The first time the series the user clicked on a link within this message.  # noqa: E501

        :return: The first_click of this DataExportCsv.  # noqa: E501
        :rtype: int
        """
        return self._first_click

    @first_click.setter
    def first_click(self, first_click):
        """Sets the first_click of this DataExportCsv.

        The first time the series the user clicked on a link within this message.  # noqa: E501

        :param first_click: The first_click of this DataExportCsv.  # noqa: E501
        :type: int
        """

        self._first_click = first_click

    @property
    def first_dismisall(self):
        """Gets the first_dismisall of this DataExportCsv.  # noqa: E501

        The first time the series the user dismissed this message.  # noqa: E501

        :return: The first_dismisall of this DataExportCsv.  # noqa: E501
        :rtype: int
        """
        return self._first_dismisall

    @first_dismisall.setter
    def first_dismisall(self, first_dismisall):
        """Sets the first_dismisall of this DataExportCsv.

        The first time the series the user dismissed this message.  # noqa: E501

        :param first_dismisall: The first_dismisall of this DataExportCsv.  # noqa: E501
        :type: int
        """

        self._first_dismisall = first_dismisall

    @property
    def first_unsubscribe(self):
        """Gets the first_unsubscribe of this DataExportCsv.  # noqa: E501

        The first time the user unsubscribed from this message.  # noqa: E501

        :return: The first_unsubscribe of this DataExportCsv.  # noqa: E501
        :rtype: int
        """
        return self._first_unsubscribe

    @first_unsubscribe.setter
    def first_unsubscribe(self, first_unsubscribe):
        """Sets the first_unsubscribe of this DataExportCsv.

        The first time the user unsubscribed from this message.  # noqa: E501

        :param first_unsubscribe: The first_unsubscribe of this DataExportCsv.  # noqa: E501
        :type: int
        """

        self._first_unsubscribe = first_unsubscribe

    @property
    def first_hard_bounce(self):
        """Gets the first_hard_bounce of this DataExportCsv.  # noqa: E501

        The first time this message hard bounced for this user  # noqa: E501

        :return: The first_hard_bounce of this DataExportCsv.  # noqa: E501
        :rtype: int
        """
        return self._first_hard_bounce

    @first_hard_bounce.setter
    def first_hard_bounce(self, first_hard_bounce):
        """Sets the first_hard_bounce of this DataExportCsv.

        The first time this message hard bounced for this user  # noqa: E501

        :param first_hard_bounce: The first_hard_bounce of this DataExportCsv.  # noqa: E501
        :type: int
        """

        self._first_hard_bounce = first_hard_bounce

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataExportCsv, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataExportCsv):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
