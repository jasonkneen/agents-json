# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Company(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'name': 'str',
        'app_id': 'str',
        'plan': 'CompanyPlan',
        'company_id': 'str',
        'remote_created_at': 'int',
        'created_at': 'int',
        'updated_at': 'int',
        'last_request_at': 'int',
        'size': 'int',
        'website': 'str',
        'industry': 'str',
        'monthly_spend': 'int',
        'session_count': 'int',
        'user_count': 'int',
        'custom_attributes': 'dict(str, str)',
        'tags': 'CompanyTags',
        'segments': 'CompanySegments'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'name': 'name',
        'app_id': 'app_id',
        'plan': 'plan',
        'company_id': 'company_id',
        'remote_created_at': 'remote_created_at',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'last_request_at': 'last_request_at',
        'size': 'size',
        'website': 'website',
        'industry': 'industry',
        'monthly_spend': 'monthly_spend',
        'session_count': 'session_count',
        'user_count': 'user_count',
        'custom_attributes': 'custom_attributes',
        'tags': 'tags',
        'segments': 'segments'
    }

    def __init__(self, type=None, id=None, name=None, app_id=None, plan=None, company_id=None, remote_created_at=None, created_at=None, updated_at=None, last_request_at=None, size=None, website=None, industry=None, monthly_spend=None, session_count=None, user_count=None, custom_attributes=None, tags=None, segments=None):  # noqa: E501
        """Company - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self._name = None
        self._app_id = None
        self._plan = None
        self._company_id = None
        self._remote_created_at = None
        self._created_at = None
        self._updated_at = None
        self._last_request_at = None
        self._size = None
        self._website = None
        self._industry = None
        self._monthly_spend = None
        self._session_count = None
        self._user_count = None
        self._custom_attributes = None
        self._tags = None
        self._segments = None
        self.discriminator = None
        if type is not None:
            self.type = type
        self.id = id
        self.name = name
        self.app_id = app_id
        if plan is not None:
            self.plan = plan
        self.company_id = company_id
        self.remote_created_at = remote_created_at
        self.created_at = created_at
        self.updated_at = updated_at
        self.last_request_at = last_request_at
        self.size = size
        self.website = website
        self.industry = industry
        self.monthly_spend = monthly_spend
        self.session_count = session_count
        self.user_count = user_count
        if custom_attributes is not None:
            self.custom_attributes = custom_attributes
        if tags is not None:
            self.tags = tags
        if segments is not None:
            self.segments = segments

    @property
    def type(self):
        """Gets the type of this Company.  # noqa: E501

        Value is `company`  # noqa: E501

        :return: The type of this Company.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Company.

        Value is `company`  # noqa: E501

        :param type: The type of this Company.  # noqa: E501
        :type: str
        """
        allowed_values = ["company"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this Company.  # noqa: E501

        The Intercom defined id representing the company.  # noqa: E501

        :return: The id of this Company.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Company.

        The Intercom defined id representing the company.  # noqa: E501

        :param id: The id of this Company.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Company.  # noqa: E501

        The name of the company.  # noqa: E501

        :return: The name of this Company.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Company.

        The name of the company.  # noqa: E501

        :param name: The name of this Company.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def app_id(self):
        """Gets the app_id of this Company.  # noqa: E501

        The Intercom defined code of the workspace the company is associated to.  # noqa: E501

        :return: The app_id of this Company.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this Company.

        The Intercom defined code of the workspace the company is associated to.  # noqa: E501

        :param app_id: The app_id of this Company.  # noqa: E501
        :type: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")  # noqa: E501

        self._app_id = app_id

    @property
    def plan(self):
        """Gets the plan of this Company.  # noqa: E501


        :return: The plan of this Company.  # noqa: E501
        :rtype: CompanyPlan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this Company.


        :param plan: The plan of this Company.  # noqa: E501
        :type: CompanyPlan
        """

        self._plan = plan

    @property
    def company_id(self):
        """Gets the company_id of this Company.  # noqa: E501

        The company id you have defined for the company.  # noqa: E501

        :return: The company_id of this Company.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Company.

        The company id you have defined for the company.  # noqa: E501

        :param company_id: The company_id of this Company.  # noqa: E501
        :type: str
        """
        if company_id is None:
            raise ValueError("Invalid value for `company_id`, must not be `None`")  # noqa: E501

        self._company_id = company_id

    @property
    def remote_created_at(self):
        """Gets the remote_created_at of this Company.  # noqa: E501

        The time the company was created by you.  # noqa: E501

        :return: The remote_created_at of this Company.  # noqa: E501
        :rtype: int
        """
        return self._remote_created_at

    @remote_created_at.setter
    def remote_created_at(self, remote_created_at):
        """Sets the remote_created_at of this Company.

        The time the company was created by you.  # noqa: E501

        :param remote_created_at: The remote_created_at of this Company.  # noqa: E501
        :type: int
        """
        if remote_created_at is None:
            raise ValueError("Invalid value for `remote_created_at`, must not be `None`")  # noqa: E501

        self._remote_created_at = remote_created_at

    @property
    def created_at(self):
        """Gets the created_at of this Company.  # noqa: E501

        The time the company was added in Intercom.  # noqa: E501

        :return: The created_at of this Company.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Company.

        The time the company was added in Intercom.  # noqa: E501

        :param created_at: The created_at of this Company.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Company.  # noqa: E501

        The last time the company was updated.  # noqa: E501

        :return: The updated_at of this Company.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Company.

        The last time the company was updated.  # noqa: E501

        :param updated_at: The updated_at of this Company.  # noqa: E501
        :type: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def last_request_at(self):
        """Gets the last_request_at of this Company.  # noqa: E501

        The time the company last recorded making a request.  # noqa: E501

        :return: The last_request_at of this Company.  # noqa: E501
        :rtype: int
        """
        return self._last_request_at

    @last_request_at.setter
    def last_request_at(self, last_request_at):
        """Sets the last_request_at of this Company.

        The time the company last recorded making a request.  # noqa: E501

        :param last_request_at: The last_request_at of this Company.  # noqa: E501
        :type: int
        """
        if last_request_at is None:
            raise ValueError("Invalid value for `last_request_at`, must not be `None`")  # noqa: E501

        self._last_request_at = last_request_at

    @property
    def size(self):
        """Gets the size of this Company.  # noqa: E501

        The number of employees in the company.  # noqa: E501

        :return: The size of this Company.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Company.

        The number of employees in the company.  # noqa: E501

        :param size: The size of this Company.  # noqa: E501
        :type: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def website(self):
        """Gets the website of this Company.  # noqa: E501

        The URL for the company website.  # noqa: E501

        :return: The website of this Company.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Company.

        The URL for the company website.  # noqa: E501

        :param website: The website of this Company.  # noqa: E501
        :type: str
        """
        if website is None:
            raise ValueError("Invalid value for `website`, must not be `None`")  # noqa: E501

        self._website = website

    @property
    def industry(self):
        """Gets the industry of this Company.  # noqa: E501

        The industry that the company operates in.  # noqa: E501

        :return: The industry of this Company.  # noqa: E501
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this Company.

        The industry that the company operates in.  # noqa: E501

        :param industry: The industry of this Company.  # noqa: E501
        :type: str
        """
        if industry is None:
            raise ValueError("Invalid value for `industry`, must not be `None`")  # noqa: E501

        self._industry = industry

    @property
    def monthly_spend(self):
        """Gets the monthly_spend of this Company.  # noqa: E501

        How much revenue the company generates for your business.  # noqa: E501

        :return: The monthly_spend of this Company.  # noqa: E501
        :rtype: int
        """
        return self._monthly_spend

    @monthly_spend.setter
    def monthly_spend(self, monthly_spend):
        """Sets the monthly_spend of this Company.

        How much revenue the company generates for your business.  # noqa: E501

        :param monthly_spend: The monthly_spend of this Company.  # noqa: E501
        :type: int
        """
        if monthly_spend is None:
            raise ValueError("Invalid value for `monthly_spend`, must not be `None`")  # noqa: E501

        self._monthly_spend = monthly_spend

    @property
    def session_count(self):
        """Gets the session_count of this Company.  # noqa: E501

        How many sessions the company has recorded.  # noqa: E501

        :return: The session_count of this Company.  # noqa: E501
        :rtype: int
        """
        return self._session_count

    @session_count.setter
    def session_count(self, session_count):
        """Sets the session_count of this Company.

        How many sessions the company has recorded.  # noqa: E501

        :param session_count: The session_count of this Company.  # noqa: E501
        :type: int
        """
        if session_count is None:
            raise ValueError("Invalid value for `session_count`, must not be `None`")  # noqa: E501

        self._session_count = session_count

    @property
    def user_count(self):
        """Gets the user_count of this Company.  # noqa: E501

        The number of users in the company.  # noqa: E501

        :return: The user_count of this Company.  # noqa: E501
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this Company.

        The number of users in the company.  # noqa: E501

        :param user_count: The user_count of this Company.  # noqa: E501
        :type: int
        """
        if user_count is None:
            raise ValueError("Invalid value for `user_count`, must not be `None`")  # noqa: E501

        self._user_count = user_count

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this Company.  # noqa: E501

        The custom attributes you have set on the company.  # noqa: E501

        :return: The custom_attributes of this Company.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this Company.

        The custom attributes you have set on the company.  # noqa: E501

        :param custom_attributes: The custom_attributes of this Company.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_attributes = custom_attributes

    @property
    def tags(self):
        """Gets the tags of this Company.  # noqa: E501


        :return: The tags of this Company.  # noqa: E501
        :rtype: CompanyTags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Company.


        :param tags: The tags of this Company.  # noqa: E501
        :type: CompanyTags
        """

        self._tags = tags

    @property
    def segments(self):
        """Gets the segments of this Company.  # noqa: E501


        :return: The segments of this Company.  # noqa: E501
        :rtype: CompanySegments
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this Company.


        :param segments: The segments of this Company.  # noqa: E501
        :type: CompanySegments
        """

        self._segments = segments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Company, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Company):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
