# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AdminIdAwayBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'away_mode_enabled': 'bool',
        'away_mode_reassign': 'bool'
    }

    attribute_map = {
        'away_mode_enabled': 'away_mode_enabled',
        'away_mode_reassign': 'away_mode_reassign'
    }

    def __init__(self, away_mode_enabled=True, away_mode_reassign=False):  # noqa: E501
        """AdminIdAwayBody - a model defined in Swagger"""  # noqa: E501
        self._away_mode_enabled = None
        self._away_mode_reassign = None
        self.discriminator = None
        self.away_mode_enabled = away_mode_enabled
        self.away_mode_reassign = away_mode_reassign

    @property
    def away_mode_enabled(self):
        """Gets the away_mode_enabled of this AdminIdAwayBody.  # noqa: E501

        Set to \"true\" to change the status of the admin to away.  # noqa: E501

        :return: The away_mode_enabled of this AdminIdAwayBody.  # noqa: E501
        :rtype: bool
        """
        return self._away_mode_enabled

    @away_mode_enabled.setter
    def away_mode_enabled(self, away_mode_enabled):
        """Sets the away_mode_enabled of this AdminIdAwayBody.

        Set to \"true\" to change the status of the admin to away.  # noqa: E501

        :param away_mode_enabled: The away_mode_enabled of this AdminIdAwayBody.  # noqa: E501
        :type: bool
        """
        if away_mode_enabled is None:
            raise ValueError("Invalid value for `away_mode_enabled`, must not be `None`")  # noqa: E501

        self._away_mode_enabled = away_mode_enabled

    @property
    def away_mode_reassign(self):
        """Gets the away_mode_reassign of this AdminIdAwayBody.  # noqa: E501

        Set to \"true\" to assign any new conversation replies to your default inbox.  # noqa: E501

        :return: The away_mode_reassign of this AdminIdAwayBody.  # noqa: E501
        :rtype: bool
        """
        return self._away_mode_reassign

    @away_mode_reassign.setter
    def away_mode_reassign(self, away_mode_reassign):
        """Sets the away_mode_reassign of this AdminIdAwayBody.

        Set to \"true\" to assign any new conversation replies to your default inbox.  # noqa: E501

        :param away_mode_reassign: The away_mode_reassign of this AdminIdAwayBody.  # noqa: E501
        :type: bool
        """
        if away_mode_reassign is None:
            raise ValueError("Invalid value for `away_mode_reassign`, must not be `None`")  # noqa: E501

        self._away_mode_reassign = away_mode_reassign

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdminIdAwayBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminIdAwayBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
