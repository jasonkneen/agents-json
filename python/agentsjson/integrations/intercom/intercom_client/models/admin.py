# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Admin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'name': 'str',
        'email': 'str',
        'job_title': 'str',
        'away_mode_enabled': 'bool',
        'away_mode_reassign': 'bool',
        'has_inbox_seat': 'bool',
        'team_ids': 'list[int]',
        'avatar': 'AdminAvatar',
        'team_priority_level': 'TeamPriorityLevel'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'name': 'name',
        'email': 'email',
        'job_title': 'job_title',
        'away_mode_enabled': 'away_mode_enabled',
        'away_mode_reassign': 'away_mode_reassign',
        'has_inbox_seat': 'has_inbox_seat',
        'team_ids': 'team_ids',
        'avatar': 'avatar',
        'team_priority_level': 'team_priority_level'
    }

    def __init__(self, type=None, id=None, name=None, email=None, job_title=None, away_mode_enabled=None, away_mode_reassign=None, has_inbox_seat=None, team_ids=None, avatar=None, team_priority_level=None):  # noqa: E501
        """Admin - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self._name = None
        self._email = None
        self._job_title = None
        self._away_mode_enabled = None
        self._away_mode_reassign = None
        self._has_inbox_seat = None
        self._team_ids = None
        self._avatar = None
        self._team_priority_level = None
        self.discriminator = None
        if type is not None:
            self.type = type
        self.id = id
        self.name = name
        self.email = email
        self.job_title = job_title
        self.away_mode_enabled = away_mode_enabled
        self.away_mode_reassign = away_mode_reassign
        self.has_inbox_seat = has_inbox_seat
        self.team_ids = team_ids
        if avatar is not None:
            self.avatar = avatar
        if team_priority_level is not None:
            self.team_priority_level = team_priority_level

    @property
    def type(self):
        """Gets the type of this Admin.  # noqa: E501

        String representing the object's type. Always has the value `admin`.  # noqa: E501

        :return: The type of this Admin.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Admin.

        String representing the object's type. Always has the value `admin`.  # noqa: E501

        :param type: The type of this Admin.  # noqa: E501
        :type: str
        """
        allowed_values = ["admin"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this Admin.  # noqa: E501

        The id representing the admin.  # noqa: E501

        :return: The id of this Admin.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Admin.

        The id representing the admin.  # noqa: E501

        :param id: The id of this Admin.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Admin.  # noqa: E501

        The name of the admin.  # noqa: E501

        :return: The name of this Admin.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Admin.

        The name of the admin.  # noqa: E501

        :param name: The name of this Admin.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def email(self):
        """Gets the email of this Admin.  # noqa: E501

        The email of the admin.  # noqa: E501

        :return: The email of this Admin.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Admin.

        The email of the admin.  # noqa: E501

        :param email: The email of this Admin.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def job_title(self):
        """Gets the job_title of this Admin.  # noqa: E501

        The job title of the admin.  # noqa: E501

        :return: The job_title of this Admin.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this Admin.

        The job title of the admin.  # noqa: E501

        :param job_title: The job_title of this Admin.  # noqa: E501
        :type: str
        """
        if job_title is None:
            raise ValueError("Invalid value for `job_title`, must not be `None`")  # noqa: E501

        self._job_title = job_title

    @property
    def away_mode_enabled(self):
        """Gets the away_mode_enabled of this Admin.  # noqa: E501

        Identifies if this admin is currently set in away mode.  # noqa: E501

        :return: The away_mode_enabled of this Admin.  # noqa: E501
        :rtype: bool
        """
        return self._away_mode_enabled

    @away_mode_enabled.setter
    def away_mode_enabled(self, away_mode_enabled):
        """Sets the away_mode_enabled of this Admin.

        Identifies if this admin is currently set in away mode.  # noqa: E501

        :param away_mode_enabled: The away_mode_enabled of this Admin.  # noqa: E501
        :type: bool
        """
        if away_mode_enabled is None:
            raise ValueError("Invalid value for `away_mode_enabled`, must not be `None`")  # noqa: E501

        self._away_mode_enabled = away_mode_enabled

    @property
    def away_mode_reassign(self):
        """Gets the away_mode_reassign of this Admin.  # noqa: E501

        Identifies if this admin is set to automatically reassign new conversations to the apps default inbox.  # noqa: E501

        :return: The away_mode_reassign of this Admin.  # noqa: E501
        :rtype: bool
        """
        return self._away_mode_reassign

    @away_mode_reassign.setter
    def away_mode_reassign(self, away_mode_reassign):
        """Sets the away_mode_reassign of this Admin.

        Identifies if this admin is set to automatically reassign new conversations to the apps default inbox.  # noqa: E501

        :param away_mode_reassign: The away_mode_reassign of this Admin.  # noqa: E501
        :type: bool
        """
        if away_mode_reassign is None:
            raise ValueError("Invalid value for `away_mode_reassign`, must not be `None`")  # noqa: E501

        self._away_mode_reassign = away_mode_reassign

    @property
    def has_inbox_seat(self):
        """Gets the has_inbox_seat of this Admin.  # noqa: E501

        Identifies if this admin has a paid inbox seat to restrict/allow features that require them.  # noqa: E501

        :return: The has_inbox_seat of this Admin.  # noqa: E501
        :rtype: bool
        """
        return self._has_inbox_seat

    @has_inbox_seat.setter
    def has_inbox_seat(self, has_inbox_seat):
        """Sets the has_inbox_seat of this Admin.

        Identifies if this admin has a paid inbox seat to restrict/allow features that require them.  # noqa: E501

        :param has_inbox_seat: The has_inbox_seat of this Admin.  # noqa: E501
        :type: bool
        """
        if has_inbox_seat is None:
            raise ValueError("Invalid value for `has_inbox_seat`, must not be `None`")  # noqa: E501

        self._has_inbox_seat = has_inbox_seat

    @property
    def team_ids(self):
        """Gets the team_ids of this Admin.  # noqa: E501

        This object represents the avatar associated with the admin.  # noqa: E501

        :return: The team_ids of this Admin.  # noqa: E501
        :rtype: list[int]
        """
        return self._team_ids

    @team_ids.setter
    def team_ids(self, team_ids):
        """Sets the team_ids of this Admin.

        This object represents the avatar associated with the admin.  # noqa: E501

        :param team_ids: The team_ids of this Admin.  # noqa: E501
        :type: list[int]
        """
        if team_ids is None:
            raise ValueError("Invalid value for `team_ids`, must not be `None`")  # noqa: E501

        self._team_ids = team_ids

    @property
    def avatar(self):
        """Gets the avatar of this Admin.  # noqa: E501


        :return: The avatar of this Admin.  # noqa: E501
        :rtype: AdminAvatar
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this Admin.


        :param avatar: The avatar of this Admin.  # noqa: E501
        :type: AdminAvatar
        """

        self._avatar = avatar

    @property
    def team_priority_level(self):
        """Gets the team_priority_level of this Admin.  # noqa: E501


        :return: The team_priority_level of this Admin.  # noqa: E501
        :rtype: TeamPriorityLevel
        """
        return self._team_priority_level

    @team_priority_level.setter
    def team_priority_level(self, team_priority_level):
        """Sets the team_priority_level of this Admin.


        :param team_priority_level: The team_priority_level of this Admin.  # noqa: E501
        :type: TeamPriorityLevel
        """

        self._team_priority_level = team_priority_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Admin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Admin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
