# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubmitResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'canvas': 'CanvasObject',
        'card_creation_options': 'dict(str, object)',
        'event': 'Event'
    }

    attribute_map = {
        'canvas': 'canvas',
        'card_creation_options': 'card_creation_options',
        'event': 'event'
    }

    def __init__(self, canvas=None, card_creation_options=None, event=None):  # noqa: E501
        """SubmitResponse - a model defined in Swagger"""  # noqa: E501
        self._canvas = None
        self._card_creation_options = None
        self._event = None
        self.discriminator = None
        self.canvas = canvas
        if card_creation_options is not None:
            self.card_creation_options = card_creation_options
        if event is not None:
            self.event = event

    @property
    def canvas(self):
        """Gets the canvas of this SubmitResponse.  # noqa: E501


        :return: The canvas of this SubmitResponse.  # noqa: E501
        :rtype: CanvasObject
        """
        return self._canvas

    @canvas.setter
    def canvas(self, canvas):
        """Sets the canvas of this SubmitResponse.


        :param canvas: The canvas of this SubmitResponse.  # noqa: E501
        :type: CanvasObject
        """
        if canvas is None:
            raise ValueError("Invalid value for `canvas`, must not be `None`")  # noqa: E501

        self._canvas = canvas

    @property
    def card_creation_options(self):
        """Gets the card_creation_options of this SubmitResponse.  # noqa: E501

        Optional. Key-value pairs that will be sent in the initialize request to insert an app into the conversation reply.  # noqa: E501

        :return: The card_creation_options of this SubmitResponse.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._card_creation_options

    @card_creation_options.setter
    def card_creation_options(self, card_creation_options):
        """Sets the card_creation_options of this SubmitResponse.

        Optional. Key-value pairs that will be sent in the initialize request to insert an app into the conversation reply.  # noqa: E501

        :param card_creation_options: The card_creation_options of this SubmitResponse.  # noqa: E501
        :type: dict(str, object)
        """

        self._card_creation_options = card_creation_options

    @property
    def event(self):
        """Gets the event of this SubmitResponse.  # noqa: E501


        :return: The event of this SubmitResponse.  # noqa: E501
        :rtype: Event
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this SubmitResponse.


        :param event: The event of this SubmitResponse.  # noqa: E501
        :type: Event
        """

        self._event = event

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubmitResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmitResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
