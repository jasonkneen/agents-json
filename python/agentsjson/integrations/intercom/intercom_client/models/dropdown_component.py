# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DropdownComponent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'options': 'list[DropdownOption]',
        'label': 'str',
        'value': 'str',
        'save_state': 'str',
        'disabled': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'options': 'options',
        'label': 'label',
        'value': 'value',
        'save_state': 'save_state',
        'disabled': 'disabled'
    }

    def __init__(self, type=None, id=None, options=None, label=None, value=None, save_state='unsaved', disabled=False):  # noqa: E501
        """DropdownComponent - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self._options = None
        self._label = None
        self._value = None
        self._save_state = None
        self._disabled = None
        self.discriminator = None
        self.type = type
        self.id = id
        self.options = options
        if label is not None:
            self.label = label
        if value is not None:
            self.value = value
        if save_state is not None:
            self.save_state = save_state
        if disabled is not None:
            self.disabled = disabled

    @property
    def type(self):
        """Gets the type of this DropdownComponent.  # noqa: E501

        The type of component you are rendering.  # noqa: E501

        :return: The type of this DropdownComponent.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DropdownComponent.

        The type of component you are rendering.  # noqa: E501

        :param type: The type of this DropdownComponent.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["dropdown"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this DropdownComponent.  # noqa: E501

        A unique identifier for the component.  # noqa: E501

        :return: The id of this DropdownComponent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DropdownComponent.

        A unique identifier for the component.  # noqa: E501

        :param id: The id of this DropdownComponent.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def options(self):
        """Gets the options of this DropdownComponent.  # noqa: E501

        The list of options. Can provide 2 to 10.  # noqa: E501

        :return: The options of this DropdownComponent.  # noqa: E501
        :rtype: list[DropdownOption]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this DropdownComponent.

        The list of options. Can provide 2 to 10.  # noqa: E501

        :param options: The options of this DropdownComponent.  # noqa: E501
        :type: list[DropdownOption]
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")  # noqa: E501

        self._options = options

    @property
    def label(self):
        """Gets the label of this DropdownComponent.  # noqa: E501

        The text shown above the dropdown.  # noqa: E501

        :return: The label of this DropdownComponent.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this DropdownComponent.

        The text shown above the dropdown.  # noqa: E501

        :param label: The label of this DropdownComponent.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def value(self):
        """Gets the value of this DropdownComponent.  # noqa: E501

        The option that is selected by default.  # noqa: E501

        :return: The value of this DropdownComponent.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DropdownComponent.

        The option that is selected by default.  # noqa: E501

        :param value: The value of this DropdownComponent.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def save_state(self):
        """Gets the save_state of this DropdownComponent.  # noqa: E501

        Styles all options and prevents the action. Default is `unsaved`. Will be overridden if `save_state` is `saved`.  # noqa: E501

        :return: The save_state of this DropdownComponent.  # noqa: E501
        :rtype: str
        """
        return self._save_state

    @save_state.setter
    def save_state(self, save_state):
        """Sets the save_state of this DropdownComponent.

        Styles all options and prevents the action. Default is `unsaved`. Will be overridden if `save_state` is `saved`.  # noqa: E501

        :param save_state: The save_state of this DropdownComponent.  # noqa: E501
        :type: str
        """
        allowed_values = ["unsaved", "saved", "failed"]  # noqa: E501
        if save_state not in allowed_values:
            raise ValueError(
                "Invalid value for `save_state` ({0}), must be one of {1}"  # noqa: E501
                .format(save_state, allowed_values)
            )

        self._save_state = save_state

    @property
    def disabled(self):
        """Gets the disabled of this DropdownComponent.  # noqa: E501

        Styles all options and prevents the action. Default is false. Will be overridden if save_state is saved.  # noqa: E501

        :return: The disabled of this DropdownComponent.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this DropdownComponent.

        Styles all options and prevents the action. Default is false. Will be overridden if save_state is saved.  # noqa: E501

        :param disabled: The disabled of this DropdownComponent.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DropdownComponent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DropdownComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
