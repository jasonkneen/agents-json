# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ArticleStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'views': 'int',
        'conversions': 'int',
        'reactions': 'int',
        'happy_reaction_percentage': 'float',
        'neutral_reaction_percentage': 'float',
        'sad_reaction_percentage': 'float'
    }

    attribute_map = {
        'type': 'type',
        'views': 'views',
        'conversions': 'conversions',
        'reactions': 'reactions',
        'happy_reaction_percentage': 'happy_reaction_percentage',
        'neutral_reaction_percentage': 'neutral_reaction_percentage',
        'sad_reaction_percentage': 'sad_reaction_percentage'
    }

    def __init__(self, type='article_statistics', views=None, conversions=None, reactions=None, happy_reaction_percentage=None, neutral_reaction_percentage=None, sad_reaction_percentage=None):  # noqa: E501
        """ArticleStatistics - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._views = None
        self._conversions = None
        self._reactions = None
        self._happy_reaction_percentage = None
        self._neutral_reaction_percentage = None
        self._sad_reaction_percentage = None
        self.discriminator = None
        self.type = type
        self.views = views
        self.conversions = conversions
        self.reactions = reactions
        self.happy_reaction_percentage = happy_reaction_percentage
        self.neutral_reaction_percentage = neutral_reaction_percentage
        self.sad_reaction_percentage = sad_reaction_percentage

    @property
    def type(self):
        """Gets the type of this ArticleStatistics.  # noqa: E501

        The type of object - `article_statistics`.  # noqa: E501

        :return: The type of this ArticleStatistics.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ArticleStatistics.

        The type of object - `article_statistics`.  # noqa: E501

        :param type: The type of this ArticleStatistics.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["article_statistics"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def views(self):
        """Gets the views of this ArticleStatistics.  # noqa: E501

        The number of total views the article has received.  # noqa: E501

        :return: The views of this ArticleStatistics.  # noqa: E501
        :rtype: int
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this ArticleStatistics.

        The number of total views the article has received.  # noqa: E501

        :param views: The views of this ArticleStatistics.  # noqa: E501
        :type: int
        """
        if views is None:
            raise ValueError("Invalid value for `views`, must not be `None`")  # noqa: E501

        self._views = views

    @property
    def conversions(self):
        """Gets the conversions of this ArticleStatistics.  # noqa: E501

        The number of conversations started from the article.  # noqa: E501

        :return: The conversions of this ArticleStatistics.  # noqa: E501
        :rtype: int
        """
        return self._conversions

    @conversions.setter
    def conversions(self, conversions):
        """Sets the conversions of this ArticleStatistics.

        The number of conversations started from the article.  # noqa: E501

        :param conversions: The conversions of this ArticleStatistics.  # noqa: E501
        :type: int
        """
        if conversions is None:
            raise ValueError("Invalid value for `conversions`, must not be `None`")  # noqa: E501

        self._conversions = conversions

    @property
    def reactions(self):
        """Gets the reactions of this ArticleStatistics.  # noqa: E501

        The number of total reactions the article has received.  # noqa: E501

        :return: The reactions of this ArticleStatistics.  # noqa: E501
        :rtype: int
        """
        return self._reactions

    @reactions.setter
    def reactions(self, reactions):
        """Sets the reactions of this ArticleStatistics.

        The number of total reactions the article has received.  # noqa: E501

        :param reactions: The reactions of this ArticleStatistics.  # noqa: E501
        :type: int
        """
        if reactions is None:
            raise ValueError("Invalid value for `reactions`, must not be `None`")  # noqa: E501

        self._reactions = reactions

    @property
    def happy_reaction_percentage(self):
        """Gets the happy_reaction_percentage of this ArticleStatistics.  # noqa: E501

        The percentage of happy reactions the article has received against other types of reaction.  # noqa: E501

        :return: The happy_reaction_percentage of this ArticleStatistics.  # noqa: E501
        :rtype: float
        """
        return self._happy_reaction_percentage

    @happy_reaction_percentage.setter
    def happy_reaction_percentage(self, happy_reaction_percentage):
        """Sets the happy_reaction_percentage of this ArticleStatistics.

        The percentage of happy reactions the article has received against other types of reaction.  # noqa: E501

        :param happy_reaction_percentage: The happy_reaction_percentage of this ArticleStatistics.  # noqa: E501
        :type: float
        """
        if happy_reaction_percentage is None:
            raise ValueError("Invalid value for `happy_reaction_percentage`, must not be `None`")  # noqa: E501

        self._happy_reaction_percentage = happy_reaction_percentage

    @property
    def neutral_reaction_percentage(self):
        """Gets the neutral_reaction_percentage of this ArticleStatistics.  # noqa: E501

        The percentage of neutral reactions the article has received against other types of reaction.  # noqa: E501

        :return: The neutral_reaction_percentage of this ArticleStatistics.  # noqa: E501
        :rtype: float
        """
        return self._neutral_reaction_percentage

    @neutral_reaction_percentage.setter
    def neutral_reaction_percentage(self, neutral_reaction_percentage):
        """Sets the neutral_reaction_percentage of this ArticleStatistics.

        The percentage of neutral reactions the article has received against other types of reaction.  # noqa: E501

        :param neutral_reaction_percentage: The neutral_reaction_percentage of this ArticleStatistics.  # noqa: E501
        :type: float
        """
        if neutral_reaction_percentage is None:
            raise ValueError("Invalid value for `neutral_reaction_percentage`, must not be `None`")  # noqa: E501

        self._neutral_reaction_percentage = neutral_reaction_percentage

    @property
    def sad_reaction_percentage(self):
        """Gets the sad_reaction_percentage of this ArticleStatistics.  # noqa: E501

        The percentage of sad reactions the article has received against other types of reaction.  # noqa: E501

        :return: The sad_reaction_percentage of this ArticleStatistics.  # noqa: E501
        :rtype: float
        """
        return self._sad_reaction_percentage

    @sad_reaction_percentage.setter
    def sad_reaction_percentage(self, sad_reaction_percentage):
        """Sets the sad_reaction_percentage of this ArticleStatistics.

        The percentage of sad reactions the article has received against other types of reaction.  # noqa: E501

        :param sad_reaction_percentage: The sad_reaction_percentage of this ArticleStatistics.  # noqa: E501
        :type: float
        """
        if sad_reaction_percentage is None:
            raise ValueError("Invalid value for `sad_reaction_percentage`, must not be `None`")  # noqa: E501

        self._sad_reaction_percentage = sad_reaction_percentage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArticleStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArticleStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
