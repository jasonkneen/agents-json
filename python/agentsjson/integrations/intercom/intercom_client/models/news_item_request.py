# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NewsItemRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'body': 'str',
        'sender_id': 'int',
        'state': 'str',
        'deliver_silently': 'bool',
        'labels': 'list[str]',
        'reactions': 'list[str]',
        'newsfeed_assignments': 'list[NewsfeedAssignment]'
    }

    attribute_map = {
        'title': 'title',
        'body': 'body',
        'sender_id': 'sender_id',
        'state': 'state',
        'deliver_silently': 'deliver_silently',
        'labels': 'labels',
        'reactions': 'reactions',
        'newsfeed_assignments': 'newsfeed_assignments'
    }

    def __init__(self, title=None, body=None, sender_id=None, state=None, deliver_silently=None, labels=None, reactions=None, newsfeed_assignments=None):  # noqa: E501
        """NewsItemRequest - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._body = None
        self._sender_id = None
        self._state = None
        self._deliver_silently = None
        self._labels = None
        self._reactions = None
        self._newsfeed_assignments = None
        self.discriminator = None
        self.title = title
        if body is not None:
            self.body = body
        self.sender_id = sender_id
        if state is not None:
            self.state = state
        if deliver_silently is not None:
            self.deliver_silently = deliver_silently
        if labels is not None:
            self.labels = labels
        if reactions is not None:
            self.reactions = reactions
        if newsfeed_assignments is not None:
            self.newsfeed_assignments = newsfeed_assignments

    @property
    def title(self):
        """Gets the title of this NewsItemRequest.  # noqa: E501

        The title of the news item.  # noqa: E501

        :return: The title of this NewsItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NewsItemRequest.

        The title of the news item.  # noqa: E501

        :param title: The title of this NewsItemRequest.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def body(self):
        """Gets the body of this NewsItemRequest.  # noqa: E501

        The news item body, which may contain HTML.  # noqa: E501

        :return: The body of this NewsItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this NewsItemRequest.

        The news item body, which may contain HTML.  # noqa: E501

        :param body: The body of this NewsItemRequest.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def sender_id(self):
        """Gets the sender_id of this NewsItemRequest.  # noqa: E501

        The id of the sender of the news item. Must be a teammate on the workspace.  # noqa: E501

        :return: The sender_id of this NewsItemRequest.  # noqa: E501
        :rtype: int
        """
        return self._sender_id

    @sender_id.setter
    def sender_id(self, sender_id):
        """Sets the sender_id of this NewsItemRequest.

        The id of the sender of the news item. Must be a teammate on the workspace.  # noqa: E501

        :param sender_id: The sender_id of this NewsItemRequest.  # noqa: E501
        :type: int
        """
        if sender_id is None:
            raise ValueError("Invalid value for `sender_id`, must not be `None`")  # noqa: E501

        self._sender_id = sender_id

    @property
    def state(self):
        """Gets the state of this NewsItemRequest.  # noqa: E501

        News items will not be visible to your users in the assigned newsfeeds until they are set live.  # noqa: E501

        :return: The state of this NewsItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NewsItemRequest.

        News items will not be visible to your users in the assigned newsfeeds until they are set live.  # noqa: E501

        :param state: The state of this NewsItemRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["draft", "live"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def deliver_silently(self):
        """Gets the deliver_silently of this NewsItemRequest.  # noqa: E501

        When set to `true`, the news item will appear in the messenger newsfeed without showing a notification badge.  # noqa: E501

        :return: The deliver_silently of this NewsItemRequest.  # noqa: E501
        :rtype: bool
        """
        return self._deliver_silently

    @deliver_silently.setter
    def deliver_silently(self, deliver_silently):
        """Sets the deliver_silently of this NewsItemRequest.

        When set to `true`, the news item will appear in the messenger newsfeed without showing a notification badge.  # noqa: E501

        :param deliver_silently: The deliver_silently of this NewsItemRequest.  # noqa: E501
        :type: bool
        """

        self._deliver_silently = deliver_silently

    @property
    def labels(self):
        """Gets the labels of this NewsItemRequest.  # noqa: E501

        Label names displayed to users to categorize the news item.  # noqa: E501

        :return: The labels of this NewsItemRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this NewsItemRequest.

        Label names displayed to users to categorize the news item.  # noqa: E501

        :param labels: The labels of this NewsItemRequest.  # noqa: E501
        :type: list[str]
        """

        self._labels = labels

    @property
    def reactions(self):
        """Gets the reactions of this NewsItemRequest.  # noqa: E501

        Ordered list of emoji reactions to the news item. When empty, reactions are disabled.  # noqa: E501

        :return: The reactions of this NewsItemRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._reactions

    @reactions.setter
    def reactions(self, reactions):
        """Sets the reactions of this NewsItemRequest.

        Ordered list of emoji reactions to the news item. When empty, reactions are disabled.  # noqa: E501

        :param reactions: The reactions of this NewsItemRequest.  # noqa: E501
        :type: list[str]
        """

        self._reactions = reactions

    @property
    def newsfeed_assignments(self):
        """Gets the newsfeed_assignments of this NewsItemRequest.  # noqa: E501

        A list of newsfeed_assignments to assign to the specified newsfeed.  # noqa: E501

        :return: The newsfeed_assignments of this NewsItemRequest.  # noqa: E501
        :rtype: list[NewsfeedAssignment]
        """
        return self._newsfeed_assignments

    @newsfeed_assignments.setter
    def newsfeed_assignments(self, newsfeed_assignments):
        """Sets the newsfeed_assignments of this NewsItemRequest.

        A list of newsfeed_assignments to assign to the specified newsfeed.  # noqa: E501

        :param newsfeed_assignments: The newsfeed_assignments of this NewsItemRequest.  # noqa: E501
        :type: list[NewsfeedAssignment]
        """

        self._newsfeed_assignments = newsfeed_assignments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewsItemRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewsItemRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
