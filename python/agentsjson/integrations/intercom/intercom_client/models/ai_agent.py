# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AiAgent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_type': 'str',
        'source_title': 'str',
        'last_answer_type': 'str',
        'resolution_state': 'str',
        'rating': 'int',
        'rating_remark': 'str',
        'content_sources': 'ContentSourcesList'
    }

    attribute_map = {
        'source_type': 'source_type',
        'source_title': 'source_title',
        'last_answer_type': 'last_answer_type',
        'resolution_state': 'resolution_state',
        'rating': 'rating',
        'rating_remark': 'rating_remark',
        'content_sources': 'content_sources'
    }

    def __init__(self, source_type=None, source_title=None, last_answer_type=None, resolution_state=None, rating=None, rating_remark=None, content_sources=None):  # noqa: E501
        """AiAgent - a model defined in Swagger"""  # noqa: E501
        self._source_type = None
        self._source_title = None
        self._last_answer_type = None
        self._resolution_state = None
        self._rating = None
        self._rating_remark = None
        self._content_sources = None
        self.discriminator = None
        self.source_type = source_type
        if source_title is not None:
            self.source_title = source_title
        if last_answer_type is not None:
            self.last_answer_type = last_answer_type
        if resolution_state is not None:
            self.resolution_state = resolution_state
        if rating is not None:
            self.rating = rating
        if rating_remark is not None:
            self.rating_remark = rating_remark
        if content_sources is not None:
            self.content_sources = content_sources

    @property
    def source_type(self):
        """Gets the source_type of this AiAgent.  # noqa: E501

        The type of the source that triggered AI Agent involvement in the conversation.  # noqa: E501

        :return: The source_type of this AiAgent.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this AiAgent.

        The type of the source that triggered AI Agent involvement in the conversation.  # noqa: E501

        :param source_type: The source_type of this AiAgent.  # noqa: E501
        :type: str
        """
        if source_type is None:
            raise ValueError("Invalid value for `source_type`, must not be `None`")  # noqa: E501
        allowed_values = ["essentials_plan_setup", "profile", "workflow", "workflow_preview", "fin_preview"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"  # noqa: E501
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def source_title(self):
        """Gets the source_title of this AiAgent.  # noqa: E501

        The title of the source that triggered AI Agent involvement in the conversation. If this is `essentials_plan_setup` then it will return `null`.  # noqa: E501

        :return: The source_title of this AiAgent.  # noqa: E501
        :rtype: str
        """
        return self._source_title

    @source_title.setter
    def source_title(self, source_title):
        """Sets the source_title of this AiAgent.

        The title of the source that triggered AI Agent involvement in the conversation. If this is `essentials_plan_setup` then it will return `null`.  # noqa: E501

        :param source_title: The source_title of this AiAgent.  # noqa: E501
        :type: str
        """

        self._source_title = source_title

    @property
    def last_answer_type(self):
        """Gets the last_answer_type of this AiAgent.  # noqa: E501

        The type of the last answer delivered by AI Agent. If no answer was delivered then this will return `null`  # noqa: E501

        :return: The last_answer_type of this AiAgent.  # noqa: E501
        :rtype: str
        """
        return self._last_answer_type

    @last_answer_type.setter
    def last_answer_type(self, last_answer_type):
        """Sets the last_answer_type of this AiAgent.

        The type of the last answer delivered by AI Agent. If no answer was delivered then this will return `null`  # noqa: E501

        :param last_answer_type: The last_answer_type of this AiAgent.  # noqa: E501
        :type: str
        """
        allowed_values = ["", "ai_answer", "custom_answer"]  # noqa: E501
        if last_answer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `last_answer_type` ({0}), must be one of {1}"  # noqa: E501
                .format(last_answer_type, allowed_values)
            )

        self._last_answer_type = last_answer_type

    @property
    def resolution_state(self):
        """Gets the resolution_state of this AiAgent.  # noqa: E501

        The resolution state of AI Agent. If no AI or custom answer has been delivered then this will return `null`.  # noqa: E501

        :return: The resolution_state of this AiAgent.  # noqa: E501
        :rtype: str
        """
        return self._resolution_state

    @resolution_state.setter
    def resolution_state(self, resolution_state):
        """Sets the resolution_state of this AiAgent.

        The resolution state of AI Agent. If no AI or custom answer has been delivered then this will return `null`.  # noqa: E501

        :param resolution_state: The resolution_state of this AiAgent.  # noqa: E501
        :type: str
        """
        allowed_values = ["assumed_resolution", "confirmed_resolution", "routed_to_team", "abandoned", ""]  # noqa: E501
        if resolution_state not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution_state` ({0}), must be one of {1}"  # noqa: E501
                .format(resolution_state, allowed_values)
            )

        self._resolution_state = resolution_state

    @property
    def rating(self):
        """Gets the rating of this AiAgent.  # noqa: E501

        The customer satisfaction rating given to AI Agent, from 1-5.  # noqa: E501

        :return: The rating of this AiAgent.  # noqa: E501
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this AiAgent.

        The customer satisfaction rating given to AI Agent, from 1-5.  # noqa: E501

        :param rating: The rating of this AiAgent.  # noqa: E501
        :type: int
        """

        self._rating = rating

    @property
    def rating_remark(self):
        """Gets the rating_remark of this AiAgent.  # noqa: E501

        The customer satisfaction rating remark given to AI Agent.  # noqa: E501

        :return: The rating_remark of this AiAgent.  # noqa: E501
        :rtype: str
        """
        return self._rating_remark

    @rating_remark.setter
    def rating_remark(self, rating_remark):
        """Sets the rating_remark of this AiAgent.

        The customer satisfaction rating remark given to AI Agent.  # noqa: E501

        :param rating_remark: The rating_remark of this AiAgent.  # noqa: E501
        :type: str
        """

        self._rating_remark = rating_remark

    @property
    def content_sources(self):
        """Gets the content_sources of this AiAgent.  # noqa: E501


        :return: The content_sources of this AiAgent.  # noqa: E501
        :rtype: ContentSourcesList
        """
        return self._content_sources

    @content_sources.setter
    def content_sources(self, content_sources):
        """Sets the content_sources of this AiAgent.


        :param content_sources: The content_sources of this AiAgent.  # noqa: E501
        :type: ContentSourcesList
        """

        self._content_sources = content_sources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AiAgent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AiAgent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
