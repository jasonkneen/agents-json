# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConversationStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'time_to_assignment': 'int',
        'time_to_admin_reply': 'int',
        'time_to_first_close': 'int',
        'time_to_last_close': 'int',
        'median_time_to_reply': 'int',
        'first_contact_reply_at': 'int',
        'first_assignment_at': 'int',
        'first_admin_reply_at': 'int',
        'first_close_at': 'int',
        'last_assignment_at': 'int',
        'last_assignment_admin_reply_at': 'int',
        'last_contact_reply_at': 'int',
        'last_admin_reply_at': 'int',
        'last_close_at': 'int',
        'last_closed_by_id': 'str',
        'count_reopens': 'int',
        'count_assignments': 'int',
        'count_conversation_parts': 'int'
    }

    attribute_map = {
        'type': 'type',
        'time_to_assignment': 'time_to_assignment',
        'time_to_admin_reply': 'time_to_admin_reply',
        'time_to_first_close': 'time_to_first_close',
        'time_to_last_close': 'time_to_last_close',
        'median_time_to_reply': 'median_time_to_reply',
        'first_contact_reply_at': 'first_contact_reply_at',
        'first_assignment_at': 'first_assignment_at',
        'first_admin_reply_at': 'first_admin_reply_at',
        'first_close_at': 'first_close_at',
        'last_assignment_at': 'last_assignment_at',
        'last_assignment_admin_reply_at': 'last_assignment_admin_reply_at',
        'last_contact_reply_at': 'last_contact_reply_at',
        'last_admin_reply_at': 'last_admin_reply_at',
        'last_close_at': 'last_close_at',
        'last_closed_by_id': 'last_closed_by_id',
        'count_reopens': 'count_reopens',
        'count_assignments': 'count_assignments',
        'count_conversation_parts': 'count_conversation_parts'
    }

    def __init__(self, type=None, time_to_assignment=None, time_to_admin_reply=None, time_to_first_close=None, time_to_last_close=None, median_time_to_reply=None, first_contact_reply_at=None, first_assignment_at=None, first_admin_reply_at=None, first_close_at=None, last_assignment_at=None, last_assignment_admin_reply_at=None, last_contact_reply_at=None, last_admin_reply_at=None, last_close_at=None, last_closed_by_id=None, count_reopens=None, count_assignments=None, count_conversation_parts=None):  # noqa: E501
        """ConversationStatistics - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._time_to_assignment = None
        self._time_to_admin_reply = None
        self._time_to_first_close = None
        self._time_to_last_close = None
        self._median_time_to_reply = None
        self._first_contact_reply_at = None
        self._first_assignment_at = None
        self._first_admin_reply_at = None
        self._first_close_at = None
        self._last_assignment_at = None
        self._last_assignment_admin_reply_at = None
        self._last_contact_reply_at = None
        self._last_admin_reply_at = None
        self._last_close_at = None
        self._last_closed_by_id = None
        self._count_reopens = None
        self._count_assignments = None
        self._count_conversation_parts = None
        self.discriminator = None
        self.type = type
        if time_to_assignment is not None:
            self.time_to_assignment = time_to_assignment
        if time_to_admin_reply is not None:
            self.time_to_admin_reply = time_to_admin_reply
        if time_to_first_close is not None:
            self.time_to_first_close = time_to_first_close
        if time_to_last_close is not None:
            self.time_to_last_close = time_to_last_close
        if median_time_to_reply is not None:
            self.median_time_to_reply = median_time_to_reply
        if first_contact_reply_at is not None:
            self.first_contact_reply_at = first_contact_reply_at
        if first_assignment_at is not None:
            self.first_assignment_at = first_assignment_at
        if first_admin_reply_at is not None:
            self.first_admin_reply_at = first_admin_reply_at
        if first_close_at is not None:
            self.first_close_at = first_close_at
        if last_assignment_at is not None:
            self.last_assignment_at = last_assignment_at
        if last_assignment_admin_reply_at is not None:
            self.last_assignment_admin_reply_at = last_assignment_admin_reply_at
        if last_contact_reply_at is not None:
            self.last_contact_reply_at = last_contact_reply_at
        if last_admin_reply_at is not None:
            self.last_admin_reply_at = last_admin_reply_at
        if last_close_at is not None:
            self.last_close_at = last_close_at
        if last_closed_by_id is not None:
            self.last_closed_by_id = last_closed_by_id
        if count_reopens is not None:
            self.count_reopens = count_reopens
        if count_assignments is not None:
            self.count_assignments = count_assignments
        if count_conversation_parts is not None:
            self.count_conversation_parts = count_conversation_parts

    @property
    def type(self):
        """Gets the type of this ConversationStatistics.  # noqa: E501


        :return: The type of this ConversationStatistics.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConversationStatistics.


        :param type: The type of this ConversationStatistics.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["conversation_statistics"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def time_to_assignment(self):
        """Gets the time_to_assignment of this ConversationStatistics.  # noqa: E501

        Duration until last assignment before first admin reply. In seconds.  # noqa: E501

        :return: The time_to_assignment of this ConversationStatistics.  # noqa: E501
        :rtype: int
        """
        return self._time_to_assignment

    @time_to_assignment.setter
    def time_to_assignment(self, time_to_assignment):
        """Sets the time_to_assignment of this ConversationStatistics.

        Duration until last assignment before first admin reply. In seconds.  # noqa: E501

        :param time_to_assignment: The time_to_assignment of this ConversationStatistics.  # noqa: E501
        :type: int
        """

        self._time_to_assignment = time_to_assignment

    @property
    def time_to_admin_reply(self):
        """Gets the time_to_admin_reply of this ConversationStatistics.  # noqa: E501

        Duration until first admin reply. Subtracts out of business hours. In seconds.  # noqa: E501

        :return: The time_to_admin_reply of this ConversationStatistics.  # noqa: E501
        :rtype: int
        """
        return self._time_to_admin_reply

    @time_to_admin_reply.setter
    def time_to_admin_reply(self, time_to_admin_reply):
        """Sets the time_to_admin_reply of this ConversationStatistics.

        Duration until first admin reply. Subtracts out of business hours. In seconds.  # noqa: E501

        :param time_to_admin_reply: The time_to_admin_reply of this ConversationStatistics.  # noqa: E501
        :type: int
        """

        self._time_to_admin_reply = time_to_admin_reply

    @property
    def time_to_first_close(self):
        """Gets the time_to_first_close of this ConversationStatistics.  # noqa: E501

        Duration until conversation was closed first time. Subtracts out of business hours. In seconds.  # noqa: E501

        :return: The time_to_first_close of this ConversationStatistics.  # noqa: E501
        :rtype: int
        """
        return self._time_to_first_close

    @time_to_first_close.setter
    def time_to_first_close(self, time_to_first_close):
        """Sets the time_to_first_close of this ConversationStatistics.

        Duration until conversation was closed first time. Subtracts out of business hours. In seconds.  # noqa: E501

        :param time_to_first_close: The time_to_first_close of this ConversationStatistics.  # noqa: E501
        :type: int
        """

        self._time_to_first_close = time_to_first_close

    @property
    def time_to_last_close(self):
        """Gets the time_to_last_close of this ConversationStatistics.  # noqa: E501

        Duration until conversation was closed last time. Subtracts out of business hours. In seconds.  # noqa: E501

        :return: The time_to_last_close of this ConversationStatistics.  # noqa: E501
        :rtype: int
        """
        return self._time_to_last_close

    @time_to_last_close.setter
    def time_to_last_close(self, time_to_last_close):
        """Sets the time_to_last_close of this ConversationStatistics.

        Duration until conversation was closed last time. Subtracts out of business hours. In seconds.  # noqa: E501

        :param time_to_last_close: The time_to_last_close of this ConversationStatistics.  # noqa: E501
        :type: int
        """

        self._time_to_last_close = time_to_last_close

    @property
    def median_time_to_reply(self):
        """Gets the median_time_to_reply of this ConversationStatistics.  # noqa: E501

        Median based on all admin replies after a contact reply. Subtracts out of business hours. In seconds.  # noqa: E501

        :return: The median_time_to_reply of this ConversationStatistics.  # noqa: E501
        :rtype: int
        """
        return self._median_time_to_reply

    @median_time_to_reply.setter
    def median_time_to_reply(self, median_time_to_reply):
        """Sets the median_time_to_reply of this ConversationStatistics.

        Median based on all admin replies after a contact reply. Subtracts out of business hours. In seconds.  # noqa: E501

        :param median_time_to_reply: The median_time_to_reply of this ConversationStatistics.  # noqa: E501
        :type: int
        """

        self._median_time_to_reply = median_time_to_reply

    @property
    def first_contact_reply_at(self):
        """Gets the first_contact_reply_at of this ConversationStatistics.  # noqa: E501

        Time of first text conversation part from a contact.  # noqa: E501

        :return: The first_contact_reply_at of this ConversationStatistics.  # noqa: E501
        :rtype: int
        """
        return self._first_contact_reply_at

    @first_contact_reply_at.setter
    def first_contact_reply_at(self, first_contact_reply_at):
        """Sets the first_contact_reply_at of this ConversationStatistics.

        Time of first text conversation part from a contact.  # noqa: E501

        :param first_contact_reply_at: The first_contact_reply_at of this ConversationStatistics.  # noqa: E501
        :type: int
        """

        self._first_contact_reply_at = first_contact_reply_at

    @property
    def first_assignment_at(self):
        """Gets the first_assignment_at of this ConversationStatistics.  # noqa: E501

        Time of first assignment after first_contact_reply_at.  # noqa: E501

        :return: The first_assignment_at of this ConversationStatistics.  # noqa: E501
        :rtype: int
        """
        return self._first_assignment_at

    @first_assignment_at.setter
    def first_assignment_at(self, first_assignment_at):
        """Sets the first_assignment_at of this ConversationStatistics.

        Time of first assignment after first_contact_reply_at.  # noqa: E501

        :param first_assignment_at: The first_assignment_at of this ConversationStatistics.  # noqa: E501
        :type: int
        """

        self._first_assignment_at = first_assignment_at

    @property
    def first_admin_reply_at(self):
        """Gets the first_admin_reply_at of this ConversationStatistics.  # noqa: E501

        Time of first admin reply after first_contact_reply_at.  # noqa: E501

        :return: The first_admin_reply_at of this ConversationStatistics.  # noqa: E501
        :rtype: int
        """
        return self._first_admin_reply_at

    @first_admin_reply_at.setter
    def first_admin_reply_at(self, first_admin_reply_at):
        """Sets the first_admin_reply_at of this ConversationStatistics.

        Time of first admin reply after first_contact_reply_at.  # noqa: E501

        :param first_admin_reply_at: The first_admin_reply_at of this ConversationStatistics.  # noqa: E501
        :type: int
        """

        self._first_admin_reply_at = first_admin_reply_at

    @property
    def first_close_at(self):
        """Gets the first_close_at of this ConversationStatistics.  # noqa: E501

        Time of first close after first_contact_reply_at.  # noqa: E501

        :return: The first_close_at of this ConversationStatistics.  # noqa: E501
        :rtype: int
        """
        return self._first_close_at

    @first_close_at.setter
    def first_close_at(self, first_close_at):
        """Sets the first_close_at of this ConversationStatistics.

        Time of first close after first_contact_reply_at.  # noqa: E501

        :param first_close_at: The first_close_at of this ConversationStatistics.  # noqa: E501
        :type: int
        """

        self._first_close_at = first_close_at

    @property
    def last_assignment_at(self):
        """Gets the last_assignment_at of this ConversationStatistics.  # noqa: E501

        Time of last assignment after first_contact_reply_at.  # noqa: E501

        :return: The last_assignment_at of this ConversationStatistics.  # noqa: E501
        :rtype: int
        """
        return self._last_assignment_at

    @last_assignment_at.setter
    def last_assignment_at(self, last_assignment_at):
        """Sets the last_assignment_at of this ConversationStatistics.

        Time of last assignment after first_contact_reply_at.  # noqa: E501

        :param last_assignment_at: The last_assignment_at of this ConversationStatistics.  # noqa: E501
        :type: int
        """

        self._last_assignment_at = last_assignment_at

    @property
    def last_assignment_admin_reply_at(self):
        """Gets the last_assignment_admin_reply_at of this ConversationStatistics.  # noqa: E501

        Time of first admin reply since most recent assignment.  # noqa: E501

        :return: The last_assignment_admin_reply_at of this ConversationStatistics.  # noqa: E501
        :rtype: int
        """
        return self._last_assignment_admin_reply_at

    @last_assignment_admin_reply_at.setter
    def last_assignment_admin_reply_at(self, last_assignment_admin_reply_at):
        """Sets the last_assignment_admin_reply_at of this ConversationStatistics.

        Time of first admin reply since most recent assignment.  # noqa: E501

        :param last_assignment_admin_reply_at: The last_assignment_admin_reply_at of this ConversationStatistics.  # noqa: E501
        :type: int
        """

        self._last_assignment_admin_reply_at = last_assignment_admin_reply_at

    @property
    def last_contact_reply_at(self):
        """Gets the last_contact_reply_at of this ConversationStatistics.  # noqa: E501

        Time of the last conversation part from a contact.  # noqa: E501

        :return: The last_contact_reply_at of this ConversationStatistics.  # noqa: E501
        :rtype: int
        """
        return self._last_contact_reply_at

    @last_contact_reply_at.setter
    def last_contact_reply_at(self, last_contact_reply_at):
        """Sets the last_contact_reply_at of this ConversationStatistics.

        Time of the last conversation part from a contact.  # noqa: E501

        :param last_contact_reply_at: The last_contact_reply_at of this ConversationStatistics.  # noqa: E501
        :type: int
        """

        self._last_contact_reply_at = last_contact_reply_at

    @property
    def last_admin_reply_at(self):
        """Gets the last_admin_reply_at of this ConversationStatistics.  # noqa: E501

        Time of the last conversation part from an admin.  # noqa: E501

        :return: The last_admin_reply_at of this ConversationStatistics.  # noqa: E501
        :rtype: int
        """
        return self._last_admin_reply_at

    @last_admin_reply_at.setter
    def last_admin_reply_at(self, last_admin_reply_at):
        """Sets the last_admin_reply_at of this ConversationStatistics.

        Time of the last conversation part from an admin.  # noqa: E501

        :param last_admin_reply_at: The last_admin_reply_at of this ConversationStatistics.  # noqa: E501
        :type: int
        """

        self._last_admin_reply_at = last_admin_reply_at

    @property
    def last_close_at(self):
        """Gets the last_close_at of this ConversationStatistics.  # noqa: E501

        Time of the last conversation close.  # noqa: E501

        :return: The last_close_at of this ConversationStatistics.  # noqa: E501
        :rtype: int
        """
        return self._last_close_at

    @last_close_at.setter
    def last_close_at(self, last_close_at):
        """Sets the last_close_at of this ConversationStatistics.

        Time of the last conversation close.  # noqa: E501

        :param last_close_at: The last_close_at of this ConversationStatistics.  # noqa: E501
        :type: int
        """

        self._last_close_at = last_close_at

    @property
    def last_closed_by_id(self):
        """Gets the last_closed_by_id of this ConversationStatistics.  # noqa: E501

        The last admin who closed the conversation. Returns a reference to an Admin object.  # noqa: E501

        :return: The last_closed_by_id of this ConversationStatistics.  # noqa: E501
        :rtype: str
        """
        return self._last_closed_by_id

    @last_closed_by_id.setter
    def last_closed_by_id(self, last_closed_by_id):
        """Sets the last_closed_by_id of this ConversationStatistics.

        The last admin who closed the conversation. Returns a reference to an Admin object.  # noqa: E501

        :param last_closed_by_id: The last_closed_by_id of this ConversationStatistics.  # noqa: E501
        :type: str
        """

        self._last_closed_by_id = last_closed_by_id

    @property
    def count_reopens(self):
        """Gets the count_reopens of this ConversationStatistics.  # noqa: E501

        Number of reopens after first_contact_reply_at.  # noqa: E501

        :return: The count_reopens of this ConversationStatistics.  # noqa: E501
        :rtype: int
        """
        return self._count_reopens

    @count_reopens.setter
    def count_reopens(self, count_reopens):
        """Sets the count_reopens of this ConversationStatistics.

        Number of reopens after first_contact_reply_at.  # noqa: E501

        :param count_reopens: The count_reopens of this ConversationStatistics.  # noqa: E501
        :type: int
        """

        self._count_reopens = count_reopens

    @property
    def count_assignments(self):
        """Gets the count_assignments of this ConversationStatistics.  # noqa: E501

        Number of assignments after first_contact_reply_at.  # noqa: E501

        :return: The count_assignments of this ConversationStatistics.  # noqa: E501
        :rtype: int
        """
        return self._count_assignments

    @count_assignments.setter
    def count_assignments(self, count_assignments):
        """Sets the count_assignments of this ConversationStatistics.

        Number of assignments after first_contact_reply_at.  # noqa: E501

        :param count_assignments: The count_assignments of this ConversationStatistics.  # noqa: E501
        :type: int
        """

        self._count_assignments = count_assignments

    @property
    def count_conversation_parts(self):
        """Gets the count_conversation_parts of this ConversationStatistics.  # noqa: E501

        Total number of conversation parts.  # noqa: E501

        :return: The count_conversation_parts of this ConversationStatistics.  # noqa: E501
        :rtype: int
        """
        return self._count_conversation_parts

    @count_conversation_parts.setter
    def count_conversation_parts(self, count_conversation_parts):
        """Sets the count_conversation_parts of this ConversationStatistics.

        Total number of conversation parts.  # noqa: E501

        :param count_conversation_parts: The count_conversation_parts of this ConversationStatistics.  # noqa: E501
        :type: int
        """

        self._count_conversation_parts = count_conversation_parts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversationStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
