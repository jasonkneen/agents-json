# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'event_name': 'str',
        'created_at': 'int',
        'user_id': 'str',
        'id': 'str',
        'intercom_user_id': 'str',
        'email': 'str',
        'metadata': 'dict(str, str)'
    }

    attribute_map = {
        'type': 'type',
        'event_name': 'event_name',
        'created_at': 'created_at',
        'user_id': 'user_id',
        'id': 'id',
        'intercom_user_id': 'intercom_user_id',
        'email': 'email',
        'metadata': 'metadata'
    }

    def __init__(self, type=None, event_name=None, created_at=None, user_id=None, id=None, intercom_user_id=None, email=None, metadata=None):  # noqa: E501
        """DataEvent - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._event_name = None
        self._created_at = None
        self._user_id = None
        self._id = None
        self._intercom_user_id = None
        self._email = None
        self._metadata = None
        self.discriminator = None
        if type is not None:
            self.type = type
        self.event_name = event_name
        self.created_at = created_at
        if user_id is not None:
            self.user_id = user_id
        if id is not None:
            self.id = id
        if intercom_user_id is not None:
            self.intercom_user_id = intercom_user_id
        if email is not None:
            self.email = email
        if metadata is not None:
            self.metadata = metadata

    @property
    def type(self):
        """Gets the type of this DataEvent.  # noqa: E501

        The type of the object  # noqa: E501

        :return: The type of this DataEvent.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataEvent.

        The type of the object  # noqa: E501

        :param type: The type of this DataEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["event"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def event_name(self):
        """Gets the event_name of this DataEvent.  # noqa: E501

        The name of the event that occurred. This is presented to your App's admins when filtering and creating segments - a good event name is typically a past tense 'verb-noun' combination, to improve readability, for example `updated-plan`.  # noqa: E501

        :return: The event_name of this DataEvent.  # noqa: E501
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this DataEvent.

        The name of the event that occurred. This is presented to your App's admins when filtering and creating segments - a good event name is typically a past tense 'verb-noun' combination, to improve readability, for example `updated-plan`.  # noqa: E501

        :param event_name: The event_name of this DataEvent.  # noqa: E501
        :type: str
        """
        if event_name is None:
            raise ValueError("Invalid value for `event_name`, must not be `None`")  # noqa: E501

        self._event_name = event_name

    @property
    def created_at(self):
        """Gets the created_at of this DataEvent.  # noqa: E501

        The time the event occurred as a UTC Unix timestamp  # noqa: E501

        :return: The created_at of this DataEvent.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DataEvent.

        The time the event occurred as a UTC Unix timestamp  # noqa: E501

        :param created_at: The created_at of this DataEvent.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def user_id(self):
        """Gets the user_id of this DataEvent.  # noqa: E501

        Your identifier for the user.  # noqa: E501

        :return: The user_id of this DataEvent.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DataEvent.

        Your identifier for the user.  # noqa: E501

        :param user_id: The user_id of this DataEvent.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def id(self):
        """Gets the id of this DataEvent.  # noqa: E501

        Your identifier for a lead or a user.  # noqa: E501

        :return: The id of this DataEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataEvent.

        Your identifier for a lead or a user.  # noqa: E501

        :param id: The id of this DataEvent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def intercom_user_id(self):
        """Gets the intercom_user_id of this DataEvent.  # noqa: E501

        The Intercom identifier for the user.  # noqa: E501

        :return: The intercom_user_id of this DataEvent.  # noqa: E501
        :rtype: str
        """
        return self._intercom_user_id

    @intercom_user_id.setter
    def intercom_user_id(self, intercom_user_id):
        """Sets the intercom_user_id of this DataEvent.

        The Intercom identifier for the user.  # noqa: E501

        :param intercom_user_id: The intercom_user_id of this DataEvent.  # noqa: E501
        :type: str
        """

        self._intercom_user_id = intercom_user_id

    @property
    def email(self):
        """Gets the email of this DataEvent.  # noqa: E501

        An email address for your user. An email should only be used where your application uses email to uniquely identify users.  # noqa: E501

        :return: The email of this DataEvent.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this DataEvent.

        An email address for your user. An email should only be used where your application uses email to uniquely identify users.  # noqa: E501

        :param email: The email of this DataEvent.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def metadata(self):
        """Gets the metadata of this DataEvent.  # noqa: E501

        Optional metadata about the event.  # noqa: E501

        :return: The metadata of this DataEvent.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DataEvent.

        Optional metadata about the event.  # noqa: E501

        :param metadata: The metadata of this DataEvent.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
