# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContentSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_type': 'str',
        'url': 'str',
        'title': 'str',
        'locale': 'str'
    }

    attribute_map = {
        'content_type': 'content_type',
        'url': 'url',
        'title': 'title',
        'locale': 'locale'
    }

    def __init__(self, content_type=None, url=None, title=None, locale=None):  # noqa: E501
        """ContentSource - a model defined in Swagger"""  # noqa: E501
        self._content_type = None
        self._url = None
        self._title = None
        self._locale = None
        self.discriminator = None
        self.content_type = content_type
        self.url = url
        self.title = title
        self.locale = locale

    @property
    def content_type(self):
        """Gets the content_type of this ContentSource.  # noqa: E501

        The type of the content source.  # noqa: E501

        :return: The content_type of this ContentSource.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ContentSource.

        The type of the content source.  # noqa: E501

        :param content_type: The content_type of this ContentSource.  # noqa: E501
        :type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")  # noqa: E501
        allowed_values = ["file", "article", "external_content", "content_snippet", "workflow_connector_action"]  # noqa: E501
        if content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"  # noqa: E501
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def url(self):
        """Gets the url of this ContentSource.  # noqa: E501

        The internal URL linking to the content source for teammates.  # noqa: E501

        :return: The url of this ContentSource.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ContentSource.

        The internal URL linking to the content source for teammates.  # noqa: E501

        :param url: The url of this ContentSource.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def title(self):
        """Gets the title of this ContentSource.  # noqa: E501

        The title of the content source.  # noqa: E501

        :return: The title of this ContentSource.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ContentSource.

        The title of the content source.  # noqa: E501

        :param title: The title of this ContentSource.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def locale(self):
        """Gets the locale of this ContentSource.  # noqa: E501

        The ISO 639 language code of the content source.  # noqa: E501

        :return: The locale of this ContentSource.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this ContentSource.

        The ISO 639 language code of the content source.  # noqa: E501

        :param locale: The locale of this ContentSource.  # noqa: E501
        :type: str
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")  # noqa: E501

        self._locale = locale

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContentSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
