# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateDataAttributeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'archived': 'bool',
        'description': 'str',
        'options': 'list[UpdateDataAttributeRequestOptions]',
        'messenger_writable': 'bool'
    }

    attribute_map = {
        'archived': 'archived',
        'description': 'description',
        'options': 'options',
        'messenger_writable': 'messenger_writable'
    }

    def __init__(self, archived=None, description=None, options=None, messenger_writable=None):  # noqa: E501
        """UpdateDataAttributeRequest - a model defined in Swagger"""  # noqa: E501
        self._archived = None
        self._description = None
        self._options = None
        self._messenger_writable = None
        self.discriminator = None
        if archived is not None:
            self.archived = archived
        if description is not None:
            self.description = description
        if options is not None:
            self.options = options
        if messenger_writable is not None:
            self.messenger_writable = messenger_writable

    @property
    def archived(self):
        """Gets the archived of this UpdateDataAttributeRequest.  # noqa: E501

        Whether the attribute is to be archived or not.  # noqa: E501

        :return: The archived of this UpdateDataAttributeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this UpdateDataAttributeRequest.

        Whether the attribute is to be archived or not.  # noqa: E501

        :param archived: The archived of this UpdateDataAttributeRequest.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def description(self):
        """Gets the description of this UpdateDataAttributeRequest.  # noqa: E501

        The readable description you see in the UI for the attribute.  # noqa: E501

        :return: The description of this UpdateDataAttributeRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateDataAttributeRequest.

        The readable description you see in the UI for the attribute.  # noqa: E501

        :param description: The description of this UpdateDataAttributeRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def options(self):
        """Gets the options of this UpdateDataAttributeRequest.  # noqa: E501

        To create list attributes. Provide a set of hashes with `value` as the key of the options you want to make. `data_type` must be `string`.  # noqa: E501

        :return: The options of this UpdateDataAttributeRequest.  # noqa: E501
        :rtype: list[UpdateDataAttributeRequestOptions]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this UpdateDataAttributeRequest.

        To create list attributes. Provide a set of hashes with `value` as the key of the options you want to make. `data_type` must be `string`.  # noqa: E501

        :param options: The options of this UpdateDataAttributeRequest.  # noqa: E501
        :type: list[UpdateDataAttributeRequestOptions]
        """

        self._options = options

    @property
    def messenger_writable(self):
        """Gets the messenger_writable of this UpdateDataAttributeRequest.  # noqa: E501

        Can this attribute be updated by the Messenger  # noqa: E501

        :return: The messenger_writable of this UpdateDataAttributeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._messenger_writable

    @messenger_writable.setter
    def messenger_writable(self, messenger_writable):
        """Sets the messenger_writable of this UpdateDataAttributeRequest.

        Can this attribute be updated by the Messenger  # noqa: E501

        :param messenger_writable: The messenger_writable of this UpdateDataAttributeRequest.  # noqa: E501
        :type: bool
        """

        self._messenger_writable = messenger_writable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateDataAttributeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateDataAttributeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
