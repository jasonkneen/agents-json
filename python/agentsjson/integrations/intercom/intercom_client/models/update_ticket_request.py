# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateTicketRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ticket_attributes': 'object',
        'state': 'str',
        'open': 'bool',
        'is_shared': 'bool',
        'snoozed_until': 'int',
        'assignment': 'UpdateTicketRequestAssignment'
    }

    attribute_map = {
        'ticket_attributes': 'ticket_attributes',
        'state': 'state',
        'open': 'open',
        'is_shared': 'is_shared',
        'snoozed_until': 'snoozed_until',
        'assignment': 'assignment'
    }

    def __init__(self, ticket_attributes=None, state=None, open=None, is_shared=None, snoozed_until=None, assignment=None):  # noqa: E501
        """UpdateTicketRequest - a model defined in Swagger"""  # noqa: E501
        self._ticket_attributes = None
        self._state = None
        self._open = None
        self._is_shared = None
        self._snoozed_until = None
        self._assignment = None
        self.discriminator = None
        if ticket_attributes is not None:
            self.ticket_attributes = ticket_attributes
        if state is not None:
            self.state = state
        if open is not None:
            self.open = open
        if is_shared is not None:
            self.is_shared = is_shared
        if snoozed_until is not None:
            self.snoozed_until = snoozed_until
        if assignment is not None:
            self.assignment = assignment

    @property
    def ticket_attributes(self):
        """Gets the ticket_attributes of this UpdateTicketRequest.  # noqa: E501

        The attributes set on the ticket.  # noqa: E501

        :return: The ticket_attributes of this UpdateTicketRequest.  # noqa: E501
        :rtype: object
        """
        return self._ticket_attributes

    @ticket_attributes.setter
    def ticket_attributes(self, ticket_attributes):
        """Sets the ticket_attributes of this UpdateTicketRequest.

        The attributes set on the ticket.  # noqa: E501

        :param ticket_attributes: The ticket_attributes of this UpdateTicketRequest.  # noqa: E501
        :type: object
        """

        self._ticket_attributes = ticket_attributes

    @property
    def state(self):
        """Gets the state of this UpdateTicketRequest.  # noqa: E501

        The state of the ticket.  # noqa: E501

        :return: The state of this UpdateTicketRequest.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UpdateTicketRequest.

        The state of the ticket.  # noqa: E501

        :param state: The state of this UpdateTicketRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["in_progress", "waiting_on_customer", "resolved"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def open(self):
        """Gets the open of this UpdateTicketRequest.  # noqa: E501

        Specify if a ticket is open. Set to false to close a ticket. Closing a ticket will also unsnooze it.  # noqa: E501

        :return: The open of this UpdateTicketRequest.  # noqa: E501
        :rtype: bool
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this UpdateTicketRequest.

        Specify if a ticket is open. Set to false to close a ticket. Closing a ticket will also unsnooze it.  # noqa: E501

        :param open: The open of this UpdateTicketRequest.  # noqa: E501
        :type: bool
        """

        self._open = open

    @property
    def is_shared(self):
        """Gets the is_shared of this UpdateTicketRequest.  # noqa: E501

        Specify whether the ticket is visible to users.  # noqa: E501

        :return: The is_shared of this UpdateTicketRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_shared

    @is_shared.setter
    def is_shared(self, is_shared):
        """Sets the is_shared of this UpdateTicketRequest.

        Specify whether the ticket is visible to users.  # noqa: E501

        :param is_shared: The is_shared of this UpdateTicketRequest.  # noqa: E501
        :type: bool
        """

        self._is_shared = is_shared

    @property
    def snoozed_until(self):
        """Gets the snoozed_until of this UpdateTicketRequest.  # noqa: E501

        The time you want the ticket to reopen.  # noqa: E501

        :return: The snoozed_until of this UpdateTicketRequest.  # noqa: E501
        :rtype: int
        """
        return self._snoozed_until

    @snoozed_until.setter
    def snoozed_until(self, snoozed_until):
        """Sets the snoozed_until of this UpdateTicketRequest.

        The time you want the ticket to reopen.  # noqa: E501

        :param snoozed_until: The snoozed_until of this UpdateTicketRequest.  # noqa: E501
        :type: int
        """

        self._snoozed_until = snoozed_until

    @property
    def assignment(self):
        """Gets the assignment of this UpdateTicketRequest.  # noqa: E501


        :return: The assignment of this UpdateTicketRequest.  # noqa: E501
        :rtype: UpdateTicketRequestAssignment
        """
        return self._assignment

    @assignment.setter
    def assignment(self, assignment):
        """Sets the assignment of this UpdateTicketRequest.


        :param assignment: The assignment of this UpdateTicketRequest.  # noqa: E501
        :type: UpdateTicketRequestAssignment
        """

        self._assignment = assignment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateTicketRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateTicketRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
