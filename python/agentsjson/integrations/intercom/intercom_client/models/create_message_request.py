# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateMessageRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message_type': 'str',
        'subject': 'str',
        'body': 'str',
        'template': 'str',
        '_from': 'CreateMessageRequestFrom',
        'to': 'CreateMessageRequestTo',
        'created_at': 'int',
        'create_conversation_without_contact_reply': 'bool'
    }

    attribute_map = {
        'message_type': 'message_type',
        'subject': 'subject',
        'body': 'body',
        'template': 'template',
        '_from': 'from',
        'to': 'to',
        'created_at': 'created_at',
        'create_conversation_without_contact_reply': 'create_conversation_without_contact_reply'
    }

    def __init__(self, message_type=None, subject=None, body=None, template=None, _from=None, to=None, created_at=None, create_conversation_without_contact_reply=False):  # noqa: E501
        """CreateMessageRequest - a model defined in Swagger"""  # noqa: E501
        self._message_type = None
        self._subject = None
        self._body = None
        self._template = None
        self.__from = None
        self._to = None
        self._created_at = None
        self._create_conversation_without_contact_reply = None
        self.discriminator = None
        if message_type is not None:
            self.message_type = message_type
        if subject is not None:
            self.subject = subject
        if body is not None:
            self.body = body
        if template is not None:
            self.template = template
        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to
        if created_at is not None:
            self.created_at = created_at
        if create_conversation_without_contact_reply is not None:
            self.create_conversation_without_contact_reply = create_conversation_without_contact_reply

    @property
    def message_type(self):
        """Gets the message_type of this CreateMessageRequest.  # noqa: E501

        The kind of message being created. Values: `in_app` or `email`.  # noqa: E501

        :return: The message_type of this CreateMessageRequest.  # noqa: E501
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this CreateMessageRequest.

        The kind of message being created. Values: `in_app` or `email`.  # noqa: E501

        :param message_type: The message_type of this CreateMessageRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["in_app", "email"]  # noqa: E501
        if message_type not in allowed_values:
            raise ValueError(
                "Invalid value for `message_type` ({0}), must be one of {1}"  # noqa: E501
                .format(message_type, allowed_values)
            )

        self._message_type = message_type

    @property
    def subject(self):
        """Gets the subject of this CreateMessageRequest.  # noqa: E501

        The title of the email.  # noqa: E501

        :return: The subject of this CreateMessageRequest.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CreateMessageRequest.

        The title of the email.  # noqa: E501

        :param subject: The subject of this CreateMessageRequest.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def body(self):
        """Gets the body of this CreateMessageRequest.  # noqa: E501

        The content of the message. HTML and plaintext are supported.  # noqa: E501

        :return: The body of this CreateMessageRequest.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this CreateMessageRequest.

        The content of the message. HTML and plaintext are supported.  # noqa: E501

        :param body: The body of this CreateMessageRequest.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def template(self):
        """Gets the template of this CreateMessageRequest.  # noqa: E501

        The style of the outgoing message. Possible values `plain` or `personal`.  # noqa: E501

        :return: The template of this CreateMessageRequest.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this CreateMessageRequest.

        The style of the outgoing message. Possible values `plain` or `personal`.  # noqa: E501

        :param template: The template of this CreateMessageRequest.  # noqa: E501
        :type: str
        """

        self._template = template

    @property
    def _from(self):
        """Gets the _from of this CreateMessageRequest.  # noqa: E501


        :return: The _from of this CreateMessageRequest.  # noqa: E501
        :rtype: CreateMessageRequestFrom
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this CreateMessageRequest.


        :param _from: The _from of this CreateMessageRequest.  # noqa: E501
        :type: CreateMessageRequestFrom
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this CreateMessageRequest.  # noqa: E501


        :return: The to of this CreateMessageRequest.  # noqa: E501
        :rtype: CreateMessageRequestTo
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this CreateMessageRequest.


        :param to: The to of this CreateMessageRequest.  # noqa: E501
        :type: CreateMessageRequestTo
        """

        self._to = to

    @property
    def created_at(self):
        """Gets the created_at of this CreateMessageRequest.  # noqa: E501

        The time the message was created. If not provided, the current time will be used.  # noqa: E501

        :return: The created_at of this CreateMessageRequest.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CreateMessageRequest.

        The time the message was created. If not provided, the current time will be used.  # noqa: E501

        :param created_at: The created_at of this CreateMessageRequest.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def create_conversation_without_contact_reply(self):
        """Gets the create_conversation_without_contact_reply of this CreateMessageRequest.  # noqa: E501

        Whether a conversation should be opened in the inbox for the message without the contact replying. Defaults to false if not provided.  # noqa: E501

        :return: The create_conversation_without_contact_reply of this CreateMessageRequest.  # noqa: E501
        :rtype: bool
        """
        return self._create_conversation_without_contact_reply

    @create_conversation_without_contact_reply.setter
    def create_conversation_without_contact_reply(self, create_conversation_without_contact_reply):
        """Sets the create_conversation_without_contact_reply of this CreateMessageRequest.

        Whether a conversation should be opened in the inbox for the message without the contact replying. Defaults to false if not provided.  # noqa: E501

        :param create_conversation_without_contact_reply: The create_conversation_without_contact_reply of this CreateMessageRequest.  # noqa: E501
        :type: bool
        """

        self._create_conversation_without_contact_reply = create_conversation_without_contact_reply

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateMessageRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateMessageRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
