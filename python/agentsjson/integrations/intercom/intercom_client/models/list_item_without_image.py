# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from .list_item import ListItem  # noqa: F401,E501

class ListItemWithoutImage(ListItem):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'image': 'str',
        'image_width': 'int',
        'image_height': 'int'
    }
    if hasattr(ListItem, "swagger_types"):
        swagger_types.update(ListItem.swagger_types)

    attribute_map = {
        'image': 'image',
        'image_width': 'image_width',
        'image_height': 'image_height'
    }
    if hasattr(ListItem, "attribute_map"):
        attribute_map.update(ListItem.attribute_map)

    def __init__(self, image=None, image_width=None, image_height=None, *args, **kwargs):  # noqa: E501
        """ListItemWithoutImage - a model defined in Swagger"""  # noqa: E501
        self._image = None
        self._image_width = None
        self._image_height = None
        self.discriminator = None
        if image is not None:
            self.image = image
        if image_width is not None:
            self.image_width = image_width
        if image_height is not None:
            self.image_height = image_height
        ListItem.__init__(self, *args, **kwargs)

    @property
    def image(self):
        """Gets the image of this ListItemWithoutImage.  # noqa: E501

        An image that will be displayed to the left of the item.  # noqa: E501

        :return: The image of this ListItemWithoutImage.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ListItemWithoutImage.

        An image that will be displayed to the left of the item.  # noqa: E501

        :param image: The image of this ListItemWithoutImage.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def image_width(self):
        """Gets the image_width of this ListItemWithoutImage.  # noqa: E501

        The exact width of the image in pixels.  # noqa: E501

        :return: The image_width of this ListItemWithoutImage.  # noqa: E501
        :rtype: int
        """
        return self._image_width

    @image_width.setter
    def image_width(self, image_width):
        """Sets the image_width of this ListItemWithoutImage.

        The exact width of the image in pixels.  # noqa: E501

        :param image_width: The image_width of this ListItemWithoutImage.  # noqa: E501
        :type: int
        """

        self._image_width = image_width

    @property
    def image_height(self):
        """Gets the image_height of this ListItemWithoutImage.  # noqa: E501

        The exact height of the image in pixels.  # noqa: E501

        :return: The image_height of this ListItemWithoutImage.  # noqa: E501
        :rtype: int
        """
        return self._image_height

    @image_height.setter
    def image_height(self, image_height):
        """Sets the image_height of this ListItemWithoutImage.

        The exact height of the image in pixels.  # noqa: E501

        :param image_height: The image_height of this ListItemWithoutImage.  # noqa: E501
        :type: int
        """

        self._image_height = image_height

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListItemWithoutImage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListItemWithoutImage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
