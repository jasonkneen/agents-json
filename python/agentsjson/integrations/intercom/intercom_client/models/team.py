# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Team(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'name': 'str',
        'admin_ids': 'list[int]',
        'admin_priority_level': 'AdminPriorityLevel'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'name': 'name',
        'admin_ids': 'admin_ids',
        'admin_priority_level': 'admin_priority_level'
    }

    def __init__(self, type=None, id=None, name=None, admin_ids=None, admin_priority_level=None):  # noqa: E501
        """Team - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self._name = None
        self._admin_ids = None
        self._admin_priority_level = None
        self.discriminator = None
        self.type = type
        self.id = id
        self.name = name
        self.admin_ids = admin_ids
        if admin_priority_level is not None:
            self.admin_priority_level = admin_priority_level

    @property
    def type(self):
        """Gets the type of this Team.  # noqa: E501

        Value is always \"team\"  # noqa: E501

        :return: The type of this Team.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Team.

        Value is always \"team\"  # noqa: E501

        :param type: The type of this Team.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["team"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this Team.  # noqa: E501

        The id of the team  # noqa: E501

        :return: The id of this Team.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Team.

        The id of the team  # noqa: E501

        :param id: The id of this Team.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Team.  # noqa: E501

        The name of the team  # noqa: E501

        :return: The name of this Team.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Team.

        The name of the team  # noqa: E501

        :param name: The name of this Team.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def admin_ids(self):
        """Gets the admin_ids of this Team.  # noqa: E501

        The list of admin IDs that are a part of the team.  # noqa: E501

        :return: The admin_ids of this Team.  # noqa: E501
        :rtype: list[int]
        """
        return self._admin_ids

    @admin_ids.setter
    def admin_ids(self, admin_ids):
        """Sets the admin_ids of this Team.

        The list of admin IDs that are a part of the team.  # noqa: E501

        :param admin_ids: The admin_ids of this Team.  # noqa: E501
        :type: list[int]
        """
        if admin_ids is None:
            raise ValueError("Invalid value for `admin_ids`, must not be `None`")  # noqa: E501

        self._admin_ids = admin_ids

    @property
    def admin_priority_level(self):
        """Gets the admin_priority_level of this Team.  # noqa: E501


        :return: The admin_priority_level of this Team.  # noqa: E501
        :rtype: AdminPriorityLevel
        """
        return self._admin_priority_level

    @admin_priority_level.setter
    def admin_priority_level(self, admin_priority_level):
        """Sets the admin_priority_level of this Team.


        :param admin_priority_level: The admin_priority_level of this Team.  # noqa: E501
        :type: AdminPriorityLevel
        """

        self._admin_priority_level = admin_priority_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Team, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Team):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
