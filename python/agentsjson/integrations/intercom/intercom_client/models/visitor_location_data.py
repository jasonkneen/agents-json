# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VisitorLocationData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'city_name': 'str',
        'continent_code': 'str',
        'country_code': 'str',
        'country_name': 'str',
        'postal_code': 'str',
        'region_name': 'str',
        'timezone': 'str'
    }

    attribute_map = {
        'type': 'type',
        'city_name': 'city_name',
        'continent_code': 'continent_code',
        'country_code': 'country_code',
        'country_name': 'country_name',
        'postal_code': 'postal_code',
        'region_name': 'region_name',
        'timezone': 'timezone'
    }

    def __init__(self, type='location_data', city_name=None, continent_code=None, country_code=None, country_name=None, postal_code=None, region_name=None, timezone=None):  # noqa: E501
        """VisitorLocationData - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._city_name = None
        self._continent_code = None
        self._country_code = None
        self._country_name = None
        self._postal_code = None
        self._region_name = None
        self._timezone = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if city_name is not None:
            self.city_name = city_name
        if continent_code is not None:
            self.continent_code = continent_code
        if country_code is not None:
            self.country_code = country_code
        if country_name is not None:
            self.country_name = country_name
        if postal_code is not None:
            self.postal_code = postal_code
        if region_name is not None:
            self.region_name = region_name
        if timezone is not None:
            self.timezone = timezone

    @property
    def type(self):
        """Gets the type of this VisitorLocationData.  # noqa: E501


        :return: The type of this VisitorLocationData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VisitorLocationData.


        :param type: The type of this VisitorLocationData.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def city_name(self):
        """Gets the city_name of this VisitorLocationData.  # noqa: E501

        The city name of the visitor.  # noqa: E501

        :return: The city_name of this VisitorLocationData.  # noqa: E501
        :rtype: str
        """
        return self._city_name

    @city_name.setter
    def city_name(self, city_name):
        """Sets the city_name of this VisitorLocationData.

        The city name of the visitor.  # noqa: E501

        :param city_name: The city_name of this VisitorLocationData.  # noqa: E501
        :type: str
        """

        self._city_name = city_name

    @property
    def continent_code(self):
        """Gets the continent_code of this VisitorLocationData.  # noqa: E501

        The continent code of the visitor.  # noqa: E501

        :return: The continent_code of this VisitorLocationData.  # noqa: E501
        :rtype: str
        """
        return self._continent_code

    @continent_code.setter
    def continent_code(self, continent_code):
        """Sets the continent_code of this VisitorLocationData.

        The continent code of the visitor.  # noqa: E501

        :param continent_code: The continent_code of this VisitorLocationData.  # noqa: E501
        :type: str
        """

        self._continent_code = continent_code

    @property
    def country_code(self):
        """Gets the country_code of this VisitorLocationData.  # noqa: E501

        The country code of the visitor.  # noqa: E501

        :return: The country_code of this VisitorLocationData.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this VisitorLocationData.

        The country code of the visitor.  # noqa: E501

        :param country_code: The country_code of this VisitorLocationData.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def country_name(self):
        """Gets the country_name of this VisitorLocationData.  # noqa: E501

        The country name of the visitor.  # noqa: E501

        :return: The country_name of this VisitorLocationData.  # noqa: E501
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this VisitorLocationData.

        The country name of the visitor.  # noqa: E501

        :param country_name: The country_name of this VisitorLocationData.  # noqa: E501
        :type: str
        """

        self._country_name = country_name

    @property
    def postal_code(self):
        """Gets the postal_code of this VisitorLocationData.  # noqa: E501

        The postal code of the visitor.  # noqa: E501

        :return: The postal_code of this VisitorLocationData.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this VisitorLocationData.

        The postal code of the visitor.  # noqa: E501

        :param postal_code: The postal_code of this VisitorLocationData.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def region_name(self):
        """Gets the region_name of this VisitorLocationData.  # noqa: E501

        The region name of the visitor.  # noqa: E501

        :return: The region_name of this VisitorLocationData.  # noqa: E501
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name):
        """Sets the region_name of this VisitorLocationData.

        The region name of the visitor.  # noqa: E501

        :param region_name: The region_name of this VisitorLocationData.  # noqa: E501
        :type: str
        """

        self._region_name = region_name

    @property
    def timezone(self):
        """Gets the timezone of this VisitorLocationData.  # noqa: E501

        The timezone of the visitor.  # noqa: E501

        :return: The timezone of this VisitorLocationData.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this VisitorLocationData.

        The timezone of the visitor.  # noqa: E501

        :param timezone: The timezone of this VisitorLocationData.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VisitorLocationData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VisitorLocationData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
