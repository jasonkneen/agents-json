# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateOrUpdateCompanyRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'company_id': 'str',
        'plan': 'str',
        'size': 'int',
        'website': 'str',
        'industry': 'str',
        'custom_attributes': 'dict(str, str)',
        'remote_created_at': 'int',
        'monthly_spend': 'int'
    }

    attribute_map = {
        'name': 'name',
        'company_id': 'company_id',
        'plan': 'plan',
        'size': 'size',
        'website': 'website',
        'industry': 'industry',
        'custom_attributes': 'custom_attributes',
        'remote_created_at': 'remote_created_at',
        'monthly_spend': 'monthly_spend'
    }

    def __init__(self, name=None, company_id=None, plan=None, size=None, website=None, industry=None, custom_attributes=None, remote_created_at=None, monthly_spend=None):  # noqa: E501
        """CreateOrUpdateCompanyRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._company_id = None
        self._plan = None
        self._size = None
        self._website = None
        self._industry = None
        self._custom_attributes = None
        self._remote_created_at = None
        self._monthly_spend = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if company_id is not None:
            self.company_id = company_id
        if plan is not None:
            self.plan = plan
        if size is not None:
            self.size = size
        if website is not None:
            self.website = website
        if industry is not None:
            self.industry = industry
        if custom_attributes is not None:
            self.custom_attributes = custom_attributes
        if remote_created_at is not None:
            self.remote_created_at = remote_created_at
        if monthly_spend is not None:
            self.monthly_spend = monthly_spend

    @property
    def name(self):
        """Gets the name of this CreateOrUpdateCompanyRequest.  # noqa: E501

        The name of the Company  # noqa: E501

        :return: The name of this CreateOrUpdateCompanyRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateOrUpdateCompanyRequest.

        The name of the Company  # noqa: E501

        :param name: The name of this CreateOrUpdateCompanyRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def company_id(self):
        """Gets the company_id of this CreateOrUpdateCompanyRequest.  # noqa: E501

        The company id you have defined for the company. Can't be updated  # noqa: E501

        :return: The company_id of this CreateOrUpdateCompanyRequest.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this CreateOrUpdateCompanyRequest.

        The company id you have defined for the company. Can't be updated  # noqa: E501

        :param company_id: The company_id of this CreateOrUpdateCompanyRequest.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def plan(self):
        """Gets the plan of this CreateOrUpdateCompanyRequest.  # noqa: E501

        The name of the plan you have associated with the company.  # noqa: E501

        :return: The plan of this CreateOrUpdateCompanyRequest.  # noqa: E501
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this CreateOrUpdateCompanyRequest.

        The name of the plan you have associated with the company.  # noqa: E501

        :param plan: The plan of this CreateOrUpdateCompanyRequest.  # noqa: E501
        :type: str
        """

        self._plan = plan

    @property
    def size(self):
        """Gets the size of this CreateOrUpdateCompanyRequest.  # noqa: E501

        The number of employees in this company.  # noqa: E501

        :return: The size of this CreateOrUpdateCompanyRequest.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this CreateOrUpdateCompanyRequest.

        The number of employees in this company.  # noqa: E501

        :param size: The size of this CreateOrUpdateCompanyRequest.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def website(self):
        """Gets the website of this CreateOrUpdateCompanyRequest.  # noqa: E501

        The URL for this company's website. Please note that the value specified here is not validated. Accepts any string.  # noqa: E501

        :return: The website of this CreateOrUpdateCompanyRequest.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this CreateOrUpdateCompanyRequest.

        The URL for this company's website. Please note that the value specified here is not validated. Accepts any string.  # noqa: E501

        :param website: The website of this CreateOrUpdateCompanyRequest.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def industry(self):
        """Gets the industry of this CreateOrUpdateCompanyRequest.  # noqa: E501

        The industry that this company operates in.  # noqa: E501

        :return: The industry of this CreateOrUpdateCompanyRequest.  # noqa: E501
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this CreateOrUpdateCompanyRequest.

        The industry that this company operates in.  # noqa: E501

        :param industry: The industry of this CreateOrUpdateCompanyRequest.  # noqa: E501
        :type: str
        """

        self._industry = industry

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this CreateOrUpdateCompanyRequest.  # noqa: E501

        A hash of key/value pairs containing any other data about the company you want Intercom to store.  # noqa: E501

        :return: The custom_attributes of this CreateOrUpdateCompanyRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this CreateOrUpdateCompanyRequest.

        A hash of key/value pairs containing any other data about the company you want Intercom to store.  # noqa: E501

        :param custom_attributes: The custom_attributes of this CreateOrUpdateCompanyRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_attributes = custom_attributes

    @property
    def remote_created_at(self):
        """Gets the remote_created_at of this CreateOrUpdateCompanyRequest.  # noqa: E501

        The time the company was created by you.  # noqa: E501

        :return: The remote_created_at of this CreateOrUpdateCompanyRequest.  # noqa: E501
        :rtype: int
        """
        return self._remote_created_at

    @remote_created_at.setter
    def remote_created_at(self, remote_created_at):
        """Sets the remote_created_at of this CreateOrUpdateCompanyRequest.

        The time the company was created by you.  # noqa: E501

        :param remote_created_at: The remote_created_at of this CreateOrUpdateCompanyRequest.  # noqa: E501
        :type: int
        """

        self._remote_created_at = remote_created_at

    @property
    def monthly_spend(self):
        """Gets the monthly_spend of this CreateOrUpdateCompanyRequest.  # noqa: E501

        How much revenue the company generates for your business. Note that this will truncate floats. i.e. it only allow for whole integers, 155.98 will be truncated to 155. Note that this has an upper limit of 2**31-1 or 2147483647..  # noqa: E501

        :return: The monthly_spend of this CreateOrUpdateCompanyRequest.  # noqa: E501
        :rtype: int
        """
        return self._monthly_spend

    @monthly_spend.setter
    def monthly_spend(self, monthly_spend):
        """Sets the monthly_spend of this CreateOrUpdateCompanyRequest.

        How much revenue the company generates for your business. Note that this will truncate floats. i.e. it only allow for whole integers, 155.98 will be truncated to 155. Note that this has an upper limit of 2**31-1 or 2147483647..  # noqa: E501

        :param monthly_spend: The monthly_spend of this CreateOrUpdateCompanyRequest.  # noqa: E501
        :type: int
        """

        self._monthly_spend = monthly_spend

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateOrUpdateCompanyRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateOrUpdateCompanyRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
