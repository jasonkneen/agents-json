# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConversationContacts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'contacts': 'list[ContactReference]'
    }

    attribute_map = {
        'type': 'type',
        'contacts': 'contacts'
    }

    def __init__(self, type=None, contacts=None):  # noqa: E501
        """ConversationContacts - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._contacts = None
        self.discriminator = None
        self.type = type
        self.contacts = contacts

    @property
    def type(self):
        """Gets the type of this ConversationContacts.  # noqa: E501


        :return: The type of this ConversationContacts.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConversationContacts.


        :param type: The type of this ConversationContacts.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["contact.list"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def contacts(self):
        """Gets the contacts of this ConversationContacts.  # noqa: E501

        The list of contacts (users or leads) involved in this conversation. This will only contain one customer unless more were added via the group conversation feature.  # noqa: E501

        :return: The contacts of this ConversationContacts.  # noqa: E501
        :rtype: list[ContactReference]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this ConversationContacts.

        The list of contacts (users or leads) involved in this conversation. This will only contain one customer unless more were added via the group conversation feature.  # noqa: E501

        :param contacts: The contacts of this ConversationContacts.  # noqa: E501
        :type: list[ContactReference]
        """
        if contacts is None:
            raise ValueError("Invalid value for `contacts`, must not be `None`")  # noqa: E501

        self._contacts = contacts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversationContacts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationContacts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
