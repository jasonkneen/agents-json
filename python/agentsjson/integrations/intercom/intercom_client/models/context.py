# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Context(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conversation_id': 'int',
        'location': 'str',
        'locale': 'str',
        'messenger_action_colour': 'str',
        'messenger_background_colour': 'str',
        'referrer': 'str'
    }

    attribute_map = {
        'conversation_id': 'conversation_id',
        'location': 'location',
        'locale': 'locale',
        'messenger_action_colour': 'messenger_action_colour',
        'messenger_background_colour': 'messenger_background_colour',
        'referrer': 'referrer'
    }

    def __init__(self, conversation_id=None, location=None, locale=None, messenger_action_colour=None, messenger_background_colour=None, referrer=None):  # noqa: E501
        """Context - a model defined in Swagger"""  # noqa: E501
        self._conversation_id = None
        self._location = None
        self._locale = None
        self._messenger_action_colour = None
        self._messenger_background_colour = None
        self._referrer = None
        self.discriminator = None
        if conversation_id is not None:
            self.conversation_id = conversation_id
        if location is not None:
            self.location = location
        if locale is not None:
            self.locale = locale
        if messenger_action_colour is not None:
            self.messenger_action_colour = messenger_action_colour
        if messenger_background_colour is not None:
            self.messenger_background_colour = messenger_background_colour
        if referrer is not None:
            self.referrer = referrer

    @property
    def conversation_id(self):
        """Gets the conversation_id of this Context.  # noqa: E501

        The id of the conversation where the app is added or being used.  # noqa: E501

        :return: The conversation_id of this Context.  # noqa: E501
        :rtype: int
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id):
        """Sets the conversation_id of this Context.

        The id of the conversation where the app is added or being used.  # noqa: E501

        :param conversation_id: The conversation_id of this Context.  # noqa: E501
        :type: int
        """

        self._conversation_id = conversation_id

    @property
    def location(self):
        """Gets the location of this Context.  # noqa: E501

        Where the app is added or the action took place. Can be either 'conversation', 'home', 'message', or 'operator'.  # noqa: E501

        :return: The location of this Context.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Context.

        Where the app is added or the action took place. Can be either 'conversation', 'home', 'message', or 'operator'.  # noqa: E501

        :param location: The location of this Context.  # noqa: E501
        :type: str
        """
        allowed_values = ["conversation", "home", "message", "operator"]  # noqa: E501
        if location not in allowed_values:
            raise ValueError(
                "Invalid value for `location` ({0}), must be one of {1}"  # noqa: E501
                .format(location, allowed_values)
            )

        self._location = location

    @property
    def locale(self):
        """Gets the locale of this Context.  # noqa: E501

        The default end-user language of the Messenger. Use to localise Messenger App content.  # noqa: E501

        :return: The locale of this Context.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Context.

        The default end-user language of the Messenger. Use to localise Messenger App content.  # noqa: E501

        :param locale: The locale of this Context.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def messenger_action_colour(self):
        """Gets the messenger_action_colour of this Context.  # noqa: E501

        The messengers action colour. Use in Sheets and Icons to make a Messenger App experience feel part of the host Messenger.  # noqa: E501

        :return: The messenger_action_colour of this Context.  # noqa: E501
        :rtype: str
        """
        return self._messenger_action_colour

    @messenger_action_colour.setter
    def messenger_action_colour(self, messenger_action_colour):
        """Sets the messenger_action_colour of this Context.

        The messengers action colour. Use in Sheets and Icons to make a Messenger App experience feel part of the host Messenger.  # noqa: E501

        :param messenger_action_colour: The messenger_action_colour of this Context.  # noqa: E501
        :type: str
        """

        self._messenger_action_colour = messenger_action_colour

    @property
    def messenger_background_colour(self):
        """Gets the messenger_background_colour of this Context.  # noqa: E501

        The messengers background colour. Use in Sheets and Icons to make a Messenger App experience feel part of the host Messenger.  # noqa: E501

        :return: The messenger_background_colour of this Context.  # noqa: E501
        :rtype: str
        """
        return self._messenger_background_colour

    @messenger_background_colour.setter
    def messenger_background_colour(self, messenger_background_colour):
        """Sets the messenger_background_colour of this Context.

        The messengers background colour. Use in Sheets and Icons to make a Messenger App experience feel part of the host Messenger.  # noqa: E501

        :param messenger_background_colour: The messenger_background_colour of this Context.  # noqa: E501
        :type: str
        """

        self._messenger_background_colour = messenger_background_colour

    @property
    def referrer(self):
        """Gets the referrer of this Context.  # noqa: E501

        The current page URL where the app is being used.  # noqa: E501

        :return: The referrer of this Context.  # noqa: E501
        :rtype: str
        """
        return self._referrer

    @referrer.setter
    def referrer(self, referrer):
        """Sets the referrer of this Context.

        The current page URL where the app is being used.  # noqa: E501

        :param referrer: The referrer of this Context.  # noqa: E501
        :type: str
        """

        self._referrer = referrer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Context, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Context):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
