# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataAttribute(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'int',
        'model': 'str',
        'name': 'str',
        'full_name': 'str',
        'label': 'str',
        'description': 'str',
        'data_type': 'str',
        'options': 'list[str]',
        'api_writable': 'bool',
        'messenger_writable': 'bool',
        'ui_writable': 'bool',
        'custom': 'bool',
        'archived': 'bool',
        'created_at': 'int',
        'updated_at': 'int',
        'admin_id': 'str'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'model': 'model',
        'name': 'name',
        'full_name': 'full_name',
        'label': 'label',
        'description': 'description',
        'data_type': 'data_type',
        'options': 'options',
        'api_writable': 'api_writable',
        'messenger_writable': 'messenger_writable',
        'ui_writable': 'ui_writable',
        'custom': 'custom',
        'archived': 'archived',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'admin_id': 'admin_id'
    }

    def __init__(self, type=None, id=None, model=None, name=None, full_name=None, label=None, description=None, data_type=None, options=None, api_writable=None, messenger_writable=None, ui_writable=None, custom=None, archived=None, created_at=None, updated_at=None, admin_id=None):  # noqa: E501
        """DataAttribute - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self._model = None
        self._name = None
        self._full_name = None
        self._label = None
        self._description = None
        self._data_type = None
        self._options = None
        self._api_writable = None
        self._messenger_writable = None
        self._ui_writable = None
        self._custom = None
        self._archived = None
        self._created_at = None
        self._updated_at = None
        self._admin_id = None
        self.discriminator = None
        self.type = type
        if id is not None:
            self.id = id
        if model is not None:
            self.model = model
        self.name = name
        self.full_name = full_name
        self.label = label
        self.description = description
        self.data_type = data_type
        if options is not None:
            self.options = options
        if api_writable is not None:
            self.api_writable = api_writable
        if messenger_writable is not None:
            self.messenger_writable = messenger_writable
        if ui_writable is not None:
            self.ui_writable = ui_writable
        if custom is not None:
            self.custom = custom
        if archived is not None:
            self.archived = archived
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if admin_id is not None:
            self.admin_id = admin_id

    @property
    def type(self):
        """Gets the type of this DataAttribute.  # noqa: E501

        Value is `data_attribute`.  # noqa: E501

        :return: The type of this DataAttribute.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataAttribute.

        Value is `data_attribute`.  # noqa: E501

        :param type: The type of this DataAttribute.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["data_attribute"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this DataAttribute.  # noqa: E501

        The unique identifier for the data attribute which is given by Intercom. Only available for custom attributes.  # noqa: E501

        :return: The id of this DataAttribute.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataAttribute.

        The unique identifier for the data attribute which is given by Intercom. Only available for custom attributes.  # noqa: E501

        :param id: The id of this DataAttribute.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def model(self):
        """Gets the model of this DataAttribute.  # noqa: E501

        Value is `contact` for user/lead attributes and `company` for company attributes.  # noqa: E501

        :return: The model of this DataAttribute.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DataAttribute.

        Value is `contact` for user/lead attributes and `company` for company attributes.  # noqa: E501

        :param model: The model of this DataAttribute.  # noqa: E501
        :type: str
        """
        allowed_values = ["contact", "company"]  # noqa: E501
        if model not in allowed_values:
            raise ValueError(
                "Invalid value for `model` ({0}), must be one of {1}"  # noqa: E501
                .format(model, allowed_values)
            )

        self._model = model

    @property
    def name(self):
        """Gets the name of this DataAttribute.  # noqa: E501

        Name of the attribute.  # noqa: E501

        :return: The name of this DataAttribute.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataAttribute.

        Name of the attribute.  # noqa: E501

        :param name: The name of this DataAttribute.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def full_name(self):
        """Gets the full_name of this DataAttribute.  # noqa: E501

        Full name of the attribute. Should match the name unless it's a nested attribute. We can split full_name on `.` to access nested user object values.  # noqa: E501

        :return: The full_name of this DataAttribute.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this DataAttribute.

        Full name of the attribute. Should match the name unless it's a nested attribute. We can split full_name on `.` to access nested user object values.  # noqa: E501

        :param full_name: The full_name of this DataAttribute.  # noqa: E501
        :type: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")  # noqa: E501

        self._full_name = full_name

    @property
    def label(self):
        """Gets the label of this DataAttribute.  # noqa: E501

        Readable name of the attribute (i.e. name you see in the UI)  # noqa: E501

        :return: The label of this DataAttribute.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this DataAttribute.

        Readable name of the attribute (i.e. name you see in the UI)  # noqa: E501

        :param label: The label of this DataAttribute.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def description(self):
        """Gets the description of this DataAttribute.  # noqa: E501

        Readable description of the attribute.  # noqa: E501

        :return: The description of this DataAttribute.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataAttribute.

        Readable description of the attribute.  # noqa: E501

        :param description: The description of this DataAttribute.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def data_type(self):
        """Gets the data_type of this DataAttribute.  # noqa: E501

        The data type of the attribute.  # noqa: E501

        :return: The data_type of this DataAttribute.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this DataAttribute.

        The data type of the attribute.  # noqa: E501

        :param data_type: The data_type of this DataAttribute.  # noqa: E501
        :type: str
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")  # noqa: E501
        allowed_values = ["string", "integer", "float", "boolean", "date"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"  # noqa: E501
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def options(self):
        """Gets the options of this DataAttribute.  # noqa: E501

        List of predefined options for attribute value.  # noqa: E501

        :return: The options of this DataAttribute.  # noqa: E501
        :rtype: list[str]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this DataAttribute.

        List of predefined options for attribute value.  # noqa: E501

        :param options: The options of this DataAttribute.  # noqa: E501
        :type: list[str]
        """

        self._options = options

    @property
    def api_writable(self):
        """Gets the api_writable of this DataAttribute.  # noqa: E501

        Can this attribute be updated through API  # noqa: E501

        :return: The api_writable of this DataAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._api_writable

    @api_writable.setter
    def api_writable(self, api_writable):
        """Sets the api_writable of this DataAttribute.

        Can this attribute be updated through API  # noqa: E501

        :param api_writable: The api_writable of this DataAttribute.  # noqa: E501
        :type: bool
        """

        self._api_writable = api_writable

    @property
    def messenger_writable(self):
        """Gets the messenger_writable of this DataAttribute.  # noqa: E501

        Can this attribute be updated by the Messenger  # noqa: E501

        :return: The messenger_writable of this DataAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._messenger_writable

    @messenger_writable.setter
    def messenger_writable(self, messenger_writable):
        """Sets the messenger_writable of this DataAttribute.

        Can this attribute be updated by the Messenger  # noqa: E501

        :param messenger_writable: The messenger_writable of this DataAttribute.  # noqa: E501
        :type: bool
        """

        self._messenger_writable = messenger_writable

    @property
    def ui_writable(self):
        """Gets the ui_writable of this DataAttribute.  # noqa: E501

        Can this attribute be updated in the UI  # noqa: E501

        :return: The ui_writable of this DataAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._ui_writable

    @ui_writable.setter
    def ui_writable(self, ui_writable):
        """Sets the ui_writable of this DataAttribute.

        Can this attribute be updated in the UI  # noqa: E501

        :param ui_writable: The ui_writable of this DataAttribute.  # noqa: E501
        :type: bool
        """

        self._ui_writable = ui_writable

    @property
    def custom(self):
        """Gets the custom of this DataAttribute.  # noqa: E501

        Set to true if this is a CDA  # noqa: E501

        :return: The custom of this DataAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this DataAttribute.

        Set to true if this is a CDA  # noqa: E501

        :param custom: The custom of this DataAttribute.  # noqa: E501
        :type: bool
        """

        self._custom = custom

    @property
    def archived(self):
        """Gets the archived of this DataAttribute.  # noqa: E501

        Is this attribute archived. (Only applicable to CDAs)  # noqa: E501

        :return: The archived of this DataAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this DataAttribute.

        Is this attribute archived. (Only applicable to CDAs)  # noqa: E501

        :param archived: The archived of this DataAttribute.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def created_at(self):
        """Gets the created_at of this DataAttribute.  # noqa: E501

        The time the attribute was created as a UTC Unix timestamp  # noqa: E501

        :return: The created_at of this DataAttribute.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DataAttribute.

        The time the attribute was created as a UTC Unix timestamp  # noqa: E501

        :param created_at: The created_at of this DataAttribute.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this DataAttribute.  # noqa: E501

        The time the attribute was last updated as a UTC Unix timestamp  # noqa: E501

        :return: The updated_at of this DataAttribute.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DataAttribute.

        The time the attribute was last updated as a UTC Unix timestamp  # noqa: E501

        :param updated_at: The updated_at of this DataAttribute.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    @property
    def admin_id(self):
        """Gets the admin_id of this DataAttribute.  # noqa: E501

        Teammate who created the attribute. Only applicable to CDAs  # noqa: E501

        :return: The admin_id of this DataAttribute.  # noqa: E501
        :rtype: str
        """
        return self._admin_id

    @admin_id.setter
    def admin_id(self, admin_id):
        """Sets the admin_id of this DataAttribute.

        Teammate who created the attribute. Only applicable to CDAs  # noqa: E501

        :param admin_id: The admin_id of this DataAttribute.  # noqa: E501
        :type: str
        """

        self._admin_id = admin_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataAttribute, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataAttribute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
