# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Ticket(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'ticket_id': 'str',
        'category': 'str',
        'ticket_attributes': 'TicketCustomAttributes',
        'ticket_state': 'str',
        'ticket_type': 'TicketType',
        'contacts': 'TicketContacts',
        'admin_assignee_id': 'str',
        'team_assignee_id': 'str',
        'created_at': 'int',
        'updated_at': 'int',
        'open': 'bool',
        'snoozed_until': 'int',
        'linked_objects': 'LinkedObjectList',
        'ticket_parts': 'TicketParts',
        'is_shared': 'bool',
        'ticket_state_internal_label': 'str',
        'ticket_state_external_label': 'str'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'ticket_id': 'ticket_id',
        'category': 'category',
        'ticket_attributes': 'ticket_attributes',
        'ticket_state': 'ticket_state',
        'ticket_type': 'ticket_type',
        'contacts': 'contacts',
        'admin_assignee_id': 'admin_assignee_id',
        'team_assignee_id': 'team_assignee_id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'open': 'open',
        'snoozed_until': 'snoozed_until',
        'linked_objects': 'linked_objects',
        'ticket_parts': 'ticket_parts',
        'is_shared': 'is_shared',
        'ticket_state_internal_label': 'ticket_state_internal_label',
        'ticket_state_external_label': 'ticket_state_external_label'
    }

    def __init__(self, type='ticket', id=None, ticket_id=None, category=None, ticket_attributes=None, ticket_state=None, ticket_type=None, contacts=None, admin_assignee_id=None, team_assignee_id=None, created_at=None, updated_at=None, open=None, snoozed_until=None, linked_objects=None, ticket_parts=None, is_shared=None, ticket_state_internal_label=None, ticket_state_external_label=None):  # noqa: E501
        """Ticket - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self._ticket_id = None
        self._category = None
        self._ticket_attributes = None
        self._ticket_state = None
        self._ticket_type = None
        self._contacts = None
        self._admin_assignee_id = None
        self._team_assignee_id = None
        self._created_at = None
        self._updated_at = None
        self._open = None
        self._snoozed_until = None
        self._linked_objects = None
        self._ticket_parts = None
        self._is_shared = None
        self._ticket_state_internal_label = None
        self._ticket_state_external_label = None
        self.discriminator = None
        self.type = type
        self.id = id
        self.ticket_id = ticket_id
        self.category = category
        self.ticket_attributes = ticket_attributes
        self.ticket_state = ticket_state
        self.ticket_type = ticket_type
        self.contacts = contacts
        if admin_assignee_id is not None:
            self.admin_assignee_id = admin_assignee_id
        if team_assignee_id is not None:
            self.team_assignee_id = team_assignee_id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if open is not None:
            self.open = open
        if snoozed_until is not None:
            self.snoozed_until = snoozed_until
        if linked_objects is not None:
            self.linked_objects = linked_objects
        if ticket_parts is not None:
            self.ticket_parts = ticket_parts
        if is_shared is not None:
            self.is_shared = is_shared
        if ticket_state_internal_label is not None:
            self.ticket_state_internal_label = ticket_state_internal_label
        if ticket_state_external_label is not None:
            self.ticket_state_external_label = ticket_state_external_label

    @property
    def type(self):
        """Gets the type of this Ticket.  # noqa: E501

        Always ticket  # noqa: E501

        :return: The type of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Ticket.

        Always ticket  # noqa: E501

        :param type: The type of this Ticket.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["ticket"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this Ticket.  # noqa: E501

        The unique identifier for the ticket which is given by Intercom.  # noqa: E501

        :return: The id of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Ticket.

        The unique identifier for the ticket which is given by Intercom.  # noqa: E501

        :param id: The id of this Ticket.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def ticket_id(self):
        """Gets the ticket_id of this Ticket.  # noqa: E501

        The ID of the Ticket used in the Intercom Inbox and Messenger. Do not use ticket_id for API queries.  # noqa: E501

        :return: The ticket_id of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """Sets the ticket_id of this Ticket.

        The ID of the Ticket used in the Intercom Inbox and Messenger. Do not use ticket_id for API queries.  # noqa: E501

        :param ticket_id: The ticket_id of this Ticket.  # noqa: E501
        :type: str
        """
        if ticket_id is None:
            raise ValueError("Invalid value for `ticket_id`, must not be `None`")  # noqa: E501

        self._ticket_id = ticket_id

    @property
    def category(self):
        """Gets the category of this Ticket.  # noqa: E501

        Category of the Ticket.  # noqa: E501

        :return: The category of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Ticket.

        Category of the Ticket.  # noqa: E501

        :param category: The category of this Ticket.  # noqa: E501
        :type: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501
        allowed_values = ["Customer", "Back-office", "Tracker"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def ticket_attributes(self):
        """Gets the ticket_attributes of this Ticket.  # noqa: E501


        :return: The ticket_attributes of this Ticket.  # noqa: E501
        :rtype: TicketCustomAttributes
        """
        return self._ticket_attributes

    @ticket_attributes.setter
    def ticket_attributes(self, ticket_attributes):
        """Sets the ticket_attributes of this Ticket.


        :param ticket_attributes: The ticket_attributes of this Ticket.  # noqa: E501
        :type: TicketCustomAttributes
        """
        if ticket_attributes is None:
            raise ValueError("Invalid value for `ticket_attributes`, must not be `None`")  # noqa: E501

        self._ticket_attributes = ticket_attributes

    @property
    def ticket_state(self):
        """Gets the ticket_state of this Ticket.  # noqa: E501

        The state the ticket is currently in  # noqa: E501

        :return: The ticket_state of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._ticket_state

    @ticket_state.setter
    def ticket_state(self, ticket_state):
        """Sets the ticket_state of this Ticket.

        The state the ticket is currently in  # noqa: E501

        :param ticket_state: The ticket_state of this Ticket.  # noqa: E501
        :type: str
        """
        if ticket_state is None:
            raise ValueError("Invalid value for `ticket_state`, must not be `None`")  # noqa: E501
        allowed_values = ["submitted", "in_progress", "waiting_on_customer", "resolved"]  # noqa: E501
        if ticket_state not in allowed_values:
            raise ValueError(
                "Invalid value for `ticket_state` ({0}), must be one of {1}"  # noqa: E501
                .format(ticket_state, allowed_values)
            )

        self._ticket_state = ticket_state

    @property
    def ticket_type(self):
        """Gets the ticket_type of this Ticket.  # noqa: E501


        :return: The ticket_type of this Ticket.  # noqa: E501
        :rtype: TicketType
        """
        return self._ticket_type

    @ticket_type.setter
    def ticket_type(self, ticket_type):
        """Sets the ticket_type of this Ticket.


        :param ticket_type: The ticket_type of this Ticket.  # noqa: E501
        :type: TicketType
        """
        if ticket_type is None:
            raise ValueError("Invalid value for `ticket_type`, must not be `None`")  # noqa: E501

        self._ticket_type = ticket_type

    @property
    def contacts(self):
        """Gets the contacts of this Ticket.  # noqa: E501


        :return: The contacts of this Ticket.  # noqa: E501
        :rtype: TicketContacts
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this Ticket.


        :param contacts: The contacts of this Ticket.  # noqa: E501
        :type: TicketContacts
        """
        if contacts is None:
            raise ValueError("Invalid value for `contacts`, must not be `None`")  # noqa: E501

        self._contacts = contacts

    @property
    def admin_assignee_id(self):
        """Gets the admin_assignee_id of this Ticket.  # noqa: E501

        The id representing the admin assigned to the ticket.  # noqa: E501

        :return: The admin_assignee_id of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._admin_assignee_id

    @admin_assignee_id.setter
    def admin_assignee_id(self, admin_assignee_id):
        """Sets the admin_assignee_id of this Ticket.

        The id representing the admin assigned to the ticket.  # noqa: E501

        :param admin_assignee_id: The admin_assignee_id of this Ticket.  # noqa: E501
        :type: str
        """

        self._admin_assignee_id = admin_assignee_id

    @property
    def team_assignee_id(self):
        """Gets the team_assignee_id of this Ticket.  # noqa: E501

        The id representing the team assigned to the ticket.  # noqa: E501

        :return: The team_assignee_id of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._team_assignee_id

    @team_assignee_id.setter
    def team_assignee_id(self, team_assignee_id):
        """Sets the team_assignee_id of this Ticket.

        The id representing the team assigned to the ticket.  # noqa: E501

        :param team_assignee_id: The team_assignee_id of this Ticket.  # noqa: E501
        :type: str
        """

        self._team_assignee_id = team_assignee_id

    @property
    def created_at(self):
        """Gets the created_at of this Ticket.  # noqa: E501

        The time the ticket was created as a UTC Unix timestamp.  # noqa: E501

        :return: The created_at of this Ticket.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Ticket.

        The time the ticket was created as a UTC Unix timestamp.  # noqa: E501

        :param created_at: The created_at of this Ticket.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Ticket.  # noqa: E501

        The last time the ticket was updated as a UTC Unix timestamp.  # noqa: E501

        :return: The updated_at of this Ticket.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Ticket.

        The last time the ticket was updated as a UTC Unix timestamp.  # noqa: E501

        :param updated_at: The updated_at of this Ticket.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    @property
    def open(self):
        """Gets the open of this Ticket.  # noqa: E501

        Whether or not the ticket is open. If false, the ticket is closed.  # noqa: E501

        :return: The open of this Ticket.  # noqa: E501
        :rtype: bool
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this Ticket.

        Whether or not the ticket is open. If false, the ticket is closed.  # noqa: E501

        :param open: The open of this Ticket.  # noqa: E501
        :type: bool
        """

        self._open = open

    @property
    def snoozed_until(self):
        """Gets the snoozed_until of this Ticket.  # noqa: E501

        The time the ticket will be snoozed until as a UTC Unix timestamp. If null, the ticket is not currently snoozed.  # noqa: E501

        :return: The snoozed_until of this Ticket.  # noqa: E501
        :rtype: int
        """
        return self._snoozed_until

    @snoozed_until.setter
    def snoozed_until(self, snoozed_until):
        """Sets the snoozed_until of this Ticket.

        The time the ticket will be snoozed until as a UTC Unix timestamp. If null, the ticket is not currently snoozed.  # noqa: E501

        :param snoozed_until: The snoozed_until of this Ticket.  # noqa: E501
        :type: int
        """

        self._snoozed_until = snoozed_until

    @property
    def linked_objects(self):
        """Gets the linked_objects of this Ticket.  # noqa: E501


        :return: The linked_objects of this Ticket.  # noqa: E501
        :rtype: LinkedObjectList
        """
        return self._linked_objects

    @linked_objects.setter
    def linked_objects(self, linked_objects):
        """Sets the linked_objects of this Ticket.


        :param linked_objects: The linked_objects of this Ticket.  # noqa: E501
        :type: LinkedObjectList
        """

        self._linked_objects = linked_objects

    @property
    def ticket_parts(self):
        """Gets the ticket_parts of this Ticket.  # noqa: E501


        :return: The ticket_parts of this Ticket.  # noqa: E501
        :rtype: TicketParts
        """
        return self._ticket_parts

    @ticket_parts.setter
    def ticket_parts(self, ticket_parts):
        """Sets the ticket_parts of this Ticket.


        :param ticket_parts: The ticket_parts of this Ticket.  # noqa: E501
        :type: TicketParts
        """

        self._ticket_parts = ticket_parts

    @property
    def is_shared(self):
        """Gets the is_shared of this Ticket.  # noqa: E501

        Whether or not the ticket is shared with the customer.  # noqa: E501

        :return: The is_shared of this Ticket.  # noqa: E501
        :rtype: bool
        """
        return self._is_shared

    @is_shared.setter
    def is_shared(self, is_shared):
        """Sets the is_shared of this Ticket.

        Whether or not the ticket is shared with the customer.  # noqa: E501

        :param is_shared: The is_shared of this Ticket.  # noqa: E501
        :type: bool
        """

        self._is_shared = is_shared

    @property
    def ticket_state_internal_label(self):
        """Gets the ticket_state_internal_label of this Ticket.  # noqa: E501

        The state the ticket is currently in, in a human readable form - visible in Intercom  # noqa: E501

        :return: The ticket_state_internal_label of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._ticket_state_internal_label

    @ticket_state_internal_label.setter
    def ticket_state_internal_label(self, ticket_state_internal_label):
        """Sets the ticket_state_internal_label of this Ticket.

        The state the ticket is currently in, in a human readable form - visible in Intercom  # noqa: E501

        :param ticket_state_internal_label: The ticket_state_internal_label of this Ticket.  # noqa: E501
        :type: str
        """

        self._ticket_state_internal_label = ticket_state_internal_label

    @property
    def ticket_state_external_label(self):
        """Gets the ticket_state_external_label of this Ticket.  # noqa: E501

        The state the ticket is currently in, in a human readable form - visible to customers, in the messenger, email and tickets portal.  # noqa: E501

        :return: The ticket_state_external_label of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._ticket_state_external_label

    @ticket_state_external_label.setter
    def ticket_state_external_label(self, ticket_state_external_label):
        """Sets the ticket_state_external_label of this Ticket.

        The state the ticket is currently in, in a human readable form - visible to customers, in the messenger, email and tickets portal.  # noqa: E501

        :param ticket_state_external_label: The ticket_state_external_label of this Ticket.  # noqa: E501
        :type: str
        """

        self._ticket_state_external_label = ticket_state_external_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Ticket, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ticket):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
