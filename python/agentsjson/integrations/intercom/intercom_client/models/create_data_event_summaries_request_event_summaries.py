# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateDataEventSummariesRequestEventSummaries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_name': 'str',
        'count': 'int',
        'first': 'int',
        'last': 'int'
    }

    attribute_map = {
        'event_name': 'event_name',
        'count': 'count',
        'first': 'first',
        'last': 'last'
    }

    def __init__(self, event_name=None, count=None, first=None, last=None):  # noqa: E501
        """CreateDataEventSummariesRequestEventSummaries - a model defined in Swagger"""  # noqa: E501
        self._event_name = None
        self._count = None
        self._first = None
        self._last = None
        self.discriminator = None
        if event_name is not None:
            self.event_name = event_name
        if count is not None:
            self.count = count
        if first is not None:
            self.first = first
        if last is not None:
            self.last = last

    @property
    def event_name(self):
        """Gets the event_name of this CreateDataEventSummariesRequestEventSummaries.  # noqa: E501

        The name of the event that occurred. A good event name is typically a past tense 'verb-noun' combination, to improve readability, for example `updated-plan`.  # noqa: E501

        :return: The event_name of this CreateDataEventSummariesRequestEventSummaries.  # noqa: E501
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this CreateDataEventSummariesRequestEventSummaries.

        The name of the event that occurred. A good event name is typically a past tense 'verb-noun' combination, to improve readability, for example `updated-plan`.  # noqa: E501

        :param event_name: The event_name of this CreateDataEventSummariesRequestEventSummaries.  # noqa: E501
        :type: str
        """

        self._event_name = event_name

    @property
    def count(self):
        """Gets the count of this CreateDataEventSummariesRequestEventSummaries.  # noqa: E501

        The number of times the event occurred.  # noqa: E501

        :return: The count of this CreateDataEventSummariesRequestEventSummaries.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this CreateDataEventSummariesRequestEventSummaries.

        The number of times the event occurred.  # noqa: E501

        :param count: The count of this CreateDataEventSummariesRequestEventSummaries.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def first(self):
        """Gets the first of this CreateDataEventSummariesRequestEventSummaries.  # noqa: E501

        The first time the event was sent  # noqa: E501

        :return: The first of this CreateDataEventSummariesRequestEventSummaries.  # noqa: E501
        :rtype: int
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this CreateDataEventSummariesRequestEventSummaries.

        The first time the event was sent  # noqa: E501

        :param first: The first of this CreateDataEventSummariesRequestEventSummaries.  # noqa: E501
        :type: int
        """

        self._first = first

    @property
    def last(self):
        """Gets the last of this CreateDataEventSummariesRequestEventSummaries.  # noqa: E501

        The last time the event was sent  # noqa: E501

        :return: The last of this CreateDataEventSummariesRequestEventSummaries.  # noqa: E501
        :rtype: int
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this CreateDataEventSummariesRequestEventSummaries.

        The last time the event was sent  # noqa: E501

        :param last: The last of this CreateDataEventSummariesRequestEventSummaries.  # noqa: E501
        :type: int
        """

        self._last = last

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateDataEventSummariesRequestEventSummaries, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateDataEventSummariesRequestEventSummaries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
