# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataEventSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'email': 'str',
        'intercom_user_id': 'str',
        'user_id': 'str',
        'events': 'list[DataEventSummaryItem]'
    }

    attribute_map = {
        'type': 'type',
        'email': 'email',
        'intercom_user_id': 'intercom_user_id',
        'user_id': 'user_id',
        'events': 'events'
    }

    def __init__(self, type=None, email=None, intercom_user_id=None, user_id=None, events=None):  # noqa: E501
        """DataEventSummary - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._email = None
        self._intercom_user_id = None
        self._user_id = None
        self._events = None
        self.discriminator = None
        self.type = type
        self.email = email
        self.intercom_user_id = intercom_user_id
        self.user_id = user_id
        self.events = events

    @property
    def type(self):
        """Gets the type of this DataEventSummary.  # noqa: E501

        The type of the object  # noqa: E501

        :return: The type of this DataEventSummary.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataEventSummary.

        The type of the object  # noqa: E501

        :param type: The type of this DataEventSummary.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["event.summary"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def email(self):
        """Gets the email of this DataEventSummary.  # noqa: E501

        The email address of the user  # noqa: E501

        :return: The email of this DataEventSummary.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this DataEventSummary.

        The email address of the user  # noqa: E501

        :param email: The email of this DataEventSummary.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def intercom_user_id(self):
        """Gets the intercom_user_id of this DataEventSummary.  # noqa: E501

        The Intercom user ID of the user  # noqa: E501

        :return: The intercom_user_id of this DataEventSummary.  # noqa: E501
        :rtype: str
        """
        return self._intercom_user_id

    @intercom_user_id.setter
    def intercom_user_id(self, intercom_user_id):
        """Sets the intercom_user_id of this DataEventSummary.

        The Intercom user ID of the user  # noqa: E501

        :param intercom_user_id: The intercom_user_id of this DataEventSummary.  # noqa: E501
        :type: str
        """
        if intercom_user_id is None:
            raise ValueError("Invalid value for `intercom_user_id`, must not be `None`")  # noqa: E501

        self._intercom_user_id = intercom_user_id

    @property
    def user_id(self):
        """Gets the user_id of this DataEventSummary.  # noqa: E501

        The user ID of the user  # noqa: E501

        :return: The user_id of this DataEventSummary.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DataEventSummary.

        The user ID of the user  # noqa: E501

        :param user_id: The user_id of this DataEventSummary.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def events(self):
        """Gets the events of this DataEventSummary.  # noqa: E501

        A summary of data events  # noqa: E501

        :return: The events of this DataEventSummary.  # noqa: E501
        :rtype: list[DataEventSummaryItem]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this DataEventSummary.

        A summary of data events  # noqa: E501

        :param events: The events of this DataEventSummary.  # noqa: E501
        :type: list[DataEventSummaryItem]
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")  # noqa: E501

        self._events = events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataEventSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataEventSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
