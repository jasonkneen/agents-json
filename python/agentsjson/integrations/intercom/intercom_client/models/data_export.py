# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataExport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_identifier': 'str',
        'status': 'str',
        'download_expires_at': 'str',
        'download_url': 'str'
    }

    attribute_map = {
        'job_identifier': 'job_identifier',
        'status': 'status',
        'download_expires_at': 'download_expires_at',
        'download_url': 'download_url'
    }

    def __init__(self, job_identifier=None, status=None, download_expires_at=None, download_url=None):  # noqa: E501
        """DataExport - a model defined in Swagger"""  # noqa: E501
        self._job_identifier = None
        self._status = None
        self._download_expires_at = None
        self._download_url = None
        self.discriminator = None
        self.job_identifier = job_identifier
        self.status = status
        self.download_expires_at = download_expires_at
        self.download_url = download_url

    @property
    def job_identifier(self):
        """Gets the job_identifier of this DataExport.  # noqa: E501

        The identifier for your job.  # noqa: E501

        :return: The job_identifier of this DataExport.  # noqa: E501
        :rtype: str
        """
        return self._job_identifier

    @job_identifier.setter
    def job_identifier(self, job_identifier):
        """Sets the job_identifier of this DataExport.

        The identifier for your job.  # noqa: E501

        :param job_identifier: The job_identifier of this DataExport.  # noqa: E501
        :type: str
        """
        if job_identifier is None:
            raise ValueError("Invalid value for `job_identifier`, must not be `None`")  # noqa: E501

        self._job_identifier = job_identifier

    @property
    def status(self):
        """Gets the status of this DataExport.  # noqa: E501

        The current state of your job.  # noqa: E501

        :return: The status of this DataExport.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DataExport.

        The current state of your job.  # noqa: E501

        :param status: The status of this DataExport.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["pending", "in_progress", "failed", "completed", "no_data", "canceled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def download_expires_at(self):
        """Gets the download_expires_at of this DataExport.  # noqa: E501

        The time after which you will not be able to access the data.  # noqa: E501

        :return: The download_expires_at of this DataExport.  # noqa: E501
        :rtype: str
        """
        return self._download_expires_at

    @download_expires_at.setter
    def download_expires_at(self, download_expires_at):
        """Sets the download_expires_at of this DataExport.

        The time after which you will not be able to access the data.  # noqa: E501

        :param download_expires_at: The download_expires_at of this DataExport.  # noqa: E501
        :type: str
        """
        if download_expires_at is None:
            raise ValueError("Invalid value for `download_expires_at`, must not be `None`")  # noqa: E501

        self._download_expires_at = download_expires_at

    @property
    def download_url(self):
        """Gets the download_url of this DataExport.  # noqa: E501

        The location where you can download your data.  # noqa: E501

        :return: The download_url of this DataExport.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this DataExport.

        The location where you can download your data.  # noqa: E501

        :param download_url: The download_url of this DataExport.  # noqa: E501
        :type: str
        """
        if download_url is None:
            raise ValueError("Invalid value for `download_url`, must not be `None`")  # noqa: E501

        self._download_url = download_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataExport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataExport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
