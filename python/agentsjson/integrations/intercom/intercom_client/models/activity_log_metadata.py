# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActivityLogMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sign_in_method': 'str',
        'external_id': 'str',
        'away_mode': 'bool',
        'away_status_reason': 'str',
        'reassign_conversations': 'bool',
        'source': 'str',
        'auto_changed': 'str',
        'update_by': 'int',
        'update_by_name': 'str'
    }

    attribute_map = {
        'sign_in_method': 'sign_in_method',
        'external_id': 'external_id',
        'away_mode': 'away_mode',
        'away_status_reason': 'away_status_reason',
        'reassign_conversations': 'reassign_conversations',
        'source': 'source',
        'auto_changed': 'auto_changed',
        'update_by': 'update_by',
        'update_by_name': 'update_by_name'
    }

    def __init__(self, sign_in_method=None, external_id=None, away_mode=None, away_status_reason=None, reassign_conversations=None, source=None, auto_changed=None, update_by=None, update_by_name=None):  # noqa: E501
        """ActivityLogMetadata - a model defined in Swagger"""  # noqa: E501
        self._sign_in_method = None
        self._external_id = None
        self._away_mode = None
        self._away_status_reason = None
        self._reassign_conversations = None
        self._source = None
        self._auto_changed = None
        self._update_by = None
        self._update_by_name = None
        self.discriminator = None
        if sign_in_method is not None:
            self.sign_in_method = sign_in_method
        if external_id is not None:
            self.external_id = external_id
        if away_mode is not None:
            self.away_mode = away_mode
        if away_status_reason is not None:
            self.away_status_reason = away_status_reason
        if reassign_conversations is not None:
            self.reassign_conversations = reassign_conversations
        if source is not None:
            self.source = source
        if auto_changed is not None:
            self.auto_changed = auto_changed
        if update_by is not None:
            self.update_by = update_by
        if update_by_name is not None:
            self.update_by_name = update_by_name

    @property
    def sign_in_method(self):
        """Gets the sign_in_method of this ActivityLogMetadata.  # noqa: E501

        The way the admin signed in.  # noqa: E501

        :return: The sign_in_method of this ActivityLogMetadata.  # noqa: E501
        :rtype: str
        """
        return self._sign_in_method

    @sign_in_method.setter
    def sign_in_method(self, sign_in_method):
        """Sets the sign_in_method of this ActivityLogMetadata.

        The way the admin signed in.  # noqa: E501

        :param sign_in_method: The sign_in_method of this ActivityLogMetadata.  # noqa: E501
        :type: str
        """

        self._sign_in_method = sign_in_method

    @property
    def external_id(self):
        """Gets the external_id of this ActivityLogMetadata.  # noqa: E501

        The unique identifier for the contact which is provided by the Client.  # noqa: E501

        :return: The external_id of this ActivityLogMetadata.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this ActivityLogMetadata.

        The unique identifier for the contact which is provided by the Client.  # noqa: E501

        :param external_id: The external_id of this ActivityLogMetadata.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def away_mode(self):
        """Gets the away_mode of this ActivityLogMetadata.  # noqa: E501

        The away mode status which is set to true when away and false when returned.  # noqa: E501

        :return: The away_mode of this ActivityLogMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._away_mode

    @away_mode.setter
    def away_mode(self, away_mode):
        """Sets the away_mode of this ActivityLogMetadata.

        The away mode status which is set to true when away and false when returned.  # noqa: E501

        :param away_mode: The away_mode of this ActivityLogMetadata.  # noqa: E501
        :type: bool
        """

        self._away_mode = away_mode

    @property
    def away_status_reason(self):
        """Gets the away_status_reason of this ActivityLogMetadata.  # noqa: E501

        The reason the Admin is away.  # noqa: E501

        :return: The away_status_reason of this ActivityLogMetadata.  # noqa: E501
        :rtype: str
        """
        return self._away_status_reason

    @away_status_reason.setter
    def away_status_reason(self, away_status_reason):
        """Sets the away_status_reason of this ActivityLogMetadata.

        The reason the Admin is away.  # noqa: E501

        :param away_status_reason: The away_status_reason of this ActivityLogMetadata.  # noqa: E501
        :type: str
        """

        self._away_status_reason = away_status_reason

    @property
    def reassign_conversations(self):
        """Gets the reassign_conversations of this ActivityLogMetadata.  # noqa: E501

        Indicates if conversations should be reassigned while an Admin is away.  # noqa: E501

        :return: The reassign_conversations of this ActivityLogMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._reassign_conversations

    @reassign_conversations.setter
    def reassign_conversations(self, reassign_conversations):
        """Sets the reassign_conversations of this ActivityLogMetadata.

        Indicates if conversations should be reassigned while an Admin is away.  # noqa: E501

        :param reassign_conversations: The reassign_conversations of this ActivityLogMetadata.  # noqa: E501
        :type: bool
        """

        self._reassign_conversations = reassign_conversations

    @property
    def source(self):
        """Gets the source of this ActivityLogMetadata.  # noqa: E501

        The action that initiated the status change.  # noqa: E501

        :return: The source of this ActivityLogMetadata.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ActivityLogMetadata.

        The action that initiated the status change.  # noqa: E501

        :param source: The source of this ActivityLogMetadata.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def auto_changed(self):
        """Gets the auto_changed of this ActivityLogMetadata.  # noqa: E501

        Indicates if the status was changed automatically or manually.  # noqa: E501

        :return: The auto_changed of this ActivityLogMetadata.  # noqa: E501
        :rtype: str
        """
        return self._auto_changed

    @auto_changed.setter
    def auto_changed(self, auto_changed):
        """Sets the auto_changed of this ActivityLogMetadata.

        Indicates if the status was changed automatically or manually.  # noqa: E501

        :param auto_changed: The auto_changed of this ActivityLogMetadata.  # noqa: E501
        :type: str
        """

        self._auto_changed = auto_changed

    @property
    def update_by(self):
        """Gets the update_by of this ActivityLogMetadata.  # noqa: E501

        The ID of the Admin who initiated the activity.  # noqa: E501

        :return: The update_by of this ActivityLogMetadata.  # noqa: E501
        :rtype: int
        """
        return self._update_by

    @update_by.setter
    def update_by(self, update_by):
        """Sets the update_by of this ActivityLogMetadata.

        The ID of the Admin who initiated the activity.  # noqa: E501

        :param update_by: The update_by of this ActivityLogMetadata.  # noqa: E501
        :type: int
        """

        self._update_by = update_by

    @property
    def update_by_name(self):
        """Gets the update_by_name of this ActivityLogMetadata.  # noqa: E501

        The name of the Admin who initiated the activity.  # noqa: E501

        :return: The update_by_name of this ActivityLogMetadata.  # noqa: E501
        :rtype: str
        """
        return self._update_by_name

    @update_by_name.setter
    def update_by_name(self, update_by_name):
        """Sets the update_by_name of this ActivityLogMetadata.

        The name of the Admin who initiated the activity.  # noqa: E501

        :param update_by_name: The update_by_name of this ActivityLogMetadata.  # noqa: E501
        :type: str
        """

        self._update_by_name = update_by_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityLogMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityLogMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
