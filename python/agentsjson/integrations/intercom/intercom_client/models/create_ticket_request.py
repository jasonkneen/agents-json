# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateTicketRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ticket_type_id': 'str',
        'contacts': 'list[OneOfcreateTicketRequestContactsItems]',
        'company_id': 'str',
        'created_at': 'int',
        'ticket_attributes': 'TicketRequestCustomAttributes'
    }

    attribute_map = {
        'ticket_type_id': 'ticket_type_id',
        'contacts': 'contacts',
        'company_id': 'company_id',
        'created_at': 'created_at',
        'ticket_attributes': 'ticket_attributes'
    }

    def __init__(self, ticket_type_id=None, contacts=None, company_id=None, created_at=None, ticket_attributes=None):  # noqa: E501
        """CreateTicketRequest - a model defined in Swagger"""  # noqa: E501
        self._ticket_type_id = None
        self._contacts = None
        self._company_id = None
        self._created_at = None
        self._ticket_attributes = None
        self.discriminator = None
        self.ticket_type_id = ticket_type_id
        self.contacts = contacts
        if company_id is not None:
            self.company_id = company_id
        if created_at is not None:
            self.created_at = created_at
        if ticket_attributes is not None:
            self.ticket_attributes = ticket_attributes

    @property
    def ticket_type_id(self):
        """Gets the ticket_type_id of this CreateTicketRequest.  # noqa: E501

        The ID of the type of ticket you want to create  # noqa: E501

        :return: The ticket_type_id of this CreateTicketRequest.  # noqa: E501
        :rtype: str
        """
        return self._ticket_type_id

    @ticket_type_id.setter
    def ticket_type_id(self, ticket_type_id):
        """Sets the ticket_type_id of this CreateTicketRequest.

        The ID of the type of ticket you want to create  # noqa: E501

        :param ticket_type_id: The ticket_type_id of this CreateTicketRequest.  # noqa: E501
        :type: str
        """
        if ticket_type_id is None:
            raise ValueError("Invalid value for `ticket_type_id`, must not be `None`")  # noqa: E501

        self._ticket_type_id = ticket_type_id

    @property
    def contacts(self):
        """Gets the contacts of this CreateTicketRequest.  # noqa: E501

        The list of contacts (users or leads) affected by this ticket. Currently only one is allowed  # noqa: E501

        :return: The contacts of this CreateTicketRequest.  # noqa: E501
        :rtype: list[OneOfcreateTicketRequestContactsItems]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this CreateTicketRequest.

        The list of contacts (users or leads) affected by this ticket. Currently only one is allowed  # noqa: E501

        :param contacts: The contacts of this CreateTicketRequest.  # noqa: E501
        :type: list[OneOfcreateTicketRequestContactsItems]
        """
        if contacts is None:
            raise ValueError("Invalid value for `contacts`, must not be `None`")  # noqa: E501

        self._contacts = contacts

    @property
    def company_id(self):
        """Gets the company_id of this CreateTicketRequest.  # noqa: E501

        The ID of the company that the ticket is associated with. The ID that you set upon company creation.  # noqa: E501

        :return: The company_id of this CreateTicketRequest.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this CreateTicketRequest.

        The ID of the company that the ticket is associated with. The ID that you set upon company creation.  # noqa: E501

        :param company_id: The company_id of this CreateTicketRequest.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def created_at(self):
        """Gets the created_at of this CreateTicketRequest.  # noqa: E501

        The time the ticket was created. If not provided, the current time will be used.  # noqa: E501

        :return: The created_at of this CreateTicketRequest.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CreateTicketRequest.

        The time the ticket was created. If not provided, the current time will be used.  # noqa: E501

        :param created_at: The created_at of this CreateTicketRequest.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def ticket_attributes(self):
        """Gets the ticket_attributes of this CreateTicketRequest.  # noqa: E501


        :return: The ticket_attributes of this CreateTicketRequest.  # noqa: E501
        :rtype: TicketRequestCustomAttributes
        """
        return self._ticket_attributes

    @ticket_attributes.setter
    def ticket_attributes(self, ticket_attributes):
        """Sets the ticket_attributes of this CreateTicketRequest.


        :param ticket_attributes: The ticket_attributes of this CreateTicketRequest.  # noqa: E501
        :type: TicketRequestCustomAttributes
        """

        self._ticket_attributes = ticket_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateTicketRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTicketRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
