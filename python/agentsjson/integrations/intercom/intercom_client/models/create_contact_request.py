# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateContactRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'role': 'str',
        'external_id': 'str',
        'email': 'str',
        'phone': 'str',
        'name': 'str',
        'avatar': 'str',
        'signed_up_at': 'int',
        'last_seen_at': 'int',
        'owner_id': 'int',
        'unsubscribed_from_emails': 'bool',
        'custom_attributes': 'object'
    }

    attribute_map = {
        'role': 'role',
        'external_id': 'external_id',
        'email': 'email',
        'phone': 'phone',
        'name': 'name',
        'avatar': 'avatar',
        'signed_up_at': 'signed_up_at',
        'last_seen_at': 'last_seen_at',
        'owner_id': 'owner_id',
        'unsubscribed_from_emails': 'unsubscribed_from_emails',
        'custom_attributes': 'custom_attributes'
    }

    def __init__(self, role=None, external_id=None, email=None, phone=None, name=None, avatar=None, signed_up_at=None, last_seen_at=None, owner_id=None, unsubscribed_from_emails=None, custom_attributes=None):  # noqa: E501
        """CreateContactRequest - a model defined in Swagger"""  # noqa: E501
        self._role = None
        self._external_id = None
        self._email = None
        self._phone = None
        self._name = None
        self._avatar = None
        self._signed_up_at = None
        self._last_seen_at = None
        self._owner_id = None
        self._unsubscribed_from_emails = None
        self._custom_attributes = None
        self.discriminator = None
        if role is not None:
            self.role = role
        if external_id is not None:
            self.external_id = external_id
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone
        if name is not None:
            self.name = name
        if avatar is not None:
            self.avatar = avatar
        if signed_up_at is not None:
            self.signed_up_at = signed_up_at
        if last_seen_at is not None:
            self.last_seen_at = last_seen_at
        if owner_id is not None:
            self.owner_id = owner_id
        if unsubscribed_from_emails is not None:
            self.unsubscribed_from_emails = unsubscribed_from_emails
        if custom_attributes is not None:
            self.custom_attributes = custom_attributes

    @property
    def role(self):
        """Gets the role of this CreateContactRequest.  # noqa: E501

        The role of the contact.  # noqa: E501

        :return: The role of this CreateContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this CreateContactRequest.

        The role of the contact.  # noqa: E501

        :param role: The role of this CreateContactRequest.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def external_id(self):
        """Gets the external_id of this CreateContactRequest.  # noqa: E501

        A unique identifier for the contact which is given to Intercom  # noqa: E501

        :return: The external_id of this CreateContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this CreateContactRequest.

        A unique identifier for the contact which is given to Intercom  # noqa: E501

        :param external_id: The external_id of this CreateContactRequest.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def email(self):
        """Gets the email of this CreateContactRequest.  # noqa: E501

        The contacts email  # noqa: E501

        :return: The email of this CreateContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreateContactRequest.

        The contacts email  # noqa: E501

        :param email: The email of this CreateContactRequest.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this CreateContactRequest.  # noqa: E501

        The contacts phone  # noqa: E501

        :return: The phone of this CreateContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CreateContactRequest.

        The contacts phone  # noqa: E501

        :param phone: The phone of this CreateContactRequest.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def name(self):
        """Gets the name of this CreateContactRequest.  # noqa: E501

        The contacts name  # noqa: E501

        :return: The name of this CreateContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateContactRequest.

        The contacts name  # noqa: E501

        :param name: The name of this CreateContactRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def avatar(self):
        """Gets the avatar of this CreateContactRequest.  # noqa: E501

        An image URL containing the avatar of a contact  # noqa: E501

        :return: The avatar of this CreateContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this CreateContactRequest.

        An image URL containing the avatar of a contact  # noqa: E501

        :param avatar: The avatar of this CreateContactRequest.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def signed_up_at(self):
        """Gets the signed_up_at of this CreateContactRequest.  # noqa: E501

        The time specified for when a contact signed up  # noqa: E501

        :return: The signed_up_at of this CreateContactRequest.  # noqa: E501
        :rtype: int
        """
        return self._signed_up_at

    @signed_up_at.setter
    def signed_up_at(self, signed_up_at):
        """Sets the signed_up_at of this CreateContactRequest.

        The time specified for when a contact signed up  # noqa: E501

        :param signed_up_at: The signed_up_at of this CreateContactRequest.  # noqa: E501
        :type: int
        """

        self._signed_up_at = signed_up_at

    @property
    def last_seen_at(self):
        """Gets the last_seen_at of this CreateContactRequest.  # noqa: E501

        The time when the contact was last seen (either where the Intercom Messenger was installed or when specified manually)  # noqa: E501

        :return: The last_seen_at of this CreateContactRequest.  # noqa: E501
        :rtype: int
        """
        return self._last_seen_at

    @last_seen_at.setter
    def last_seen_at(self, last_seen_at):
        """Sets the last_seen_at of this CreateContactRequest.

        The time when the contact was last seen (either where the Intercom Messenger was installed or when specified manually)  # noqa: E501

        :param last_seen_at: The last_seen_at of this CreateContactRequest.  # noqa: E501
        :type: int
        """

        self._last_seen_at = last_seen_at

    @property
    def owner_id(self):
        """Gets the owner_id of this CreateContactRequest.  # noqa: E501

        The id of an admin that has been assigned account ownership of the contact  # noqa: E501

        :return: The owner_id of this CreateContactRequest.  # noqa: E501
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this CreateContactRequest.

        The id of an admin that has been assigned account ownership of the contact  # noqa: E501

        :param owner_id: The owner_id of this CreateContactRequest.  # noqa: E501
        :type: int
        """

        self._owner_id = owner_id

    @property
    def unsubscribed_from_emails(self):
        """Gets the unsubscribed_from_emails of this CreateContactRequest.  # noqa: E501

        Whether the contact is unsubscribed from emails  # noqa: E501

        :return: The unsubscribed_from_emails of this CreateContactRequest.  # noqa: E501
        :rtype: bool
        """
        return self._unsubscribed_from_emails

    @unsubscribed_from_emails.setter
    def unsubscribed_from_emails(self, unsubscribed_from_emails):
        """Sets the unsubscribed_from_emails of this CreateContactRequest.

        Whether the contact is unsubscribed from emails  # noqa: E501

        :param unsubscribed_from_emails: The unsubscribed_from_emails of this CreateContactRequest.  # noqa: E501
        :type: bool
        """

        self._unsubscribed_from_emails = unsubscribed_from_emails

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this CreateContactRequest.  # noqa: E501

        The custom attributes which are set for the contact  # noqa: E501

        :return: The custom_attributes of this CreateContactRequest.  # noqa: E501
        :rtype: object
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this CreateContactRequest.

        The custom attributes which are set for the contact  # noqa: E501

        :param custom_attributes: The custom_attributes of this CreateContactRequest.  # noqa: E501
        :type: object
        """

        self._custom_attributes = custom_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateContactRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateContactRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
