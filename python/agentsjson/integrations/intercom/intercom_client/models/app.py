# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class App(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id_code': 'str',
        'name': 'str',
        'region': 'str',
        'timezone': 'str',
        'created_at': 'int',
        'identity_verification': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'id_code': 'id_code',
        'name': 'name',
        'region': 'region',
        'timezone': 'timezone',
        'created_at': 'created_at',
        'identity_verification': 'identity_verification'
    }

    def __init__(self, type='app', id_code=None, name=None, region=None, timezone=None, created_at=None, identity_verification=None):  # noqa: E501
        """App - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id_code = None
        self._name = None
        self._region = None
        self._timezone = None
        self._created_at = None
        self._identity_verification = None
        self.discriminator = None
        self.type = type
        self.id_code = id_code
        self.name = name
        self.region = region
        self.timezone = timezone
        self.created_at = created_at
        self.identity_verification = identity_verification

    @property
    def type(self):
        """Gets the type of this App.  # noqa: E501


        :return: The type of this App.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this App.


        :param type: The type of this App.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def id_code(self):
        """Gets the id_code of this App.  # noqa: E501

        The id of the app.  # noqa: E501

        :return: The id_code of this App.  # noqa: E501
        :rtype: str
        """
        return self._id_code

    @id_code.setter
    def id_code(self, id_code):
        """Sets the id_code of this App.

        The id of the app.  # noqa: E501

        :param id_code: The id_code of this App.  # noqa: E501
        :type: str
        """
        if id_code is None:
            raise ValueError("Invalid value for `id_code`, must not be `None`")  # noqa: E501

        self._id_code = id_code

    @property
    def name(self):
        """Gets the name of this App.  # noqa: E501

        The name of the app.  # noqa: E501

        :return: The name of this App.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this App.

        The name of the app.  # noqa: E501

        :param name: The name of this App.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def region(self):
        """Gets the region of this App.  # noqa: E501

        The Intercom region the app is located in.  # noqa: E501

        :return: The region of this App.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this App.

        The Intercom region the app is located in.  # noqa: E501

        :param region: The region of this App.  # noqa: E501
        :type: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def timezone(self):
        """Gets the timezone of this App.  # noqa: E501

        The timezone of the region where the app is located.  # noqa: E501

        :return: The timezone of this App.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this App.

        The timezone of the region where the app is located.  # noqa: E501

        :param timezone: The timezone of this App.  # noqa: E501
        :type: str
        """
        if timezone is None:
            raise ValueError("Invalid value for `timezone`, must not be `None`")  # noqa: E501

        self._timezone = timezone

    @property
    def created_at(self):
        """Gets the created_at of this App.  # noqa: E501

        When the app was created.  # noqa: E501

        :return: The created_at of this App.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this App.

        When the app was created.  # noqa: E501

        :param created_at: The created_at of this App.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def identity_verification(self):
        """Gets the identity_verification of this App.  # noqa: E501

        Whether or not the app uses identity verification.  # noqa: E501

        :return: The identity_verification of this App.  # noqa: E501
        :rtype: bool
        """
        return self._identity_verification

    @identity_verification.setter
    def identity_verification(self, identity_verification):
        """Sets the identity_verification of this App.

        Whether or not the app uses identity verification.  # noqa: E501

        :param identity_verification: The identity_verification of this App.  # noqa: E501
        :type: bool
        """
        if identity_verification is None:
            raise ValueError("Invalid value for `identity_verification`, must not be `None`")  # noqa: E501

        self._identity_verification = identity_verification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(App, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, App):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
