# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SlaApplied(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'sla_name': 'str',
        'sla_status': 'str'
    }

    attribute_map = {
        'type': 'type',
        'sla_name': 'sla_name',
        'sla_status': 'sla_status'
    }

    def __init__(self, type=None, sla_name=None, sla_status=None):  # noqa: E501
        """SlaApplied - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._sla_name = None
        self._sla_status = None
        self.discriminator = None
        self.type = type
        self.sla_name = sla_name
        self.sla_status = sla_status

    @property
    def type(self):
        """Gets the type of this SlaApplied.  # noqa: E501

        object type  # noqa: E501

        :return: The type of this SlaApplied.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SlaApplied.

        object type  # noqa: E501

        :param type: The type of this SlaApplied.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def sla_name(self):
        """Gets the sla_name of this SlaApplied.  # noqa: E501

        The name of the SLA as given by the teammate when it was created.  # noqa: E501

        :return: The sla_name of this SlaApplied.  # noqa: E501
        :rtype: str
        """
        return self._sla_name

    @sla_name.setter
    def sla_name(self, sla_name):
        """Sets the sla_name of this SlaApplied.

        The name of the SLA as given by the teammate when it was created.  # noqa: E501

        :param sla_name: The sla_name of this SlaApplied.  # noqa: E501
        :type: str
        """
        if sla_name is None:
            raise ValueError("Invalid value for `sla_name`, must not be `None`")  # noqa: E501

        self._sla_name = sla_name

    @property
    def sla_status(self):
        """Gets the sla_status of this SlaApplied.  # noqa: E501

        SLA statuses:             - `hit`: If there’s at least one hit event in the underlying sla_events table, and no “missed” or “canceled” events for the conversation.             - `missed`: If there are any missed sla_events for the conversation and no canceled events. If there’s even a single missed sla event, the status will always be missed. A missed status is not applied when the SLA expires, only the next time a teammate replies.             - `active`: An SLA has been applied to a conversation, but has not yet been fulfilled. SLA status is active only if there are no “hit, “missed”, or “canceled” events.  # noqa: E501

        :return: The sla_status of this SlaApplied.  # noqa: E501
        :rtype: str
        """
        return self._sla_status

    @sla_status.setter
    def sla_status(self, sla_status):
        """Sets the sla_status of this SlaApplied.

        SLA statuses:             - `hit`: If there’s at least one hit event in the underlying sla_events table, and no “missed” or “canceled” events for the conversation.             - `missed`: If there are any missed sla_events for the conversation and no canceled events. If there’s even a single missed sla event, the status will always be missed. A missed status is not applied when the SLA expires, only the next time a teammate replies.             - `active`: An SLA has been applied to a conversation, but has not yet been fulfilled. SLA status is active only if there are no “hit, “missed”, or “canceled” events.  # noqa: E501

        :param sla_status: The sla_status of this SlaApplied.  # noqa: E501
        :type: str
        """
        if sla_status is None:
            raise ValueError("Invalid value for `sla_status`, must not be `None`")  # noqa: E501
        allowed_values = ["hit", "missed", "cancelled", "active"]  # noqa: E501
        if sla_status not in allowed_values:
            raise ValueError(
                "Invalid value for `sla_status` ({0}), must be one of {1}"  # noqa: E501
                .format(sla_status, allowed_values)
            )

        self._sla_status = sla_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SlaApplied, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SlaApplied):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
