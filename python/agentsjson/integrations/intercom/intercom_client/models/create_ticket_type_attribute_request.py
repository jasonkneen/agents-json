# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateTicketTypeAttributeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'data_type': 'str',
        'required_to_create': 'bool',
        'required_to_create_for_contacts': 'bool',
        'visible_on_create': 'bool',
        'visible_to_contacts': 'bool',
        'multiline': 'bool',
        'list_items': 'str',
        'allow_multiple_values': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'data_type': 'data_type',
        'required_to_create': 'required_to_create',
        'required_to_create_for_contacts': 'required_to_create_for_contacts',
        'visible_on_create': 'visible_on_create',
        'visible_to_contacts': 'visible_to_contacts',
        'multiline': 'multiline',
        'list_items': 'list_items',
        'allow_multiple_values': 'allow_multiple_values'
    }

    def __init__(self, name=None, description=None, data_type=None, required_to_create=False, required_to_create_for_contacts=False, visible_on_create=True, visible_to_contacts=True, multiline=None, list_items=None, allow_multiple_values=None):  # noqa: E501
        """CreateTicketTypeAttributeRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._data_type = None
        self._required_to_create = None
        self._required_to_create_for_contacts = None
        self._visible_on_create = None
        self._visible_to_contacts = None
        self._multiline = None
        self._list_items = None
        self._allow_multiple_values = None
        self.discriminator = None
        self.name = name
        self.description = description
        self.data_type = data_type
        if required_to_create is not None:
            self.required_to_create = required_to_create
        if required_to_create_for_contacts is not None:
            self.required_to_create_for_contacts = required_to_create_for_contacts
        if visible_on_create is not None:
            self.visible_on_create = visible_on_create
        if visible_to_contacts is not None:
            self.visible_to_contacts = visible_to_contacts
        if multiline is not None:
            self.multiline = multiline
        if list_items is not None:
            self.list_items = list_items
        if allow_multiple_values is not None:
            self.allow_multiple_values = allow_multiple_values

    @property
    def name(self):
        """Gets the name of this CreateTicketTypeAttributeRequest.  # noqa: E501

        The name of the ticket type attribute  # noqa: E501

        :return: The name of this CreateTicketTypeAttributeRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateTicketTypeAttributeRequest.

        The name of the ticket type attribute  # noqa: E501

        :param name: The name of this CreateTicketTypeAttributeRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateTicketTypeAttributeRequest.  # noqa: E501

        The description of the attribute presented to the teammate or contact  # noqa: E501

        :return: The description of this CreateTicketTypeAttributeRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateTicketTypeAttributeRequest.

        The description of the attribute presented to the teammate or contact  # noqa: E501

        :param description: The description of this CreateTicketTypeAttributeRequest.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def data_type(self):
        """Gets the data_type of this CreateTicketTypeAttributeRequest.  # noqa: E501

        The data type of the attribute  # noqa: E501

        :return: The data_type of this CreateTicketTypeAttributeRequest.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this CreateTicketTypeAttributeRequest.

        The data type of the attribute  # noqa: E501

        :param data_type: The data_type of this CreateTicketTypeAttributeRequest.  # noqa: E501
        :type: str
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")  # noqa: E501
        allowed_values = ["string", "list", "integer", "decimal", "boolean", "datetime", "files"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"  # noqa: E501
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def required_to_create(self):
        """Gets the required_to_create of this CreateTicketTypeAttributeRequest.  # noqa: E501

        Whether the attribute is required to be filled in when teammates are creating the ticket in Inbox.  # noqa: E501

        :return: The required_to_create of this CreateTicketTypeAttributeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._required_to_create

    @required_to_create.setter
    def required_to_create(self, required_to_create):
        """Sets the required_to_create of this CreateTicketTypeAttributeRequest.

        Whether the attribute is required to be filled in when teammates are creating the ticket in Inbox.  # noqa: E501

        :param required_to_create: The required_to_create of this CreateTicketTypeAttributeRequest.  # noqa: E501
        :type: bool
        """

        self._required_to_create = required_to_create

    @property
    def required_to_create_for_contacts(self):
        """Gets the required_to_create_for_contacts of this CreateTicketTypeAttributeRequest.  # noqa: E501

        Whether the attribute is required to be filled in when contacts are creating the ticket in Messenger.  # noqa: E501

        :return: The required_to_create_for_contacts of this CreateTicketTypeAttributeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._required_to_create_for_contacts

    @required_to_create_for_contacts.setter
    def required_to_create_for_contacts(self, required_to_create_for_contacts):
        """Sets the required_to_create_for_contacts of this CreateTicketTypeAttributeRequest.

        Whether the attribute is required to be filled in when contacts are creating the ticket in Messenger.  # noqa: E501

        :param required_to_create_for_contacts: The required_to_create_for_contacts of this CreateTicketTypeAttributeRequest.  # noqa: E501
        :type: bool
        """

        self._required_to_create_for_contacts = required_to_create_for_contacts

    @property
    def visible_on_create(self):
        """Gets the visible_on_create of this CreateTicketTypeAttributeRequest.  # noqa: E501

        Whether the attribute is visible to teammates when creating a ticket in Inbox.  # noqa: E501

        :return: The visible_on_create of this CreateTicketTypeAttributeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._visible_on_create

    @visible_on_create.setter
    def visible_on_create(self, visible_on_create):
        """Sets the visible_on_create of this CreateTicketTypeAttributeRequest.

        Whether the attribute is visible to teammates when creating a ticket in Inbox.  # noqa: E501

        :param visible_on_create: The visible_on_create of this CreateTicketTypeAttributeRequest.  # noqa: E501
        :type: bool
        """

        self._visible_on_create = visible_on_create

    @property
    def visible_to_contacts(self):
        """Gets the visible_to_contacts of this CreateTicketTypeAttributeRequest.  # noqa: E501

        Whether the attribute is visible to contacts when creating a ticket in Messenger.  # noqa: E501

        :return: The visible_to_contacts of this CreateTicketTypeAttributeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._visible_to_contacts

    @visible_to_contacts.setter
    def visible_to_contacts(self, visible_to_contacts):
        """Sets the visible_to_contacts of this CreateTicketTypeAttributeRequest.

        Whether the attribute is visible to contacts when creating a ticket in Messenger.  # noqa: E501

        :param visible_to_contacts: The visible_to_contacts of this CreateTicketTypeAttributeRequest.  # noqa: E501
        :type: bool
        """

        self._visible_to_contacts = visible_to_contacts

    @property
    def multiline(self):
        """Gets the multiline of this CreateTicketTypeAttributeRequest.  # noqa: E501

        Whether the attribute allows multiple lines of text (only applicable to string attributes)  # noqa: E501

        :return: The multiline of this CreateTicketTypeAttributeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._multiline

    @multiline.setter
    def multiline(self, multiline):
        """Sets the multiline of this CreateTicketTypeAttributeRequest.

        Whether the attribute allows multiple lines of text (only applicable to string attributes)  # noqa: E501

        :param multiline: The multiline of this CreateTicketTypeAttributeRequest.  # noqa: E501
        :type: bool
        """

        self._multiline = multiline

    @property
    def list_items(self):
        """Gets the list_items of this CreateTicketTypeAttributeRequest.  # noqa: E501

        A comma delimited list of items for the attribute value (only applicable to list attributes)  # noqa: E501

        :return: The list_items of this CreateTicketTypeAttributeRequest.  # noqa: E501
        :rtype: str
        """
        return self._list_items

    @list_items.setter
    def list_items(self, list_items):
        """Sets the list_items of this CreateTicketTypeAttributeRequest.

        A comma delimited list of items for the attribute value (only applicable to list attributes)  # noqa: E501

        :param list_items: The list_items of this CreateTicketTypeAttributeRequest.  # noqa: E501
        :type: str
        """

        self._list_items = list_items

    @property
    def allow_multiple_values(self):
        """Gets the allow_multiple_values of this CreateTicketTypeAttributeRequest.  # noqa: E501

        Whether the attribute allows multiple files to be attached to it (only applicable to file attributes)  # noqa: E501

        :return: The allow_multiple_values of this CreateTicketTypeAttributeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_multiple_values

    @allow_multiple_values.setter
    def allow_multiple_values(self, allow_multiple_values):
        """Sets the allow_multiple_values of this CreateTicketTypeAttributeRequest.

        Whether the attribute allows multiple files to be attached to it (only applicable to file attributes)  # noqa: E501

        :param allow_multiple_values: The allow_multiple_values of this CreateTicketTypeAttributeRequest.  # noqa: E501
        :type: bool
        """

        self._allow_multiple_values = allow_multiple_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateTicketTypeAttributeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTicketTypeAttributeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
