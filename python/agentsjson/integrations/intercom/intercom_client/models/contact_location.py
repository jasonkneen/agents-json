# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContactLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'country': 'str',
        'region': 'str',
        'city': 'str'
    }

    attribute_map = {
        'type': 'type',
        'country': 'country',
        'region': 'region',
        'city': 'city'
    }

    def __init__(self, type=None, country=None, region=None, city=None):  # noqa: E501
        """ContactLocation - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._country = None
        self._region = None
        self._city = None
        self.discriminator = None
        self.type = type
        if country is not None:
            self.country = country
        if region is not None:
            self.region = region
        if city is not None:
            self.city = city

    @property
    def type(self):
        """Gets the type of this ContactLocation.  # noqa: E501

        Always location  # noqa: E501

        :return: The type of this ContactLocation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ContactLocation.

        Always location  # noqa: E501

        :param type: The type of this ContactLocation.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["location"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def country(self):
        """Gets the country of this ContactLocation.  # noqa: E501

        The country that the contact is located in  # noqa: E501

        :return: The country of this ContactLocation.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ContactLocation.

        The country that the contact is located in  # noqa: E501

        :param country: The country of this ContactLocation.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def region(self):
        """Gets the region of this ContactLocation.  # noqa: E501

        The overal region that the contact is located in  # noqa: E501

        :return: The region of this ContactLocation.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ContactLocation.

        The overal region that the contact is located in  # noqa: E501

        :param region: The region of this ContactLocation.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def city(self):
        """Gets the city of this ContactLocation.  # noqa: E501

        The city that the contact is located in  # noqa: E501

        :return: The city of this ContactLocation.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ContactLocation.

        The city that the contact is located in  # noqa: E501

        :param city: The city of this ContactLocation.  # noqa: E501
        :type: str
        """

        self._city = city

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
