# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Note(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'created_at': 'int',
        'contact': 'NoteContact',
        'author': 'Admin',
        'body': 'str'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'created_at': 'created_at',
        'contact': 'contact',
        'author': 'author',
        'body': 'body'
    }

    def __init__(self, type=None, id=None, created_at=None, contact=None, author=None, body=None):  # noqa: E501
        """Note - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self._created_at = None
        self._contact = None
        self._author = None
        self._body = None
        self.discriminator = None
        self.type = type
        self.id = id
        self.created_at = created_at
        self.contact = contact
        self.author = author
        self.body = body

    @property
    def type(self):
        """Gets the type of this Note.  # noqa: E501

        String representing the object's type. Always has the value `note`.  # noqa: E501

        :return: The type of this Note.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Note.

        String representing the object's type. Always has the value `note`.  # noqa: E501

        :param type: The type of this Note.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["note"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this Note.  # noqa: E501

        The id of the note.  # noqa: E501

        :return: The id of this Note.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Note.

        The id of the note.  # noqa: E501

        :param id: The id of this Note.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Note.  # noqa: E501

        The time the note was created.  # noqa: E501

        :return: The created_at of this Note.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Note.

        The time the note was created.  # noqa: E501

        :param created_at: The created_at of this Note.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def contact(self):
        """Gets the contact of this Note.  # noqa: E501


        :return: The contact of this Note.  # noqa: E501
        :rtype: NoteContact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Note.


        :param contact: The contact of this Note.  # noqa: E501
        :type: NoteContact
        """
        if contact is None:
            raise ValueError("Invalid value for `contact`, must not be `None`")  # noqa: E501

        self._contact = contact

    @property
    def author(self):
        """Gets the author of this Note.  # noqa: E501


        :return: The author of this Note.  # noqa: E501
        :rtype: Admin
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Note.


        :param author: The author of this Note.  # noqa: E501
        :type: Admin
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def body(self):
        """Gets the body of this Note.  # noqa: E501

        The body text of the note.  # noqa: E501

        :return: The body of this Note.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Note.

        The body text of the note.  # noqa: E501

        :param body: The body of this Note.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Note, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Note):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
