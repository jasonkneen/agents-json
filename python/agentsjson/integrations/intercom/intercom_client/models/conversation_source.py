# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConversationSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'delivered_as': 'str',
        'subject': 'str',
        'body': 'str',
        'author': 'ConversationPartAuthor',
        'attachments': 'list[PartAttachment]',
        'url': 'str',
        'redacted': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'delivered_as': 'delivered_as',
        'subject': 'subject',
        'body': 'body',
        'author': 'author',
        'attachments': 'attachments',
        'url': 'url',
        'redacted': 'redacted'
    }

    def __init__(self, type=None, id=None, delivered_as=None, subject=None, body=None, author=None, attachments=None, url=None, redacted=None):  # noqa: E501
        """ConversationSource - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self._delivered_as = None
        self._subject = None
        self._body = None
        self._author = None
        self._attachments = None
        self._url = None
        self._redacted = None
        self.discriminator = None
        self.type = type
        self.id = id
        self.delivered_as = delivered_as
        self.subject = subject
        if body is not None:
            self.body = body
        self.author = author
        if attachments is not None:
            self.attachments = attachments
        if url is not None:
            self.url = url
        self.redacted = redacted

    @property
    def type(self):
        """Gets the type of this ConversationSource.  # noqa: E501

        This includes conversation, email, facebook, instagram, phone_call, phone_switch, push, sms, twitter and whatsapp.  # noqa: E501

        :return: The type of this ConversationSource.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConversationSource.

        This includes conversation, email, facebook, instagram, phone_call, phone_switch, push, sms, twitter and whatsapp.  # noqa: E501

        :param type: The type of this ConversationSource.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["conversation", "email", "facebook", "instagram", "phone_call", "phone_switch", "push", "sms", "twitter", "whatsapp"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this ConversationSource.  # noqa: E501

        The id representing the message.  # noqa: E501

        :return: The id of this ConversationSource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConversationSource.

        The id representing the message.  # noqa: E501

        :param id: The id of this ConversationSource.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def delivered_as(self):
        """Gets the delivered_as of this ConversationSource.  # noqa: E501

        The conversation's initiation type. Possible values are customer_initiated, campaigns_initiated (legacy campaigns), operator_initiated (Custom bot), automated (Series and other outbounds with dynamic audience message) and admin_initiated (fixed audience message, ticket initiated by an admin, group email).  # noqa: E501

        :return: The delivered_as of this ConversationSource.  # noqa: E501
        :rtype: str
        """
        return self._delivered_as

    @delivered_as.setter
    def delivered_as(self, delivered_as):
        """Sets the delivered_as of this ConversationSource.

        The conversation's initiation type. Possible values are customer_initiated, campaigns_initiated (legacy campaigns), operator_initiated (Custom bot), automated (Series and other outbounds with dynamic audience message) and admin_initiated (fixed audience message, ticket initiated by an admin, group email).  # noqa: E501

        :param delivered_as: The delivered_as of this ConversationSource.  # noqa: E501
        :type: str
        """
        if delivered_as is None:
            raise ValueError("Invalid value for `delivered_as`, must not be `None`")  # noqa: E501

        self._delivered_as = delivered_as

    @property
    def subject(self):
        """Gets the subject of this ConversationSource.  # noqa: E501

        Optional. The message subject. For Twitter, this will show a generic message regarding why the subject is obscured.  # noqa: E501

        :return: The subject of this ConversationSource.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this ConversationSource.

        Optional. The message subject. For Twitter, this will show a generic message regarding why the subject is obscured.  # noqa: E501

        :param subject: The subject of this ConversationSource.  # noqa: E501
        :type: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def body(self):
        """Gets the body of this ConversationSource.  # noqa: E501

        The message body, which may contain HTML. For Twitter, this will show a generic message regarding why the body is obscured.  # noqa: E501

        :return: The body of this ConversationSource.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this ConversationSource.

        The message body, which may contain HTML. For Twitter, this will show a generic message regarding why the body is obscured.  # noqa: E501

        :param body: The body of this ConversationSource.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def author(self):
        """Gets the author of this ConversationSource.  # noqa: E501


        :return: The author of this ConversationSource.  # noqa: E501
        :rtype: ConversationPartAuthor
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this ConversationSource.


        :param author: The author of this ConversationSource.  # noqa: E501
        :type: ConversationPartAuthor
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def attachments(self):
        """Gets the attachments of this ConversationSource.  # noqa: E501

        A list of attachments for the part.  # noqa: E501

        :return: The attachments of this ConversationSource.  # noqa: E501
        :rtype: list[PartAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this ConversationSource.

        A list of attachments for the part.  # noqa: E501

        :param attachments: The attachments of this ConversationSource.  # noqa: E501
        :type: list[PartAttachment]
        """

        self._attachments = attachments

    @property
    def url(self):
        """Gets the url of this ConversationSource.  # noqa: E501

        The URL where the conversation was started. For Twitter, Email, and Bots, this will be blank.  # noqa: E501

        :return: The url of this ConversationSource.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ConversationSource.

        The URL where the conversation was started. For Twitter, Email, and Bots, this will be blank.  # noqa: E501

        :param url: The url of this ConversationSource.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def redacted(self):
        """Gets the redacted of this ConversationSource.  # noqa: E501

        Whether or not the source message has been redacted. Only applicable for contact initiated messages.  # noqa: E501

        :return: The redacted of this ConversationSource.  # noqa: E501
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this ConversationSource.

        Whether or not the source message has been redacted. Only applicable for contact initiated messages.  # noqa: E501

        :param redacted: The redacted of this ConversationSource.  # noqa: E501
        :type: bool
        """
        if redacted is None:
            raise ValueError("Invalid value for `redacted`, must not be `None`")  # noqa: E501

        self._redacted = redacted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversationSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
