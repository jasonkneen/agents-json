# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TicketType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'category': 'str',
        'name': 'str',
        'description': 'str',
        'icon': 'str',
        'workspace_id': 'str',
        'ticket_type_attributes': 'TicketTypeAttributeList',
        'archived': 'bool',
        'created_at': 'int',
        'updated_at': 'int'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'category': 'category',
        'name': 'name',
        'description': 'description',
        'icon': 'icon',
        'workspace_id': 'workspace_id',
        'ticket_type_attributes': 'ticket_type_attributes',
        'archived': 'archived',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, type=None, id=None, category=None, name=None, description=None, icon=None, workspace_id=None, ticket_type_attributes=None, archived=None, created_at=None, updated_at=None):  # noqa: E501
        """TicketType - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self._category = None
        self._name = None
        self._description = None
        self._icon = None
        self._workspace_id = None
        self._ticket_type_attributes = None
        self._archived = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.type = type
        self.id = id
        self.category = category
        self.name = name
        self.description = description
        self.icon = icon
        self.workspace_id = workspace_id
        self.ticket_type_attributes = ticket_type_attributes
        self.archived = archived
        self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def type(self):
        """Gets the type of this TicketType.  # noqa: E501

        String representing the object's type. Always has the value `ticket_type`.  # noqa: E501

        :return: The type of this TicketType.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TicketType.

        String representing the object's type. Always has the value `ticket_type`.  # noqa: E501

        :param type: The type of this TicketType.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["ticket_type"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this TicketType.  # noqa: E501

        The id representing the ticket type.  # noqa: E501

        :return: The id of this TicketType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TicketType.

        The id representing the ticket type.  # noqa: E501

        :param id: The id of this TicketType.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def category(self):
        """Gets the category of this TicketType.  # noqa: E501

        Category of the Ticket Type.  # noqa: E501

        :return: The category of this TicketType.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TicketType.

        Category of the Ticket Type.  # noqa: E501

        :param category: The category of this TicketType.  # noqa: E501
        :type: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501
        allowed_values = ["Customer", "Back-office", "Tracker"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def name(self):
        """Gets the name of this TicketType.  # noqa: E501

        The name of the ticket type  # noqa: E501

        :return: The name of this TicketType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TicketType.

        The name of the ticket type  # noqa: E501

        :param name: The name of this TicketType.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this TicketType.  # noqa: E501

        The description of the ticket type  # noqa: E501

        :return: The description of this TicketType.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TicketType.

        The description of the ticket type  # noqa: E501

        :param description: The description of this TicketType.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def icon(self):
        """Gets the icon of this TicketType.  # noqa: E501

        The icon of the ticket type  # noqa: E501

        :return: The icon of this TicketType.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this TicketType.

        The icon of the ticket type  # noqa: E501

        :param icon: The icon of this TicketType.  # noqa: E501
        :type: str
        """
        if icon is None:
            raise ValueError("Invalid value for `icon`, must not be `None`")  # noqa: E501

        self._icon = icon

    @property
    def workspace_id(self):
        """Gets the workspace_id of this TicketType.  # noqa: E501

        The id of the workspace that the ticket type belongs to.  # noqa: E501

        :return: The workspace_id of this TicketType.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this TicketType.

        The id of the workspace that the ticket type belongs to.  # noqa: E501

        :param workspace_id: The workspace_id of this TicketType.  # noqa: E501
        :type: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")  # noqa: E501

        self._workspace_id = workspace_id

    @property
    def ticket_type_attributes(self):
        """Gets the ticket_type_attributes of this TicketType.  # noqa: E501


        :return: The ticket_type_attributes of this TicketType.  # noqa: E501
        :rtype: TicketTypeAttributeList
        """
        return self._ticket_type_attributes

    @ticket_type_attributes.setter
    def ticket_type_attributes(self, ticket_type_attributes):
        """Sets the ticket_type_attributes of this TicketType.


        :param ticket_type_attributes: The ticket_type_attributes of this TicketType.  # noqa: E501
        :type: TicketTypeAttributeList
        """
        if ticket_type_attributes is None:
            raise ValueError("Invalid value for `ticket_type_attributes`, must not be `None`")  # noqa: E501

        self._ticket_type_attributes = ticket_type_attributes

    @property
    def archived(self):
        """Gets the archived of this TicketType.  # noqa: E501

        Whether the ticket type is archived or not.  # noqa: E501

        :return: The archived of this TicketType.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this TicketType.

        Whether the ticket type is archived or not.  # noqa: E501

        :param archived: The archived of this TicketType.  # noqa: E501
        :type: bool
        """
        if archived is None:
            raise ValueError("Invalid value for `archived`, must not be `None`")  # noqa: E501

        self._archived = archived

    @property
    def created_at(self):
        """Gets the created_at of this TicketType.  # noqa: E501

        The date and time the ticket type was created.  # noqa: E501

        :return: The created_at of this TicketType.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TicketType.

        The date and time the ticket type was created.  # noqa: E501

        :param created_at: The created_at of this TicketType.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this TicketType.  # noqa: E501

        The date and time the ticket type was last updated.  # noqa: E501

        :return: The updated_at of this TicketType.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TicketType.

        The date and time the ticket type was last updated.  # noqa: E501

        :param updated_at: The updated_at of this TicketType.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TicketType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TicketType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
