# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Conversation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'title': 'str',
        'created_at': 'int',
        'updated_at': 'int',
        'waiting_since': 'int',
        'snoozed_until': 'int',
        'open': 'bool',
        'state': 'str',
        'read': 'bool',
        'priority': 'str',
        'admin_assignee_id': 'int',
        'team_assignee_id': 'str',
        'tags': 'Tags',
        'conversation_rating': 'ConversationRating',
        'source': 'ConversationSource',
        'contacts': 'ConversationContacts',
        'teammates': 'ConversationTeammates',
        'custom_attributes': 'CustomAttributes',
        'first_contact_reply': 'ConversationFirstContactReply',
        'sla_applied': 'SlaApplied',
        'statistics': 'ConversationStatistics',
        'conversation_parts': 'ConversationParts',
        'linked_objects': 'LinkedObjectList',
        'ai_agent_participated': 'bool',
        'ai_agent': 'AiAgent'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'title': 'title',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'waiting_since': 'waiting_since',
        'snoozed_until': 'snoozed_until',
        'open': 'open',
        'state': 'state',
        'read': 'read',
        'priority': 'priority',
        'admin_assignee_id': 'admin_assignee_id',
        'team_assignee_id': 'team_assignee_id',
        'tags': 'tags',
        'conversation_rating': 'conversation_rating',
        'source': 'source',
        'contacts': 'contacts',
        'teammates': 'teammates',
        'custom_attributes': 'custom_attributes',
        'first_contact_reply': 'first_contact_reply',
        'sla_applied': 'sla_applied',
        'statistics': 'statistics',
        'conversation_parts': 'conversation_parts',
        'linked_objects': 'linked_objects',
        'ai_agent_participated': 'ai_agent_participated',
        'ai_agent': 'ai_agent'
    }

    def __init__(self, type=None, id=None, title=None, created_at=None, updated_at=None, waiting_since=None, snoozed_until=None, open=None, state=None, read=None, priority=None, admin_assignee_id=None, team_assignee_id=None, tags=None, conversation_rating=None, source=None, contacts=None, teammates=None, custom_attributes=None, first_contact_reply=None, sla_applied=None, statistics=None, conversation_parts=None, linked_objects=None, ai_agent_participated=None, ai_agent=None):  # noqa: E501
        """Conversation - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self._title = None
        self._created_at = None
        self._updated_at = None
        self._waiting_since = None
        self._snoozed_until = None
        self._open = None
        self._state = None
        self._read = None
        self._priority = None
        self._admin_assignee_id = None
        self._team_assignee_id = None
        self._tags = None
        self._conversation_rating = None
        self._source = None
        self._contacts = None
        self._teammates = None
        self._custom_attributes = None
        self._first_contact_reply = None
        self._sla_applied = None
        self._statistics = None
        self._conversation_parts = None
        self._linked_objects = None
        self._ai_agent_participated = None
        self._ai_agent = None
        self.discriminator = None
        if type is not None:
            self.type = type
        self.id = id
        self.title = title
        self.created_at = created_at
        self.updated_at = updated_at
        self.waiting_since = waiting_since
        self.snoozed_until = snoozed_until
        self.open = open
        self.state = state
        self.read = read
        if priority is not None:
            self.priority = priority
        self.admin_assignee_id = admin_assignee_id
        self.team_assignee_id = team_assignee_id
        if tags is not None:
            self.tags = tags
        if conversation_rating is not None:
            self.conversation_rating = conversation_rating
        self.source = source
        self.contacts = contacts
        self.teammates = teammates
        self.custom_attributes = custom_attributes
        if first_contact_reply is not None:
            self.first_contact_reply = first_contact_reply
        if sla_applied is not None:
            self.sla_applied = sla_applied
        if statistics is not None:
            self.statistics = statistics
        if conversation_parts is not None:
            self.conversation_parts = conversation_parts
        if linked_objects is not None:
            self.linked_objects = linked_objects
        if ai_agent_participated is not None:
            self.ai_agent_participated = ai_agent_participated
        if ai_agent is not None:
            self.ai_agent = ai_agent

    @property
    def type(self):
        """Gets the type of this Conversation.  # noqa: E501

        Always conversation.  # noqa: E501

        :return: The type of this Conversation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Conversation.

        Always conversation.  # noqa: E501

        :param type: The type of this Conversation.  # noqa: E501
        :type: str
        """
        allowed_values = ["conversation"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this Conversation.  # noqa: E501

        The id representing the conversation.  # noqa: E501

        :return: The id of this Conversation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Conversation.

        The id representing the conversation.  # noqa: E501

        :param id: The id of this Conversation.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this Conversation.  # noqa: E501

        The title given to the conversation.  # noqa: E501

        :return: The title of this Conversation.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Conversation.

        The title given to the conversation.  # noqa: E501

        :param title: The title of this Conversation.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def created_at(self):
        """Gets the created_at of this Conversation.  # noqa: E501

        The time the conversation was created.  # noqa: E501

        :return: The created_at of this Conversation.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Conversation.

        The time the conversation was created.  # noqa: E501

        :param created_at: The created_at of this Conversation.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Conversation.  # noqa: E501

        The last time the conversation was updated.  # noqa: E501

        :return: The updated_at of this Conversation.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Conversation.

        The last time the conversation was updated.  # noqa: E501

        :param updated_at: The updated_at of this Conversation.  # noqa: E501
        :type: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def waiting_since(self):
        """Gets the waiting_since of this Conversation.  # noqa: E501

        The last time a Contact responded to an Admin. In other words, the time a customer started waiting for a response. Set to null if last reply is from an Admin.  # noqa: E501

        :return: The waiting_since of this Conversation.  # noqa: E501
        :rtype: int
        """
        return self._waiting_since

    @waiting_since.setter
    def waiting_since(self, waiting_since):
        """Sets the waiting_since of this Conversation.

        The last time a Contact responded to an Admin. In other words, the time a customer started waiting for a response. Set to null if last reply is from an Admin.  # noqa: E501

        :param waiting_since: The waiting_since of this Conversation.  # noqa: E501
        :type: int
        """
        if waiting_since is None:
            raise ValueError("Invalid value for `waiting_since`, must not be `None`")  # noqa: E501

        self._waiting_since = waiting_since

    @property
    def snoozed_until(self):
        """Gets the snoozed_until of this Conversation.  # noqa: E501

        If set this is the time in the future when this conversation will be marked as open. i.e. it will be in a snoozed state until this time. i.e. it will be in a snoozed state until this time.  # noqa: E501

        :return: The snoozed_until of this Conversation.  # noqa: E501
        :rtype: int
        """
        return self._snoozed_until

    @snoozed_until.setter
    def snoozed_until(self, snoozed_until):
        """Sets the snoozed_until of this Conversation.

        If set this is the time in the future when this conversation will be marked as open. i.e. it will be in a snoozed state until this time. i.e. it will be in a snoozed state until this time.  # noqa: E501

        :param snoozed_until: The snoozed_until of this Conversation.  # noqa: E501
        :type: int
        """
        if snoozed_until is None:
            raise ValueError("Invalid value for `snoozed_until`, must not be `None`")  # noqa: E501

        self._snoozed_until = snoozed_until

    @property
    def open(self):
        """Gets the open of this Conversation.  # noqa: E501

        Indicates whether a conversation is open (true) or closed (false).  # noqa: E501

        :return: The open of this Conversation.  # noqa: E501
        :rtype: bool
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this Conversation.

        Indicates whether a conversation is open (true) or closed (false).  # noqa: E501

        :param open: The open of this Conversation.  # noqa: E501
        :type: bool
        """
        if open is None:
            raise ValueError("Invalid value for `open`, must not be `None`")  # noqa: E501

        self._open = open

    @property
    def state(self):
        """Gets the state of this Conversation.  # noqa: E501

        Can be set to \"open\", \"closed\" or \"snoozed\".  # noqa: E501

        :return: The state of this Conversation.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Conversation.

        Can be set to \"open\", \"closed\" or \"snoozed\".  # noqa: E501

        :param state: The state of this Conversation.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["open", "closed", "snoozed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def read(self):
        """Gets the read of this Conversation.  # noqa: E501

        Indicates whether a conversation has been read.  # noqa: E501

        :return: The read of this Conversation.  # noqa: E501
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this Conversation.

        Indicates whether a conversation has been read.  # noqa: E501

        :param read: The read of this Conversation.  # noqa: E501
        :type: bool
        """
        if read is None:
            raise ValueError("Invalid value for `read`, must not be `None`")  # noqa: E501

        self._read = read

    @property
    def priority(self):
        """Gets the priority of this Conversation.  # noqa: E501

        If marked as priority, it will return priority or else not_priority.  # noqa: E501

        :return: The priority of this Conversation.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Conversation.

        If marked as priority, it will return priority or else not_priority.  # noqa: E501

        :param priority: The priority of this Conversation.  # noqa: E501
        :type: str
        """
        allowed_values = ["priority", "not_priority"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"  # noqa: E501
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def admin_assignee_id(self):
        """Gets the admin_assignee_id of this Conversation.  # noqa: E501

        The id of the admin assigned to the conversation. If it's not assigned to an admin it will return null.  # noqa: E501

        :return: The admin_assignee_id of this Conversation.  # noqa: E501
        :rtype: int
        """
        return self._admin_assignee_id

    @admin_assignee_id.setter
    def admin_assignee_id(self, admin_assignee_id):
        """Sets the admin_assignee_id of this Conversation.

        The id of the admin assigned to the conversation. If it's not assigned to an admin it will return null.  # noqa: E501

        :param admin_assignee_id: The admin_assignee_id of this Conversation.  # noqa: E501
        :type: int
        """
        if admin_assignee_id is None:
            raise ValueError("Invalid value for `admin_assignee_id`, must not be `None`")  # noqa: E501

        self._admin_assignee_id = admin_assignee_id

    @property
    def team_assignee_id(self):
        """Gets the team_assignee_id of this Conversation.  # noqa: E501

        The id of the team assigned to the conversation. If it's not assigned to a team it will return null.  # noqa: E501

        :return: The team_assignee_id of this Conversation.  # noqa: E501
        :rtype: str
        """
        return self._team_assignee_id

    @team_assignee_id.setter
    def team_assignee_id(self, team_assignee_id):
        """Sets the team_assignee_id of this Conversation.

        The id of the team assigned to the conversation. If it's not assigned to a team it will return null.  # noqa: E501

        :param team_assignee_id: The team_assignee_id of this Conversation.  # noqa: E501
        :type: str
        """
        if team_assignee_id is None:
            raise ValueError("Invalid value for `team_assignee_id`, must not be `None`")  # noqa: E501

        self._team_assignee_id = team_assignee_id

    @property
    def tags(self):
        """Gets the tags of this Conversation.  # noqa: E501


        :return: The tags of this Conversation.  # noqa: E501
        :rtype: Tags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Conversation.


        :param tags: The tags of this Conversation.  # noqa: E501
        :type: Tags
        """

        self._tags = tags

    @property
    def conversation_rating(self):
        """Gets the conversation_rating of this Conversation.  # noqa: E501


        :return: The conversation_rating of this Conversation.  # noqa: E501
        :rtype: ConversationRating
        """
        return self._conversation_rating

    @conversation_rating.setter
    def conversation_rating(self, conversation_rating):
        """Sets the conversation_rating of this Conversation.


        :param conversation_rating: The conversation_rating of this Conversation.  # noqa: E501
        :type: ConversationRating
        """

        self._conversation_rating = conversation_rating

    @property
    def source(self):
        """Gets the source of this Conversation.  # noqa: E501


        :return: The source of this Conversation.  # noqa: E501
        :rtype: ConversationSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Conversation.


        :param source: The source of this Conversation.  # noqa: E501
        :type: ConversationSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def contacts(self):
        """Gets the contacts of this Conversation.  # noqa: E501


        :return: The contacts of this Conversation.  # noqa: E501
        :rtype: ConversationContacts
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this Conversation.


        :param contacts: The contacts of this Conversation.  # noqa: E501
        :type: ConversationContacts
        """
        if contacts is None:
            raise ValueError("Invalid value for `contacts`, must not be `None`")  # noqa: E501

        self._contacts = contacts

    @property
    def teammates(self):
        """Gets the teammates of this Conversation.  # noqa: E501


        :return: The teammates of this Conversation.  # noqa: E501
        :rtype: ConversationTeammates
        """
        return self._teammates

    @teammates.setter
    def teammates(self, teammates):
        """Sets the teammates of this Conversation.


        :param teammates: The teammates of this Conversation.  # noqa: E501
        :type: ConversationTeammates
        """
        if teammates is None:
            raise ValueError("Invalid value for `teammates`, must not be `None`")  # noqa: E501

        self._teammates = teammates

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this Conversation.  # noqa: E501


        :return: The custom_attributes of this Conversation.  # noqa: E501
        :rtype: CustomAttributes
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this Conversation.


        :param custom_attributes: The custom_attributes of this Conversation.  # noqa: E501
        :type: CustomAttributes
        """
        if custom_attributes is None:
            raise ValueError("Invalid value for `custom_attributes`, must not be `None`")  # noqa: E501

        self._custom_attributes = custom_attributes

    @property
    def first_contact_reply(self):
        """Gets the first_contact_reply of this Conversation.  # noqa: E501


        :return: The first_contact_reply of this Conversation.  # noqa: E501
        :rtype: ConversationFirstContactReply
        """
        return self._first_contact_reply

    @first_contact_reply.setter
    def first_contact_reply(self, first_contact_reply):
        """Sets the first_contact_reply of this Conversation.


        :param first_contact_reply: The first_contact_reply of this Conversation.  # noqa: E501
        :type: ConversationFirstContactReply
        """

        self._first_contact_reply = first_contact_reply

    @property
    def sla_applied(self):
        """Gets the sla_applied of this Conversation.  # noqa: E501


        :return: The sla_applied of this Conversation.  # noqa: E501
        :rtype: SlaApplied
        """
        return self._sla_applied

    @sla_applied.setter
    def sla_applied(self, sla_applied):
        """Sets the sla_applied of this Conversation.


        :param sla_applied: The sla_applied of this Conversation.  # noqa: E501
        :type: SlaApplied
        """

        self._sla_applied = sla_applied

    @property
    def statistics(self):
        """Gets the statistics of this Conversation.  # noqa: E501


        :return: The statistics of this Conversation.  # noqa: E501
        :rtype: ConversationStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this Conversation.


        :param statistics: The statistics of this Conversation.  # noqa: E501
        :type: ConversationStatistics
        """

        self._statistics = statistics

    @property
    def conversation_parts(self):
        """Gets the conversation_parts of this Conversation.  # noqa: E501


        :return: The conversation_parts of this Conversation.  # noqa: E501
        :rtype: ConversationParts
        """
        return self._conversation_parts

    @conversation_parts.setter
    def conversation_parts(self, conversation_parts):
        """Sets the conversation_parts of this Conversation.


        :param conversation_parts: The conversation_parts of this Conversation.  # noqa: E501
        :type: ConversationParts
        """

        self._conversation_parts = conversation_parts

    @property
    def linked_objects(self):
        """Gets the linked_objects of this Conversation.  # noqa: E501


        :return: The linked_objects of this Conversation.  # noqa: E501
        :rtype: LinkedObjectList
        """
        return self._linked_objects

    @linked_objects.setter
    def linked_objects(self, linked_objects):
        """Sets the linked_objects of this Conversation.


        :param linked_objects: The linked_objects of this Conversation.  # noqa: E501
        :type: LinkedObjectList
        """

        self._linked_objects = linked_objects

    @property
    def ai_agent_participated(self):
        """Gets the ai_agent_participated of this Conversation.  # noqa: E501

        Indicates whether the AI Agent participated in the conversation.  # noqa: E501

        :return: The ai_agent_participated of this Conversation.  # noqa: E501
        :rtype: bool
        """
        return self._ai_agent_participated

    @ai_agent_participated.setter
    def ai_agent_participated(self, ai_agent_participated):
        """Sets the ai_agent_participated of this Conversation.

        Indicates whether the AI Agent participated in the conversation.  # noqa: E501

        :param ai_agent_participated: The ai_agent_participated of this Conversation.  # noqa: E501
        :type: bool
        """

        self._ai_agent_participated = ai_agent_participated

    @property
    def ai_agent(self):
        """Gets the ai_agent of this Conversation.  # noqa: E501


        :return: The ai_agent of this Conversation.  # noqa: E501
        :rtype: AiAgent
        """
        return self._ai_agent

    @ai_agent.setter
    def ai_agent(self, ai_agent):
        """Sets the ai_agent of this Conversation.


        :param ai_agent: The ai_agent of this Conversation.  # noqa: E501
        :type: AiAgent
        """

        self._ai_agent = ai_agent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Conversation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Conversation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
