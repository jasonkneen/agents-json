# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HelpCenter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'workspace_id': 'str',
        'created_at': 'int',
        'updated_at': 'int',
        'identifier': 'str',
        'website_turned_on': 'bool',
        'display_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'workspace_id': 'workspace_id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'identifier': 'identifier',
        'website_turned_on': 'website_turned_on',
        'display_name': 'display_name'
    }

    def __init__(self, id=None, workspace_id=None, created_at=None, updated_at=None, identifier=None, website_turned_on=None, display_name=None):  # noqa: E501
        """HelpCenter - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._workspace_id = None
        self._created_at = None
        self._updated_at = None
        self._identifier = None
        self._website_turned_on = None
        self._display_name = None
        self.discriminator = None
        self.id = id
        self.workspace_id = workspace_id
        self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        self.identifier = identifier
        self.website_turned_on = website_turned_on
        self.display_name = display_name

    @property
    def id(self):
        """Gets the id of this HelpCenter.  # noqa: E501

        The unique identifier for the Help Center which is given by Intercom.  # noqa: E501

        :return: The id of this HelpCenter.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HelpCenter.

        The unique identifier for the Help Center which is given by Intercom.  # noqa: E501

        :param id: The id of this HelpCenter.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this HelpCenter.  # noqa: E501

        The id of the workspace which the Help Center belongs to.  # noqa: E501

        :return: The workspace_id of this HelpCenter.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this HelpCenter.

        The id of the workspace which the Help Center belongs to.  # noqa: E501

        :param workspace_id: The workspace_id of this HelpCenter.  # noqa: E501
        :type: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")  # noqa: E501

        self._workspace_id = workspace_id

    @property
    def created_at(self):
        """Gets the created_at of this HelpCenter.  # noqa: E501

        The time when the Help Center was created.  # noqa: E501

        :return: The created_at of this HelpCenter.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this HelpCenter.

        The time when the Help Center was created.  # noqa: E501

        :param created_at: The created_at of this HelpCenter.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this HelpCenter.  # noqa: E501

        The time when the Help Center was last updated.  # noqa: E501

        :return: The updated_at of this HelpCenter.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this HelpCenter.

        The time when the Help Center was last updated.  # noqa: E501

        :param updated_at: The updated_at of this HelpCenter.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    @property
    def identifier(self):
        """Gets the identifier of this HelpCenter.  # noqa: E501

        The identifier of the Help Center. This is used in the URL of the Help Center.  # noqa: E501

        :return: The identifier of this HelpCenter.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this HelpCenter.

        The identifier of the Help Center. This is used in the URL of the Help Center.  # noqa: E501

        :param identifier: The identifier of this HelpCenter.  # noqa: E501
        :type: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def website_turned_on(self):
        """Gets the website_turned_on of this HelpCenter.  # noqa: E501

        Whether the Help Center is turned on or not. This is controlled in your Help Center settings.  # noqa: E501

        :return: The website_turned_on of this HelpCenter.  # noqa: E501
        :rtype: bool
        """
        return self._website_turned_on

    @website_turned_on.setter
    def website_turned_on(self, website_turned_on):
        """Sets the website_turned_on of this HelpCenter.

        Whether the Help Center is turned on or not. This is controlled in your Help Center settings.  # noqa: E501

        :param website_turned_on: The website_turned_on of this HelpCenter.  # noqa: E501
        :type: bool
        """
        if website_turned_on is None:
            raise ValueError("Invalid value for `website_turned_on`, must not be `None`")  # noqa: E501

        self._website_turned_on = website_turned_on

    @property
    def display_name(self):
        """Gets the display_name of this HelpCenter.  # noqa: E501

        The display name of the Help Center only seen by teammates.  # noqa: E501

        :return: The display_name of this HelpCenter.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this HelpCenter.

        The display name of the Help Center only seen by teammates.  # noqa: E501

        :param display_name: The display_name of this HelpCenter.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HelpCenter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HelpCenter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
