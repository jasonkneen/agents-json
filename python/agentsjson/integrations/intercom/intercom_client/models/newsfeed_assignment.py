# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NewsfeedAssignment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'newsfeed_id': 'int',
        'published_at': 'int'
    }

    attribute_map = {
        'newsfeed_id': 'newsfeed_id',
        'published_at': 'published_at'
    }

    def __init__(self, newsfeed_id=None, published_at=None):  # noqa: E501
        """NewsfeedAssignment - a model defined in Swagger"""  # noqa: E501
        self._newsfeed_id = None
        self._published_at = None
        self.discriminator = None
        self.newsfeed_id = newsfeed_id
        self.published_at = published_at

    @property
    def newsfeed_id(self):
        """Gets the newsfeed_id of this NewsfeedAssignment.  # noqa: E501

        The unique identifier for the newsfeed which is given by Intercom. Publish dates cannot be in the future, to schedule news items use the dedicated feature in app (see this article).  # noqa: E501

        :return: The newsfeed_id of this NewsfeedAssignment.  # noqa: E501
        :rtype: int
        """
        return self._newsfeed_id

    @newsfeed_id.setter
    def newsfeed_id(self, newsfeed_id):
        """Sets the newsfeed_id of this NewsfeedAssignment.

        The unique identifier for the newsfeed which is given by Intercom. Publish dates cannot be in the future, to schedule news items use the dedicated feature in app (see this article).  # noqa: E501

        :param newsfeed_id: The newsfeed_id of this NewsfeedAssignment.  # noqa: E501
        :type: int
        """
        if newsfeed_id is None:
            raise ValueError("Invalid value for `newsfeed_id`, must not be `None`")  # noqa: E501

        self._newsfeed_id = newsfeed_id

    @property
    def published_at(self):
        """Gets the published_at of this NewsfeedAssignment.  # noqa: E501

        Publish date of the news item on the newsfeed, use this field if you want to set a publish date in the past (e.g. when importing existing news items). On write, this field will be ignored if the news item state is \"draft\".  # noqa: E501

        :return: The published_at of this NewsfeedAssignment.  # noqa: E501
        :rtype: int
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this NewsfeedAssignment.

        Publish date of the news item on the newsfeed, use this field if you want to set a publish date in the past (e.g. when importing existing news items). On write, this field will be ignored if the news item state is \"draft\".  # noqa: E501

        :param published_at: The published_at of this NewsfeedAssignment.  # noqa: E501
        :type: int
        """
        if published_at is None:
            raise ValueError("Invalid value for `published_at`, must not be `None`")  # noqa: E501

        self._published_at = published_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewsfeedAssignment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewsfeedAssignment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
