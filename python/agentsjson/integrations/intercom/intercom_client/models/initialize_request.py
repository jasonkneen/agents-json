# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InitializeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'workspace_id': 'str',
        'workspace_region': 'str',
        'admin': 'Admin',
        'card_creation_options': 'dict(str, object)',
        'context': 'Context',
        'conversation': 'Conversation',
        'contact': 'Contact'
    }

    attribute_map = {
        'workspace_id': 'workspace_id',
        'workspace_region': 'workspace_region',
        'admin': 'admin',
        'card_creation_options': 'card_creation_options',
        'context': 'context',
        'conversation': 'conversation',
        'contact': 'contact'
    }

    def __init__(self, workspace_id=None, workspace_region=None, admin=None, card_creation_options=None, context=None, conversation=None, contact=None):  # noqa: E501
        """InitializeRequest - a model defined in Swagger"""  # noqa: E501
        self._workspace_id = None
        self._workspace_region = None
        self._admin = None
        self._card_creation_options = None
        self._context = None
        self._conversation = None
        self._contact = None
        self.discriminator = None
        self.workspace_id = workspace_id
        self.workspace_region = workspace_region
        self.admin = admin
        self.card_creation_options = card_creation_options
        self.context = context
        self.conversation = conversation
        self.contact = contact

    @property
    def workspace_id(self):
        """Gets the workspace_id of this InitializeRequest.  # noqa: E501

        The workspace ID of the teammate. Attribute is `app_id` for V1.2 and below.  # noqa: E501

        :return: The workspace_id of this InitializeRequest.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this InitializeRequest.

        The workspace ID of the teammate. Attribute is `app_id` for V1.2 and below.  # noqa: E501

        :param workspace_id: The workspace_id of this InitializeRequest.  # noqa: E501
        :type: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")  # noqa: E501

        self._workspace_id = workspace_id

    @property
    def workspace_region(self):
        """Gets the workspace_region of this InitializeRequest.  # noqa: E501

        The Intercom hosted region that this app is located in.  # noqa: E501

        :return: The workspace_region of this InitializeRequest.  # noqa: E501
        :rtype: str
        """
        return self._workspace_region

    @workspace_region.setter
    def workspace_region(self, workspace_region):
        """Sets the workspace_region of this InitializeRequest.

        The Intercom hosted region that this app is located in.  # noqa: E501

        :param workspace_region: The workspace_region of this InitializeRequest.  # noqa: E501
        :type: str
        """
        if workspace_region is None:
            raise ValueError("Invalid value for `workspace_region`, must not be `None`")  # noqa: E501

        self._workspace_region = workspace_region

    @property
    def admin(self):
        """Gets the admin of this InitializeRequest.  # noqa: E501


        :return: The admin of this InitializeRequest.  # noqa: E501
        :rtype: Admin
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this InitializeRequest.


        :param admin: The admin of this InitializeRequest.  # noqa: E501
        :type: Admin
        """
        if admin is None:
            raise ValueError("Invalid value for `admin`, must not be `None`")  # noqa: E501

        self._admin = admin

    @property
    def card_creation_options(self):
        """Gets the card_creation_options of this InitializeRequest.  # noqa: E501

        Key-value pairs which were given as results in response to the Configure request.  # noqa: E501

        :return: The card_creation_options of this InitializeRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._card_creation_options

    @card_creation_options.setter
    def card_creation_options(self, card_creation_options):
        """Sets the card_creation_options of this InitializeRequest.

        Key-value pairs which were given as results in response to the Configure request.  # noqa: E501

        :param card_creation_options: The card_creation_options of this InitializeRequest.  # noqa: E501
        :type: dict(str, object)
        """
        if card_creation_options is None:
            raise ValueError("Invalid value for `card_creation_options`, must not be `None`")  # noqa: E501

        self._card_creation_options = card_creation_options

    @property
    def context(self):
        """Gets the context of this InitializeRequest.  # noqa: E501


        :return: The context of this InitializeRequest.  # noqa: E501
        :rtype: Context
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this InitializeRequest.


        :param context: The context of this InitializeRequest.  # noqa: E501
        :type: Context
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")  # noqa: E501

        self._context = context

    @property
    def conversation(self):
        """Gets the conversation of this InitializeRequest.  # noqa: E501


        :return: The conversation of this InitializeRequest.  # noqa: E501
        :rtype: Conversation
        """
        return self._conversation

    @conversation.setter
    def conversation(self, conversation):
        """Sets the conversation of this InitializeRequest.


        :param conversation: The conversation of this InitializeRequest.  # noqa: E501
        :type: Conversation
        """
        if conversation is None:
            raise ValueError("Invalid value for `conversation`, must not be `None`")  # noqa: E501

        self._conversation = conversation

    @property
    def contact(self):
        """Gets the contact of this InitializeRequest.  # noqa: E501


        :return: The contact of this InitializeRequest.  # noqa: E501
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this InitializeRequest.


        :param contact: The contact of this InitializeRequest.  # noqa: E501
        :type: Contact
        """
        if contact is None:
            raise ValueError("Invalid value for `contact`, must not be `None`")  # noqa: E501

        self._contact = contact

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InitializeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InitializeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
