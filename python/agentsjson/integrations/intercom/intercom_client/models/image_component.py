# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ImageComponent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'url': 'str',
        'align': 'str',
        'width': 'int',
        'height': 'int',
        'rounded': 'bool',
        'bottom_margin': 'str',
        'action': 'UrlActionComponent'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'url': 'url',
        'align': 'align',
        'width': 'width',
        'height': 'height',
        'rounded': 'rounded',
        'bottom_margin': 'bottom_margin',
        'action': 'action'
    }

    def __init__(self, type=None, id=None, url=None, align='left', width=None, height=None, rounded=False, bottom_margin=None, action=None):  # noqa: E501
        """ImageComponent - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self._url = None
        self._align = None
        self._width = None
        self._height = None
        self._rounded = None
        self._bottom_margin = None
        self._action = None
        self.discriminator = None
        self.type = type
        if id is not None:
            self.id = id
        self.url = url
        if align is not None:
            self.align = align
        self.width = width
        self.height = height
        if rounded is not None:
            self.rounded = rounded
        if bottom_margin is not None:
            self.bottom_margin = bottom_margin
        if action is not None:
            self.action = action

    @property
    def type(self):
        """Gets the type of this ImageComponent.  # noqa: E501

        The type of component you are rendering.  # noqa: E501

        :return: The type of this ImageComponent.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImageComponent.

        The type of component you are rendering.  # noqa: E501

        :param type: The type of this ImageComponent.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["image"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this ImageComponent.  # noqa: E501

        A unique identifier for the component.  # noqa: E501

        :return: The id of this ImageComponent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImageComponent.

        A unique identifier for the component.  # noqa: E501

        :param id: The id of this ImageComponent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def url(self):
        """Gets the url of this ImageComponent.  # noqa: E501

        The URL where the image is located.  # noqa: E501

        :return: The url of this ImageComponent.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ImageComponent.

        The URL where the image is located.  # noqa: E501

        :param url: The url of this ImageComponent.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def align(self):
        """Gets the align of this ImageComponent.  # noqa: E501

        Aligns the image inside the component. Default is `left`.  # noqa: E501

        :return: The align of this ImageComponent.  # noqa: E501
        :rtype: str
        """
        return self._align

    @align.setter
    def align(self, align):
        """Sets the align of this ImageComponent.

        Aligns the image inside the component. Default is `left`.  # noqa: E501

        :param align: The align of this ImageComponent.  # noqa: E501
        :type: str
        """
        allowed_values = ["left", "center", "right", "full_width"]  # noqa: E501
        if align not in allowed_values:
            raise ValueError(
                "Invalid value for `align` ({0}), must be one of {1}"  # noqa: E501
                .format(align, allowed_values)
            )

        self._align = align

    @property
    def width(self):
        """Gets the width of this ImageComponent.  # noqa: E501

        The exact width of the image in pixels.  # noqa: E501

        :return: The width of this ImageComponent.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ImageComponent.

        The exact width of the image in pixels.  # noqa: E501

        :param width: The width of this ImageComponent.  # noqa: E501
        :type: int
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")  # noqa: E501

        self._width = width

    @property
    def height(self):
        """Gets the height of this ImageComponent.  # noqa: E501

        The exact height of the image in pixels.  # noqa: E501

        :return: The height of this ImageComponent.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ImageComponent.

        The exact height of the image in pixels.  # noqa: E501

        :param height: The height of this ImageComponent.  # noqa: E501
        :type: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501

        self._height = height

    @property
    def rounded(self):
        """Gets the rounded of this ImageComponent.  # noqa: E501

        Rounds the corners of the image. Default is `false`.  # noqa: E501

        :return: The rounded of this ImageComponent.  # noqa: E501
        :rtype: bool
        """
        return self._rounded

    @rounded.setter
    def rounded(self, rounded):
        """Sets the rounded of this ImageComponent.

        Rounds the corners of the image. Default is `false`.  # noqa: E501

        :param rounded: The rounded of this ImageComponent.  # noqa: E501
        :type: bool
        """

        self._rounded = rounded

    @property
    def bottom_margin(self):
        """Gets the bottom_margin of this ImageComponent.  # noqa: E501

        Disables a component's margin-bottom of 10px.  # noqa: E501

        :return: The bottom_margin of this ImageComponent.  # noqa: E501
        :rtype: str
        """
        return self._bottom_margin

    @bottom_margin.setter
    def bottom_margin(self, bottom_margin):
        """Sets the bottom_margin of this ImageComponent.

        Disables a component's margin-bottom of 10px.  # noqa: E501

        :param bottom_margin: The bottom_margin of this ImageComponent.  # noqa: E501
        :type: str
        """
        allowed_values = ["none"]  # noqa: E501
        if bottom_margin not in allowed_values:
            raise ValueError(
                "Invalid value for `bottom_margin` ({0}), must be one of {1}"  # noqa: E501
                .format(bottom_margin, allowed_values)
            )

        self._bottom_margin = bottom_margin

    @property
    def action(self):
        """Gets the action of this ImageComponent.  # noqa: E501


        :return: The action of this ImageComponent.  # noqa: E501
        :rtype: UrlActionComponent
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ImageComponent.


        :param action: The action of this ImageComponent.  # noqa: E501
        :type: UrlActionComponent
        """

        self._action = action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImageComponent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
