# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContactNotes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'list[AddressableList]',
        'url': 'str',
        'total_count': 'int',
        'has_more': 'bool'
    }

    attribute_map = {
        'data': 'data',
        'url': 'url',
        'total_count': 'total_count',
        'has_more': 'has_more'
    }

    def __init__(self, data=None, url=None, total_count=None, has_more=None):  # noqa: E501
        """ContactNotes - a model defined in Swagger"""  # noqa: E501
        self._data = None
        self._url = None
        self._total_count = None
        self._has_more = None
        self.discriminator = None
        self.data = data
        self.url = url
        self.total_count = total_count
        self.has_more = has_more

    @property
    def data(self):
        """Gets the data of this ContactNotes.  # noqa: E501

        This object represents the notes attached to a contact.  # noqa: E501

        :return: The data of this ContactNotes.  # noqa: E501
        :rtype: list[AddressableList]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ContactNotes.

        This object represents the notes attached to a contact.  # noqa: E501

        :param data: The data of this ContactNotes.  # noqa: E501
        :type: list[AddressableList]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def url(self):
        """Gets the url of this ContactNotes.  # noqa: E501

        Url to get more company resources for this contact  # noqa: E501

        :return: The url of this ContactNotes.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ContactNotes.

        Url to get more company resources for this contact  # noqa: E501

        :param url: The url of this ContactNotes.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def total_count(self):
        """Gets the total_count of this ContactNotes.  # noqa: E501

        Int representing the total number of companyies attached to this contact  # noqa: E501

        :return: The total_count of this ContactNotes.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ContactNotes.

        Int representing the total number of companyies attached to this contact  # noqa: E501

        :param total_count: The total_count of this ContactNotes.  # noqa: E501
        :type: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")  # noqa: E501

        self._total_count = total_count

    @property
    def has_more(self):
        """Gets the has_more of this ContactNotes.  # noqa: E501

        Whether there's more Addressable Objects to be viewed. If true, use the url to view all  # noqa: E501

        :return: The has_more of this ContactNotes.  # noqa: E501
        :rtype: bool
        """
        return self._has_more

    @has_more.setter
    def has_more(self, has_more):
        """Sets the has_more of this ContactNotes.

        Whether there's more Addressable Objects to be viewed. If true, use the url to view all  # noqa: E501

        :param has_more: The has_more of this ContactNotes.  # noqa: E501
        :type: bool
        """
        if has_more is None:
            raise ValueError("Invalid value for `has_more`, must not be `None`")  # noqa: E501

        self._has_more = has_more

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactNotes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactNotes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
