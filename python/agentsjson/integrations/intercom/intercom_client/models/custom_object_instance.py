# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomObjectInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'external_id': 'str',
        'type': 'str',
        'custom_attributes': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'id',
        'external_id': 'external_id',
        'type': 'type',
        'custom_attributes': 'custom_attributes'
    }

    def __init__(self, id=None, external_id=None, type=None, custom_attributes=None):  # noqa: E501
        """CustomObjectInstance - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._external_id = None
        self._type = None
        self._custom_attributes = None
        self.discriminator = None
        self.id = id
        if external_id is not None:
            self.external_id = external_id
        self.type = type
        if custom_attributes is not None:
            self.custom_attributes = custom_attributes

    @property
    def id(self):
        """Gets the id of this CustomObjectInstance.  # noqa: E501

        The Intercom defined id representing the custom object instance.  # noqa: E501

        :return: The id of this CustomObjectInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomObjectInstance.

        The Intercom defined id representing the custom object instance.  # noqa: E501

        :param id: The id of this CustomObjectInstance.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def external_id(self):
        """Gets the external_id of this CustomObjectInstance.  # noqa: E501

        The id you have defined for the custom object instance.  # noqa: E501

        :return: The external_id of this CustomObjectInstance.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this CustomObjectInstance.

        The id you have defined for the custom object instance.  # noqa: E501

        :param external_id: The external_id of this CustomObjectInstance.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def type(self):
        """Gets the type of this CustomObjectInstance.  # noqa: E501

        The identifier of the custom object type that defines the structure of the custom object instance.  # noqa: E501

        :return: The type of this CustomObjectInstance.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomObjectInstance.

        The identifier of the custom object type that defines the structure of the custom object instance.  # noqa: E501

        :param type: The type of this CustomObjectInstance.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this CustomObjectInstance.  # noqa: E501

        The custom attributes you have set on the custom object instance.  # noqa: E501

        :return: The custom_attributes of this CustomObjectInstance.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this CustomObjectInstance.

        The custom attributes you have set on the custom object instance.  # noqa: E501

        :param custom_attributes: The custom_attributes of this CustomObjectInstance.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_attributes = custom_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomObjectInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomObjectInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
