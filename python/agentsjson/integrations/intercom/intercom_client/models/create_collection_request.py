# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateCollectionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'translated_content': 'GroupTranslatedContent',
        'parent_id': 'str',
        'help_center_id': 'int'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'translated_content': 'translated_content',
        'parent_id': 'parent_id',
        'help_center_id': 'help_center_id'
    }

    def __init__(self, name=None, description=None, translated_content=None, parent_id=None, help_center_id=None):  # noqa: E501
        """CreateCollectionRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._translated_content = None
        self._parent_id = None
        self._help_center_id = None
        self.discriminator = None
        self.name = name
        if description is not None:
            self.description = description
        if translated_content is not None:
            self.translated_content = translated_content
        if parent_id is not None:
            self.parent_id = parent_id
        if help_center_id is not None:
            self.help_center_id = help_center_id

    @property
    def name(self):
        """Gets the name of this CreateCollectionRequest.  # noqa: E501

        The name of the collection. For multilingual collections, this will be the name of the default language's content.  # noqa: E501

        :return: The name of this CreateCollectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateCollectionRequest.

        The name of the collection. For multilingual collections, this will be the name of the default language's content.  # noqa: E501

        :param name: The name of this CreateCollectionRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateCollectionRequest.  # noqa: E501

        The description of the collection. For multilingual collections, this will be the description of the default language's content.  # noqa: E501

        :return: The description of this CreateCollectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateCollectionRequest.

        The description of the collection. For multilingual collections, this will be the description of the default language's content.  # noqa: E501

        :param description: The description of this CreateCollectionRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def translated_content(self):
        """Gets the translated_content of this CreateCollectionRequest.  # noqa: E501


        :return: The translated_content of this CreateCollectionRequest.  # noqa: E501
        :rtype: GroupTranslatedContent
        """
        return self._translated_content

    @translated_content.setter
    def translated_content(self, translated_content):
        """Sets the translated_content of this CreateCollectionRequest.


        :param translated_content: The translated_content of this CreateCollectionRequest.  # noqa: E501
        :type: GroupTranslatedContent
        """

        self._translated_content = translated_content

    @property
    def parent_id(self):
        """Gets the parent_id of this CreateCollectionRequest.  # noqa: E501

        The id of the parent collection. If `null` then it will be created as the first level collection.  # noqa: E501

        :return: The parent_id of this CreateCollectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this CreateCollectionRequest.

        The id of the parent collection. If `null` then it will be created as the first level collection.  # noqa: E501

        :param parent_id: The parent_id of this CreateCollectionRequest.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def help_center_id(self):
        """Gets the help_center_id of this CreateCollectionRequest.  # noqa: E501

        The id of the help center where the collection will be created. If `null` then it will be created in the default help center.  # noqa: E501

        :return: The help_center_id of this CreateCollectionRequest.  # noqa: E501
        :rtype: int
        """
        return self._help_center_id

    @help_center_id.setter
    def help_center_id(self, help_center_id):
        """Sets the help_center_id of this CreateCollectionRequest.

        The id of the help center where the collection will be created. If `null` then it will be created in the default help center.  # noqa: E501

        :param help_center_id: The help_center_id of this CreateCollectionRequest.  # noqa: E501
        :type: int
        """

        self._help_center_id = help_center_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateCollectionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCollectionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
