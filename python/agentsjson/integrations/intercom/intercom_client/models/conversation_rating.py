# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConversationRating(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rating': 'int',
        'remark': 'str',
        'created_at': 'int',
        'contact': 'ContactReference',
        'teammate': 'Reference'
    }

    attribute_map = {
        'rating': 'rating',
        'remark': 'remark',
        'created_at': 'created_at',
        'contact': 'contact',
        'teammate': 'teammate'
    }

    def __init__(self, rating=None, remark=None, created_at=None, contact=None, teammate=None):  # noqa: E501
        """ConversationRating - a model defined in Swagger"""  # noqa: E501
        self._rating = None
        self._remark = None
        self._created_at = None
        self._contact = None
        self._teammate = None
        self.discriminator = None
        self.rating = rating
        self.remark = remark
        self.created_at = created_at
        self.contact = contact
        self.teammate = teammate

    @property
    def rating(self):
        """Gets the rating of this ConversationRating.  # noqa: E501

        The rating, between 1 and 5, for the conversation.  # noqa: E501

        :return: The rating of this ConversationRating.  # noqa: E501
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this ConversationRating.

        The rating, between 1 and 5, for the conversation.  # noqa: E501

        :param rating: The rating of this ConversationRating.  # noqa: E501
        :type: int
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")  # noqa: E501

        self._rating = rating

    @property
    def remark(self):
        """Gets the remark of this ConversationRating.  # noqa: E501

        An optional field to add a remark to correspond to the number rating  # noqa: E501

        :return: The remark of this ConversationRating.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this ConversationRating.

        An optional field to add a remark to correspond to the number rating  # noqa: E501

        :param remark: The remark of this ConversationRating.  # noqa: E501
        :type: str
        """
        if remark is None:
            raise ValueError("Invalid value for `remark`, must not be `None`")  # noqa: E501

        self._remark = remark

    @property
    def created_at(self):
        """Gets the created_at of this ConversationRating.  # noqa: E501

        The time the rating was requested in the conversation being rated.  # noqa: E501

        :return: The created_at of this ConversationRating.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ConversationRating.

        The time the rating was requested in the conversation being rated.  # noqa: E501

        :param created_at: The created_at of this ConversationRating.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def contact(self):
        """Gets the contact of this ConversationRating.  # noqa: E501


        :return: The contact of this ConversationRating.  # noqa: E501
        :rtype: ContactReference
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this ConversationRating.


        :param contact: The contact of this ConversationRating.  # noqa: E501
        :type: ContactReference
        """
        if contact is None:
            raise ValueError("Invalid value for `contact`, must not be `None`")  # noqa: E501

        self._contact = contact

    @property
    def teammate(self):
        """Gets the teammate of this ConversationRating.  # noqa: E501


        :return: The teammate of this ConversationRating.  # noqa: E501
        :rtype: Reference
        """
        return self._teammate

    @teammate.setter
    def teammate(self, teammate):
        """Sets the teammate of this ConversationRating.


        :param teammate: The teammate of this ConversationRating.  # noqa: E501
        :type: Reference
        """
        if teammate is None:
            raise ValueError("Invalid value for `teammate`, must not be `None`")  # noqa: E501

        self._teammate = teammate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversationRating, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationRating):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
