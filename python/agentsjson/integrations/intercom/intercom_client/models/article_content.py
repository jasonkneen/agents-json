# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ArticleContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'title': 'str',
        'description': 'str',
        'body': 'str',
        'author_id': 'int',
        'state': 'str',
        'created_at': 'int',
        'updated_at': 'int',
        'url': 'str'
    }

    attribute_map = {
        'type': 'type',
        'title': 'title',
        'description': 'description',
        'body': 'body',
        'author_id': 'author_id',
        'state': 'state',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'url': 'url'
    }

    def __init__(self, type=None, title=None, description=None, body=None, author_id=None, state=None, created_at=None, updated_at=None, url=None):  # noqa: E501
        """ArticleContent - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._title = None
        self._description = None
        self._body = None
        self._author_id = None
        self._state = None
        self._created_at = None
        self._updated_at = None
        self._url = None
        self.discriminator = None
        self.type = type
        self.title = title
        self.description = description
        self.body = body
        self.author_id = author_id
        self.state = state
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if url is not None:
            self.url = url

    @property
    def type(self):
        """Gets the type of this ArticleContent.  # noqa: E501

        The type of object - `article_content` .  # noqa: E501

        :return: The type of this ArticleContent.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ArticleContent.

        The type of object - `article_content` .  # noqa: E501

        :param type: The type of this ArticleContent.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["article_content"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def title(self):
        """Gets the title of this ArticleContent.  # noqa: E501

        The title of the article.  # noqa: E501

        :return: The title of this ArticleContent.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ArticleContent.

        The title of the article.  # noqa: E501

        :param title: The title of this ArticleContent.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this ArticleContent.  # noqa: E501

        The description of the article.  # noqa: E501

        :return: The description of this ArticleContent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ArticleContent.

        The description of the article.  # noqa: E501

        :param description: The description of this ArticleContent.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def body(self):
        """Gets the body of this ArticleContent.  # noqa: E501

        The body of the article.  # noqa: E501

        :return: The body of this ArticleContent.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this ArticleContent.

        The body of the article.  # noqa: E501

        :param body: The body of this ArticleContent.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def author_id(self):
        """Gets the author_id of this ArticleContent.  # noqa: E501

        The ID of the author of the article.  # noqa: E501

        :return: The author_id of this ArticleContent.  # noqa: E501
        :rtype: int
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this ArticleContent.

        The ID of the author of the article.  # noqa: E501

        :param author_id: The author_id of this ArticleContent.  # noqa: E501
        :type: int
        """
        if author_id is None:
            raise ValueError("Invalid value for `author_id`, must not be `None`")  # noqa: E501

        self._author_id = author_id

    @property
    def state(self):
        """Gets the state of this ArticleContent.  # noqa: E501

        Whether the article is `published` or is a `draft` .  # noqa: E501

        :return: The state of this ArticleContent.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ArticleContent.

        Whether the article is `published` or is a `draft` .  # noqa: E501

        :param state: The state of this ArticleContent.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["published", "draft"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def created_at(self):
        """Gets the created_at of this ArticleContent.  # noqa: E501

        The time when the article was created (seconds).  # noqa: E501

        :return: The created_at of this ArticleContent.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ArticleContent.

        The time when the article was created (seconds).  # noqa: E501

        :param created_at: The created_at of this ArticleContent.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ArticleContent.  # noqa: E501

        The time when the article was last updated (seconds).  # noqa: E501

        :return: The updated_at of this ArticleContent.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ArticleContent.

        The time when the article was last updated (seconds).  # noqa: E501

        :param updated_at: The updated_at of this ArticleContent.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this ArticleContent.  # noqa: E501

        The URL of the article.  # noqa: E501

        :return: The url of this ArticleContent.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ArticleContent.

        The URL of the article.  # noqa: E501

        :param url: The url of this ArticleContent.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArticleContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArticleContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
