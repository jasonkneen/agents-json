# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssignConversationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message_type': 'str',
        'type': 'str',
        'admin_id': 'str',
        'assignee_id': 'str',
        'body': 'str'
    }

    attribute_map = {
        'message_type': 'message_type',
        'type': 'type',
        'admin_id': 'admin_id',
        'assignee_id': 'assignee_id',
        'body': 'body'
    }

    def __init__(self, message_type=None, type=None, admin_id=None, assignee_id=None, body=None):  # noqa: E501
        """AssignConversationRequest - a model defined in Swagger"""  # noqa: E501
        self._message_type = None
        self._type = None
        self._admin_id = None
        self._assignee_id = None
        self._body = None
        self.discriminator = None
        self.message_type = message_type
        self.type = type
        self.admin_id = admin_id
        self.assignee_id = assignee_id
        if body is not None:
            self.body = body

    @property
    def message_type(self):
        """Gets the message_type of this AssignConversationRequest.  # noqa: E501


        :return: The message_type of this AssignConversationRequest.  # noqa: E501
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this AssignConversationRequest.


        :param message_type: The message_type of this AssignConversationRequest.  # noqa: E501
        :type: str
        """
        if message_type is None:
            raise ValueError("Invalid value for `message_type`, must not be `None`")  # noqa: E501
        allowed_values = ["assignment"]  # noqa: E501
        if message_type not in allowed_values:
            raise ValueError(
                "Invalid value for `message_type` ({0}), must be one of {1}"  # noqa: E501
                .format(message_type, allowed_values)
            )

        self._message_type = message_type

    @property
    def type(self):
        """Gets the type of this AssignConversationRequest.  # noqa: E501


        :return: The type of this AssignConversationRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AssignConversationRequest.


        :param type: The type of this AssignConversationRequest.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["admin", "team"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def admin_id(self):
        """Gets the admin_id of this AssignConversationRequest.  # noqa: E501

        The id of the admin who is performing the action.  # noqa: E501

        :return: The admin_id of this AssignConversationRequest.  # noqa: E501
        :rtype: str
        """
        return self._admin_id

    @admin_id.setter
    def admin_id(self, admin_id):
        """Sets the admin_id of this AssignConversationRequest.

        The id of the admin who is performing the action.  # noqa: E501

        :param admin_id: The admin_id of this AssignConversationRequest.  # noqa: E501
        :type: str
        """
        if admin_id is None:
            raise ValueError("Invalid value for `admin_id`, must not be `None`")  # noqa: E501

        self._admin_id = admin_id

    @property
    def assignee_id(self):
        """Gets the assignee_id of this AssignConversationRequest.  # noqa: E501

        The `id` of the `admin` or `team` which will be assigned the conversation. A conversation can be assigned both an admin and a team.\\nSet `0` if you want this assign to no admin or team (ie. Unassigned).  # noqa: E501

        :return: The assignee_id of this AssignConversationRequest.  # noqa: E501
        :rtype: str
        """
        return self._assignee_id

    @assignee_id.setter
    def assignee_id(self, assignee_id):
        """Sets the assignee_id of this AssignConversationRequest.

        The `id` of the `admin` or `team` which will be assigned the conversation. A conversation can be assigned both an admin and a team.\\nSet `0` if you want this assign to no admin or team (ie. Unassigned).  # noqa: E501

        :param assignee_id: The assignee_id of this AssignConversationRequest.  # noqa: E501
        :type: str
        """
        if assignee_id is None:
            raise ValueError("Invalid value for `assignee_id`, must not be `None`")  # noqa: E501

        self._assignee_id = assignee_id

    @property
    def body(self):
        """Gets the body of this AssignConversationRequest.  # noqa: E501

        Optionally you can send a response in the conversation when it is assigned.  # noqa: E501

        :return: The body of this AssignConversationRequest.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this AssignConversationRequest.

        Optionally you can send a response in the conversation when it is assigned.  # noqa: E501

        :param body: The body of this AssignConversationRequest.  # noqa: E501
        :type: str
        """

        self._body = body

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssignConversationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssignConversationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
