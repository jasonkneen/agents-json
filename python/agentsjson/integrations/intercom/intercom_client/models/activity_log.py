# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActivityLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'performed_by': 'ActivityLogPerformedBy',
        'metadata': 'ActivityLogMetadata',
        'created_at': 'int',
        'activity_type': 'str',
        'activity_description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'performed_by': 'performed_by',
        'metadata': 'metadata',
        'created_at': 'created_at',
        'activity_type': 'activity_type',
        'activity_description': 'activity_description'
    }

    def __init__(self, id=None, performed_by=None, metadata=None, created_at=None, activity_type=None, activity_description=None):  # noqa: E501
        """ActivityLog - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._performed_by = None
        self._metadata = None
        self._created_at = None
        self._activity_type = None
        self._activity_description = None
        self.discriminator = None
        self.id = id
        self.performed_by = performed_by
        if metadata is not None:
            self.metadata = metadata
        if created_at is not None:
            self.created_at = created_at
        self.activity_type = activity_type
        if activity_description is not None:
            self.activity_description = activity_description

    @property
    def id(self):
        """Gets the id of this ActivityLog.  # noqa: E501

        The id representing the activity.  # noqa: E501

        :return: The id of this ActivityLog.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActivityLog.

        The id representing the activity.  # noqa: E501

        :param id: The id of this ActivityLog.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def performed_by(self):
        """Gets the performed_by of this ActivityLog.  # noqa: E501


        :return: The performed_by of this ActivityLog.  # noqa: E501
        :rtype: ActivityLogPerformedBy
        """
        return self._performed_by

    @performed_by.setter
    def performed_by(self, performed_by):
        """Sets the performed_by of this ActivityLog.


        :param performed_by: The performed_by of this ActivityLog.  # noqa: E501
        :type: ActivityLogPerformedBy
        """
        if performed_by is None:
            raise ValueError("Invalid value for `performed_by`, must not be `None`")  # noqa: E501

        self._performed_by = performed_by

    @property
    def metadata(self):
        """Gets the metadata of this ActivityLog.  # noqa: E501


        :return: The metadata of this ActivityLog.  # noqa: E501
        :rtype: ActivityLogMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ActivityLog.


        :param metadata: The metadata of this ActivityLog.  # noqa: E501
        :type: ActivityLogMetadata
        """

        self._metadata = metadata

    @property
    def created_at(self):
        """Gets the created_at of this ActivityLog.  # noqa: E501

        The time the activity was created.  # noqa: E501

        :return: The created_at of this ActivityLog.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ActivityLog.

        The time the activity was created.  # noqa: E501

        :param created_at: The created_at of this ActivityLog.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def activity_type(self):
        """Gets the activity_type of this ActivityLog.  # noqa: E501


        :return: The activity_type of this ActivityLog.  # noqa: E501
        :rtype: str
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this ActivityLog.


        :param activity_type: The activity_type of this ActivityLog.  # noqa: E501
        :type: str
        """
        if activity_type is None:
            raise ValueError("Invalid value for `activity_type`, must not be `None`")  # noqa: E501
        allowed_values = ["admin_assignment_limit_change", "admin_away_mode_change", "admin_deletion", "admin_deprovisioned", "admin_impersonation_end", "admin_impersonation_start", "admin_invite_change", "admin_invite_creation", "admin_invite_deletion", "admin_login_failure", "admin_login_success", "admin_logout", "admin_password_reset_request", "admin_password_reset_success", "admin_permission_change", "admin_provisioned", "admin_two_factor_auth_change", "admin_unauthorized_sign_in_method", "app_admin_join", "app_authentication_method_change", "app_data_deletion", "app_data_export", "app_google_sso_domain_change", "app_identity_verification_change", "app_name_change", "app_outbound_address_change", "app_package_installation", "app_package_token_regeneration", "app_package_uninstallation", "app_team_creation", "app_team_deletion", "app_team_membership_modification", "app_timezone_change", "app_webhook_creation", "app_webhook_deletion", "articles_in_messenger_enabled_change", "bulk_delete", "bulk_export", "campaign_deletion", "campaign_state_change", "conversation_part_deletion", "conversation_topic_change", "conversation_topic_creation", "conversation_topic_deletion", "help_center_settings_change", "inbound_conversations_change", "inbox_access_change", "message_deletion", "message_state_change", "messenger_look_and_feel_change", "messenger_search_required_change", "messenger_spaces_change", "office_hours_change", "role_change", "role_creation", "role_deletion", "ruleset_activation_title_preview", "ruleset_creation", "ruleset_deletion", "search_browse_enabled_change", "search_browse_required_change", "seat_change", "seat_revoke", "security_settings_change", "temporary_expectation_change", "upfront_email_collection_change", "welcome_message_change"]  # noqa: E501
        if activity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `activity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(activity_type, allowed_values)
            )

        self._activity_type = activity_type

    @property
    def activity_description(self):
        """Gets the activity_description of this ActivityLog.  # noqa: E501

        A sentence or two describing the activity.  # noqa: E501

        :return: The activity_description of this ActivityLog.  # noqa: E501
        :rtype: str
        """
        return self._activity_description

    @activity_description.setter
    def activity_description(self, activity_description):
        """Sets the activity_description of this ActivityLog.

        A sentence or two describing the activity.  # noqa: E501

        :param activity_description: The activity_description of this ActivityLog.  # noqa: E501
        :type: str
        """

        self._activity_description = activity_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
