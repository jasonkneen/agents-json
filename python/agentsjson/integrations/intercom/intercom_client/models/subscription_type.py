# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubscriptionType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'state': 'str',
        'default_translation': 'Translation',
        'translations': 'list[Translation]',
        'consent_type': 'str',
        'content_types': 'list[str]'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'state': 'state',
        'default_translation': 'default_translation',
        'translations': 'translations',
        'consent_type': 'consent_type',
        'content_types': 'content_types'
    }

    def __init__(self, type=None, id=None, state=None, default_translation=None, translations=None, consent_type=None, content_types=None):  # noqa: E501
        """SubscriptionType - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self._state = None
        self._default_translation = None
        self._translations = None
        self._consent_type = None
        self._content_types = None
        self.discriminator = None
        self.type = type
        self.id = id
        self.state = state
        self.default_translation = default_translation
        self.translations = translations
        self.consent_type = consent_type
        self.content_types = content_types

    @property
    def type(self):
        """Gets the type of this SubscriptionType.  # noqa: E501

        The type of the object - subscription  # noqa: E501

        :return: The type of this SubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SubscriptionType.

        The type of the object - subscription  # noqa: E501

        :param type: The type of this SubscriptionType.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def id(self):
        """Gets the id of this SubscriptionType.  # noqa: E501

        The unique identifier representing the subscription type.  # noqa: E501

        :return: The id of this SubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionType.

        The unique identifier representing the subscription type.  # noqa: E501

        :param id: The id of this SubscriptionType.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def state(self):
        """Gets the state of this SubscriptionType.  # noqa: E501

        The state of the subscription type.  # noqa: E501

        :return: The state of this SubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SubscriptionType.

        The state of the subscription type.  # noqa: E501

        :param state: The state of this SubscriptionType.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["live", "draft", "archived"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def default_translation(self):
        """Gets the default_translation of this SubscriptionType.  # noqa: E501


        :return: The default_translation of this SubscriptionType.  # noqa: E501
        :rtype: Translation
        """
        return self._default_translation

    @default_translation.setter
    def default_translation(self, default_translation):
        """Sets the default_translation of this SubscriptionType.


        :param default_translation: The default_translation of this SubscriptionType.  # noqa: E501
        :type: Translation
        """
        if default_translation is None:
            raise ValueError("Invalid value for `default_translation`, must not be `None`")  # noqa: E501

        self._default_translation = default_translation

    @property
    def translations(self):
        """Gets the translations of this SubscriptionType.  # noqa: E501

        An array of translations objects with the localised version of the subscription type in each available locale within your translation settings.  # noqa: E501

        :return: The translations of this SubscriptionType.  # noqa: E501
        :rtype: list[Translation]
        """
        return self._translations

    @translations.setter
    def translations(self, translations):
        """Sets the translations of this SubscriptionType.

        An array of translations objects with the localised version of the subscription type in each available locale within your translation settings.  # noqa: E501

        :param translations: The translations of this SubscriptionType.  # noqa: E501
        :type: list[Translation]
        """
        if translations is None:
            raise ValueError("Invalid value for `translations`, must not be `None`")  # noqa: E501

        self._translations = translations

    @property
    def consent_type(self):
        """Gets the consent_type of this SubscriptionType.  # noqa: E501

        Describes the type of consent.  # noqa: E501

        :return: The consent_type of this SubscriptionType.  # noqa: E501
        :rtype: str
        """
        return self._consent_type

    @consent_type.setter
    def consent_type(self, consent_type):
        """Sets the consent_type of this SubscriptionType.

        Describes the type of consent.  # noqa: E501

        :param consent_type: The consent_type of this SubscriptionType.  # noqa: E501
        :type: str
        """
        if consent_type is None:
            raise ValueError("Invalid value for `consent_type`, must not be `None`")  # noqa: E501
        allowed_values = ["opt_out", "opt_in"]  # noqa: E501
        if consent_type not in allowed_values:
            raise ValueError(
                "Invalid value for `consent_type` ({0}), must be one of {1}"  # noqa: E501
                .format(consent_type, allowed_values)
            )

        self._consent_type = consent_type

    @property
    def content_types(self):
        """Gets the content_types of this SubscriptionType.  # noqa: E501

        The message types that this subscription supports - can contain `email` or `sms_message`.  # noqa: E501

        :return: The content_types of this SubscriptionType.  # noqa: E501
        :rtype: list[str]
        """
        return self._content_types

    @content_types.setter
    def content_types(self, content_types):
        """Sets the content_types of this SubscriptionType.

        The message types that this subscription supports - can contain `email` or `sms_message`.  # noqa: E501

        :param content_types: The content_types of this SubscriptionType.  # noqa: E501
        :type: list[str]
        """
        if content_types is None:
            raise ValueError("Invalid value for `content_types`, must not be `None`")  # noqa: E501
        allowed_values = ["email", "sms_message"]  # noqa: E501
        if not set(content_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `content_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(content_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._content_types = content_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
