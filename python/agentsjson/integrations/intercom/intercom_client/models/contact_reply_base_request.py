# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContactReplyBaseRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message_type': 'str',
        'type': 'str',
        'body': 'str',
        'created_at': 'int',
        'attachment_urls': 'list[str]'
    }

    attribute_map = {
        'message_type': 'message_type',
        'type': 'type',
        'body': 'body',
        'created_at': 'created_at',
        'attachment_urls': 'attachment_urls'
    }

    def __init__(self, message_type=None, type=None, body=None, created_at=None, attachment_urls=None):  # noqa: E501
        """ContactReplyBaseRequest - a model defined in Swagger"""  # noqa: E501
        self._message_type = None
        self._type = None
        self._body = None
        self._created_at = None
        self._attachment_urls = None
        self.discriminator = None
        self.message_type = message_type
        self.type = type
        self.body = body
        if created_at is not None:
            self.created_at = created_at
        if attachment_urls is not None:
            self.attachment_urls = attachment_urls

    @property
    def message_type(self):
        """Gets the message_type of this ContactReplyBaseRequest.  # noqa: E501


        :return: The message_type of this ContactReplyBaseRequest.  # noqa: E501
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this ContactReplyBaseRequest.


        :param message_type: The message_type of this ContactReplyBaseRequest.  # noqa: E501
        :type: str
        """
        if message_type is None:
            raise ValueError("Invalid value for `message_type`, must not be `None`")  # noqa: E501
        allowed_values = ["comment"]  # noqa: E501
        if message_type not in allowed_values:
            raise ValueError(
                "Invalid value for `message_type` ({0}), must be one of {1}"  # noqa: E501
                .format(message_type, allowed_values)
            )

        self._message_type = message_type

    @property
    def type(self):
        """Gets the type of this ContactReplyBaseRequest.  # noqa: E501


        :return: The type of this ContactReplyBaseRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ContactReplyBaseRequest.


        :param type: The type of this ContactReplyBaseRequest.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["user"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def body(self):
        """Gets the body of this ContactReplyBaseRequest.  # noqa: E501

        The text body of the comment.  # noqa: E501

        :return: The body of this ContactReplyBaseRequest.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this ContactReplyBaseRequest.

        The text body of the comment.  # noqa: E501

        :param body: The body of this ContactReplyBaseRequest.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def created_at(self):
        """Gets the created_at of this ContactReplyBaseRequest.  # noqa: E501

        The time the reply was created. If not provided, the current time will be used.  # noqa: E501

        :return: The created_at of this ContactReplyBaseRequest.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ContactReplyBaseRequest.

        The time the reply was created. If not provided, the current time will be used.  # noqa: E501

        :param created_at: The created_at of this ContactReplyBaseRequest.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def attachment_urls(self):
        """Gets the attachment_urls of this ContactReplyBaseRequest.  # noqa: E501

        A list of image URLs that will be added as attachments. You can include up to 10 URLs.  # noqa: E501

        :return: The attachment_urls of this ContactReplyBaseRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._attachment_urls

    @attachment_urls.setter
    def attachment_urls(self, attachment_urls):
        """Sets the attachment_urls of this ContactReplyBaseRequest.

        A list of image URLs that will be added as attachments. You can include up to 10 URLs.  # noqa: E501

        :param attachment_urls: The attachment_urls of this ContactReplyBaseRequest.  # noqa: E501
        :type: list[str]
        """

        self._attachment_urls = attachment_urls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactReplyBaseRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactReplyBaseRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
