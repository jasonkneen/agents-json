# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Collection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'workspace_id': 'str',
        'name': 'str',
        'description': 'str',
        'created_at': 'int',
        'updated_at': 'int',
        'url': 'str',
        'icon': 'str',
        'order': 'int',
        'default_locale': 'str',
        'translated_content': 'GroupTranslatedContent',
        'parent_id': 'str',
        'help_center_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'workspace_id': 'workspace_id',
        'name': 'name',
        'description': 'description',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'url': 'url',
        'icon': 'icon',
        'order': 'order',
        'default_locale': 'default_locale',
        'translated_content': 'translated_content',
        'parent_id': 'parent_id',
        'help_center_id': 'help_center_id'
    }

    def __init__(self, id=None, workspace_id=None, name=None, description=None, created_at=None, updated_at=None, url=None, icon=None, order=None, default_locale=None, translated_content=None, parent_id=None, help_center_id=None):  # noqa: E501
        """Collection - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._workspace_id = None
        self._name = None
        self._description = None
        self._created_at = None
        self._updated_at = None
        self._url = None
        self._icon = None
        self._order = None
        self._default_locale = None
        self._translated_content = None
        self._parent_id = None
        self._help_center_id = None
        self.discriminator = None
        self.id = id
        self.workspace_id = workspace_id
        self.name = name
        if description is not None:
            self.description = description
        self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if url is not None:
            self.url = url
        if icon is not None:
            self.icon = icon
        self.order = order
        self.default_locale = default_locale
        if translated_content is not None:
            self.translated_content = translated_content
        if parent_id is not None:
            self.parent_id = parent_id
        if help_center_id is not None:
            self.help_center_id = help_center_id

    @property
    def id(self):
        """Gets the id of this Collection.  # noqa: E501

        The unique identifier for the collection which is given by Intercom.  # noqa: E501

        :return: The id of this Collection.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Collection.

        The unique identifier for the collection which is given by Intercom.  # noqa: E501

        :param id: The id of this Collection.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this Collection.  # noqa: E501

        The id of the workspace which the collection belongs to.  # noqa: E501

        :return: The workspace_id of this Collection.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this Collection.

        The id of the workspace which the collection belongs to.  # noqa: E501

        :param workspace_id: The workspace_id of this Collection.  # noqa: E501
        :type: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")  # noqa: E501

        self._workspace_id = workspace_id

    @property
    def name(self):
        """Gets the name of this Collection.  # noqa: E501

        The name of the collection. For multilingual collections, this will be the name of the default language's content.  # noqa: E501

        :return: The name of this Collection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Collection.

        The name of the collection. For multilingual collections, this will be the name of the default language's content.  # noqa: E501

        :param name: The name of this Collection.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Collection.  # noqa: E501

        The description of the collection. For multilingual help centers, this will be the description of the collection for the default language.  # noqa: E501

        :return: The description of this Collection.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Collection.

        The description of the collection. For multilingual help centers, this will be the description of the collection for the default language.  # noqa: E501

        :param description: The description of this Collection.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created_at(self):
        """Gets the created_at of this Collection.  # noqa: E501

        The time when the article was created (seconds). For multilingual articles, this will be the timestamp of creation of the default language's content.  # noqa: E501

        :return: The created_at of this Collection.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Collection.

        The time when the article was created (seconds). For multilingual articles, this will be the timestamp of creation of the default language's content.  # noqa: E501

        :param created_at: The created_at of this Collection.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Collection.  # noqa: E501

        The time when the article was last updated (seconds). For multilingual articles, this will be the timestamp of last update of the default language's content.  # noqa: E501

        :return: The updated_at of this Collection.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Collection.

        The time when the article was last updated (seconds). For multilingual articles, this will be the timestamp of last update of the default language's content.  # noqa: E501

        :param updated_at: The updated_at of this Collection.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this Collection.  # noqa: E501

        The URL of the collection. For multilingual help centers, this will be the URL of the collection for the default language.  # noqa: E501

        :return: The url of this Collection.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Collection.

        The URL of the collection. For multilingual help centers, this will be the URL of the collection for the default language.  # noqa: E501

        :param url: The url of this Collection.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def icon(self):
        """Gets the icon of this Collection.  # noqa: E501

        The icon of the collection.  # noqa: E501

        :return: The icon of this Collection.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this Collection.

        The icon of the collection.  # noqa: E501

        :param icon: The icon of this Collection.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def order(self):
        """Gets the order of this Collection.  # noqa: E501

        The order of the section in relation to others sections within a collection. Values go from `0` upwards. `0` is the default if there's no order.  # noqa: E501

        :return: The order of this Collection.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Collection.

        The order of the section in relation to others sections within a collection. Values go from `0` upwards. `0` is the default if there's no order.  # noqa: E501

        :param order: The order of this Collection.  # noqa: E501
        :type: int
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")  # noqa: E501

        self._order = order

    @property
    def default_locale(self):
        """Gets the default_locale of this Collection.  # noqa: E501

        The default locale of the help center. This field is only returned for multilingual help centers.  # noqa: E501

        :return: The default_locale of this Collection.  # noqa: E501
        :rtype: str
        """
        return self._default_locale

    @default_locale.setter
    def default_locale(self, default_locale):
        """Sets the default_locale of this Collection.

        The default locale of the help center. This field is only returned for multilingual help centers.  # noqa: E501

        :param default_locale: The default_locale of this Collection.  # noqa: E501
        :type: str
        """
        if default_locale is None:
            raise ValueError("Invalid value for `default_locale`, must not be `None`")  # noqa: E501

        self._default_locale = default_locale

    @property
    def translated_content(self):
        """Gets the translated_content of this Collection.  # noqa: E501


        :return: The translated_content of this Collection.  # noqa: E501
        :rtype: GroupTranslatedContent
        """
        return self._translated_content

    @translated_content.setter
    def translated_content(self, translated_content):
        """Sets the translated_content of this Collection.


        :param translated_content: The translated_content of this Collection.  # noqa: E501
        :type: GroupTranslatedContent
        """

        self._translated_content = translated_content

    @property
    def parent_id(self):
        """Gets the parent_id of this Collection.  # noqa: E501

        The id of the parent collection. If `null` then it is the first level collection.  # noqa: E501

        :return: The parent_id of this Collection.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Collection.

        The id of the parent collection. If `null` then it is the first level collection.  # noqa: E501

        :param parent_id: The parent_id of this Collection.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def help_center_id(self):
        """Gets the help_center_id of this Collection.  # noqa: E501

        The id of the help center the collection is in.  # noqa: E501

        :return: The help_center_id of this Collection.  # noqa: E501
        :rtype: int
        """
        return self._help_center_id

    @help_center_id.setter
    def help_center_id(self, help_center_id):
        """Sets the help_center_id of this Collection.

        The id of the help center the collection is in.  # noqa: E501

        :param help_center_id: The help_center_id of this Collection.  # noqa: E501
        :type: int
        """

        self._help_center_id = help_center_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Collection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Collection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
