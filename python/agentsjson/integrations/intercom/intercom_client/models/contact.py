# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Contact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'external_id': 'str',
        'workspace_id': 'str',
        'role': 'str',
        'email': 'str',
        'email_domain': 'str',
        'phone': 'str',
        'formatted_phone': 'str',
        'name': 'str',
        'owner_id': 'int',
        'has_hard_bounced': 'bool',
        'marked_email_as_spam': 'bool',
        'unsubscribed_from_emails': 'bool',
        'created_at': 'int',
        'updated_at': 'int',
        'signed_up_at': 'int',
        'last_seen_at': 'int',
        'last_replied_at': 'int',
        'last_contacted_at': 'int',
        'last_email_opened_at': 'int',
        'last_email_clicked_at': 'int',
        'language_override': 'str',
        'browser': 'str',
        'browser_version': 'str',
        'browser_language': 'str',
        'os': 'str',
        'android_app_name': 'str',
        'android_app_version': 'str',
        'android_device': 'str',
        'android_os_version': 'str',
        'android_sdk_version': 'str',
        'android_last_seen_at': 'int',
        'ios_app_name': 'str',
        'ios_app_version': 'str',
        'ios_device': 'str',
        'ios_os_version': 'str',
        'ios_sdk_version': 'str',
        'ios_last_seen_at': 'int',
        'custom_attributes': 'object',
        'avatar': 'ContactAvatar',
        'tags': 'ContactTags',
        'notes': 'ContactNotes',
        'companies': 'ContactCompanies',
        'location': 'ContactLocation',
        'social_profiles': 'ContactSocialProfiles'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'external_id': 'external_id',
        'workspace_id': 'workspace_id',
        'role': 'role',
        'email': 'email',
        'email_domain': 'email_domain',
        'phone': 'phone',
        'formatted_phone': 'formatted_phone',
        'name': 'name',
        'owner_id': 'owner_id',
        'has_hard_bounced': 'has_hard_bounced',
        'marked_email_as_spam': 'marked_email_as_spam',
        'unsubscribed_from_emails': 'unsubscribed_from_emails',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'signed_up_at': 'signed_up_at',
        'last_seen_at': 'last_seen_at',
        'last_replied_at': 'last_replied_at',
        'last_contacted_at': 'last_contacted_at',
        'last_email_opened_at': 'last_email_opened_at',
        'last_email_clicked_at': 'last_email_clicked_at',
        'language_override': 'language_override',
        'browser': 'browser',
        'browser_version': 'browser_version',
        'browser_language': 'browser_language',
        'os': 'os',
        'android_app_name': 'android_app_name',
        'android_app_version': 'android_app_version',
        'android_device': 'android_device',
        'android_os_version': 'android_os_version',
        'android_sdk_version': 'android_sdk_version',
        'android_last_seen_at': 'android_last_seen_at',
        'ios_app_name': 'ios_app_name',
        'ios_app_version': 'ios_app_version',
        'ios_device': 'ios_device',
        'ios_os_version': 'ios_os_version',
        'ios_sdk_version': 'ios_sdk_version',
        'ios_last_seen_at': 'ios_last_seen_at',
        'custom_attributes': 'custom_attributes',
        'avatar': 'avatar',
        'tags': 'tags',
        'notes': 'notes',
        'companies': 'companies',
        'location': 'location',
        'social_profiles': 'social_profiles'
    }

    def __init__(self, type=None, id=None, external_id=None, workspace_id=None, role=None, email=None, email_domain=None, phone=None, formatted_phone=None, name=None, owner_id=None, has_hard_bounced=None, marked_email_as_spam=None, unsubscribed_from_emails=None, created_at=None, updated_at=None, signed_up_at=None, last_seen_at=None, last_replied_at=None, last_contacted_at=None, last_email_opened_at=None, last_email_clicked_at=None, language_override=None, browser=None, browser_version=None, browser_language=None, os=None, android_app_name=None, android_app_version=None, android_device=None, android_os_version=None, android_sdk_version=None, android_last_seen_at=None, ios_app_name=None, ios_app_version=None, ios_device=None, ios_os_version=None, ios_sdk_version=None, ios_last_seen_at=None, custom_attributes=None, avatar=None, tags=None, notes=None, companies=None, location=None, social_profiles=None):  # noqa: E501
        """Contact - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self._external_id = None
        self._workspace_id = None
        self._role = None
        self._email = None
        self._email_domain = None
        self._phone = None
        self._formatted_phone = None
        self._name = None
        self._owner_id = None
        self._has_hard_bounced = None
        self._marked_email_as_spam = None
        self._unsubscribed_from_emails = None
        self._created_at = None
        self._updated_at = None
        self._signed_up_at = None
        self._last_seen_at = None
        self._last_replied_at = None
        self._last_contacted_at = None
        self._last_email_opened_at = None
        self._last_email_clicked_at = None
        self._language_override = None
        self._browser = None
        self._browser_version = None
        self._browser_language = None
        self._os = None
        self._android_app_name = None
        self._android_app_version = None
        self._android_device = None
        self._android_os_version = None
        self._android_sdk_version = None
        self._android_last_seen_at = None
        self._ios_app_name = None
        self._ios_app_version = None
        self._ios_device = None
        self._ios_os_version = None
        self._ios_sdk_version = None
        self._ios_last_seen_at = None
        self._custom_attributes = None
        self._avatar = None
        self._tags = None
        self._notes = None
        self._companies = None
        self._location = None
        self._social_profiles = None
        self.discriminator = None
        if type is not None:
            self.type = type
        self.id = id
        self.external_id = external_id
        self.workspace_id = workspace_id
        self.role = role
        if email is not None:
            self.email = email
        if email_domain is not None:
            self.email_domain = email_domain
        self.phone = phone
        if formatted_phone is not None:
            self.formatted_phone = formatted_phone
        self.name = name
        self.owner_id = owner_id
        self.has_hard_bounced = has_hard_bounced
        self.marked_email_as_spam = marked_email_as_spam
        self.unsubscribed_from_emails = unsubscribed_from_emails
        self.created_at = created_at
        self.updated_at = updated_at
        self.signed_up_at = signed_up_at
        self.last_seen_at = last_seen_at
        self.last_replied_at = last_replied_at
        self.last_contacted_at = last_contacted_at
        self.last_email_opened_at = last_email_opened_at
        self.last_email_clicked_at = last_email_clicked_at
        self.language_override = language_override
        self.browser = browser
        self.browser_version = browser_version
        self.browser_language = browser_language
        self.os = os
        if android_app_name is not None:
            self.android_app_name = android_app_name
        if android_app_version is not None:
            self.android_app_version = android_app_version
        if android_device is not None:
            self.android_device = android_device
        if android_os_version is not None:
            self.android_os_version = android_os_version
        if android_sdk_version is not None:
            self.android_sdk_version = android_sdk_version
        if android_last_seen_at is not None:
            self.android_last_seen_at = android_last_seen_at
        if ios_app_name is not None:
            self.ios_app_name = ios_app_name
        if ios_app_version is not None:
            self.ios_app_version = ios_app_version
        if ios_device is not None:
            self.ios_device = ios_device
        if ios_os_version is not None:
            self.ios_os_version = ios_os_version
        if ios_sdk_version is not None:
            self.ios_sdk_version = ios_sdk_version
        if ios_last_seen_at is not None:
            self.ios_last_seen_at = ios_last_seen_at
        if custom_attributes is not None:
            self.custom_attributes = custom_attributes
        self.avatar = avatar
        if tags is not None:
            self.tags = tags
        if notes is not None:
            self.notes = notes
        if companies is not None:
            self.companies = companies
        self.location = location
        self.social_profiles = social_profiles

    @property
    def type(self):
        """Gets the type of this Contact.  # noqa: E501

        The type of object.  # noqa: E501

        :return: The type of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Contact.

        The type of object.  # noqa: E501

        :param type: The type of this Contact.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def id(self):
        """Gets the id of this Contact.  # noqa: E501

        The unique identifier for the contact which is given by Intercom.  # noqa: E501

        :return: The id of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Contact.

        The unique identifier for the contact which is given by Intercom.  # noqa: E501

        :param id: The id of this Contact.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def external_id(self):
        """Gets the external_id of this Contact.  # noqa: E501

        The unique identifier for the contact which is provided by the Client.  # noqa: E501

        :return: The external_id of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Contact.

        The unique identifier for the contact which is provided by the Client.  # noqa: E501

        :param external_id: The external_id of this Contact.  # noqa: E501
        :type: str
        """
        if external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")  # noqa: E501

        self._external_id = external_id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this Contact.  # noqa: E501

        The id of the workspace which the contact belongs to.  # noqa: E501

        :return: The workspace_id of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this Contact.

        The id of the workspace which the contact belongs to.  # noqa: E501

        :param workspace_id: The workspace_id of this Contact.  # noqa: E501
        :type: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")  # noqa: E501

        self._workspace_id = workspace_id

    @property
    def role(self):
        """Gets the role of this Contact.  # noqa: E501

        The role of the contact.  # noqa: E501

        :return: The role of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Contact.

        The role of the contact.  # noqa: E501

        :param role: The role of this Contact.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    @property
    def email(self):
        """Gets the email of this Contact.  # noqa: E501

        The contact's email.  # noqa: E501

        :return: The email of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Contact.

        The contact's email.  # noqa: E501

        :param email: The email of this Contact.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def email_domain(self):
        """Gets the email_domain of this Contact.  # noqa: E501

        The contact's email domain.  # noqa: E501

        :return: The email_domain of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._email_domain

    @email_domain.setter
    def email_domain(self, email_domain):
        """Sets the email_domain of this Contact.

        The contact's email domain.  # noqa: E501

        :param email_domain: The email_domain of this Contact.  # noqa: E501
        :type: str
        """

        self._email_domain = email_domain

    @property
    def phone(self):
        """Gets the phone of this Contact.  # noqa: E501

        The contacts phone.  # noqa: E501

        :return: The phone of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Contact.

        The contacts phone.  # noqa: E501

        :param phone: The phone of this Contact.  # noqa: E501
        :type: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    @property
    def formatted_phone(self):
        """Gets the formatted_phone of this Contact.  # noqa: E501

        The contacts phone number normalized to the E164 format  # noqa: E501

        :return: The formatted_phone of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._formatted_phone

    @formatted_phone.setter
    def formatted_phone(self, formatted_phone):
        """Sets the formatted_phone of this Contact.

        The contacts phone number normalized to the E164 format  # noqa: E501

        :param formatted_phone: The formatted_phone of this Contact.  # noqa: E501
        :type: str
        """

        self._formatted_phone = formatted_phone

    @property
    def name(self):
        """Gets the name of this Contact.  # noqa: E501

        The contacts name.  # noqa: E501

        :return: The name of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Contact.

        The contacts name.  # noqa: E501

        :param name: The name of this Contact.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def owner_id(self):
        """Gets the owner_id of this Contact.  # noqa: E501

        The id of an admin that has been assigned account ownership of the contact.  # noqa: E501

        :return: The owner_id of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Contact.

        The id of an admin that has been assigned account ownership of the contact.  # noqa: E501

        :param owner_id: The owner_id of this Contact.  # noqa: E501
        :type: int
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")  # noqa: E501

        self._owner_id = owner_id

    @property
    def has_hard_bounced(self):
        """Gets the has_hard_bounced of this Contact.  # noqa: E501

        Whether the contact has had an email sent to them hard bounce.  # noqa: E501

        :return: The has_hard_bounced of this Contact.  # noqa: E501
        :rtype: bool
        """
        return self._has_hard_bounced

    @has_hard_bounced.setter
    def has_hard_bounced(self, has_hard_bounced):
        """Sets the has_hard_bounced of this Contact.

        Whether the contact has had an email sent to them hard bounce.  # noqa: E501

        :param has_hard_bounced: The has_hard_bounced of this Contact.  # noqa: E501
        :type: bool
        """
        if has_hard_bounced is None:
            raise ValueError("Invalid value for `has_hard_bounced`, must not be `None`")  # noqa: E501

        self._has_hard_bounced = has_hard_bounced

    @property
    def marked_email_as_spam(self):
        """Gets the marked_email_as_spam of this Contact.  # noqa: E501

        Whether the contact has marked an email sent to them as spam.  # noqa: E501

        :return: The marked_email_as_spam of this Contact.  # noqa: E501
        :rtype: bool
        """
        return self._marked_email_as_spam

    @marked_email_as_spam.setter
    def marked_email_as_spam(self, marked_email_as_spam):
        """Sets the marked_email_as_spam of this Contact.

        Whether the contact has marked an email sent to them as spam.  # noqa: E501

        :param marked_email_as_spam: The marked_email_as_spam of this Contact.  # noqa: E501
        :type: bool
        """
        if marked_email_as_spam is None:
            raise ValueError("Invalid value for `marked_email_as_spam`, must not be `None`")  # noqa: E501

        self._marked_email_as_spam = marked_email_as_spam

    @property
    def unsubscribed_from_emails(self):
        """Gets the unsubscribed_from_emails of this Contact.  # noqa: E501

        Whether the contact is unsubscribed from emails.  # noqa: E501

        :return: The unsubscribed_from_emails of this Contact.  # noqa: E501
        :rtype: bool
        """
        return self._unsubscribed_from_emails

    @unsubscribed_from_emails.setter
    def unsubscribed_from_emails(self, unsubscribed_from_emails):
        """Sets the unsubscribed_from_emails of this Contact.

        Whether the contact is unsubscribed from emails.  # noqa: E501

        :param unsubscribed_from_emails: The unsubscribed_from_emails of this Contact.  # noqa: E501
        :type: bool
        """
        if unsubscribed_from_emails is None:
            raise ValueError("Invalid value for `unsubscribed_from_emails`, must not be `None`")  # noqa: E501

        self._unsubscribed_from_emails = unsubscribed_from_emails

    @property
    def created_at(self):
        """Gets the created_at of this Contact.  # noqa: E501

        (UNIX timestamp) The time when the contact was created.  # noqa: E501

        :return: The created_at of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Contact.

        (UNIX timestamp) The time when the contact was created.  # noqa: E501

        :param created_at: The created_at of this Contact.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Contact.  # noqa: E501

        (UNIX timestamp) The time when the contact was last updated.  # noqa: E501

        :return: The updated_at of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Contact.

        (UNIX timestamp) The time when the contact was last updated.  # noqa: E501

        :param updated_at: The updated_at of this Contact.  # noqa: E501
        :type: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def signed_up_at(self):
        """Gets the signed_up_at of this Contact.  # noqa: E501

        (UNIX timestamp) The time specified for when a contact signed up.  # noqa: E501

        :return: The signed_up_at of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._signed_up_at

    @signed_up_at.setter
    def signed_up_at(self, signed_up_at):
        """Sets the signed_up_at of this Contact.

        (UNIX timestamp) The time specified for when a contact signed up.  # noqa: E501

        :param signed_up_at: The signed_up_at of this Contact.  # noqa: E501
        :type: int
        """
        if signed_up_at is None:
            raise ValueError("Invalid value for `signed_up_at`, must not be `None`")  # noqa: E501

        self._signed_up_at = signed_up_at

    @property
    def last_seen_at(self):
        """Gets the last_seen_at of this Contact.  # noqa: E501

        (UNIX timestamp) The time when the contact was last seen (either where the Intercom Messenger was installed or when specified manually).  # noqa: E501

        :return: The last_seen_at of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._last_seen_at

    @last_seen_at.setter
    def last_seen_at(self, last_seen_at):
        """Sets the last_seen_at of this Contact.

        (UNIX timestamp) The time when the contact was last seen (either where the Intercom Messenger was installed or when specified manually).  # noqa: E501

        :param last_seen_at: The last_seen_at of this Contact.  # noqa: E501
        :type: int
        """
        if last_seen_at is None:
            raise ValueError("Invalid value for `last_seen_at`, must not be `None`")  # noqa: E501

        self._last_seen_at = last_seen_at

    @property
    def last_replied_at(self):
        """Gets the last_replied_at of this Contact.  # noqa: E501

        (UNIX timestamp) The time when the contact last messaged in.  # noqa: E501

        :return: The last_replied_at of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._last_replied_at

    @last_replied_at.setter
    def last_replied_at(self, last_replied_at):
        """Sets the last_replied_at of this Contact.

        (UNIX timestamp) The time when the contact last messaged in.  # noqa: E501

        :param last_replied_at: The last_replied_at of this Contact.  # noqa: E501
        :type: int
        """
        if last_replied_at is None:
            raise ValueError("Invalid value for `last_replied_at`, must not be `None`")  # noqa: E501

        self._last_replied_at = last_replied_at

    @property
    def last_contacted_at(self):
        """Gets the last_contacted_at of this Contact.  # noqa: E501

        (UNIX timestamp) The time when the contact was last messaged.  # noqa: E501

        :return: The last_contacted_at of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._last_contacted_at

    @last_contacted_at.setter
    def last_contacted_at(self, last_contacted_at):
        """Sets the last_contacted_at of this Contact.

        (UNIX timestamp) The time when the contact was last messaged.  # noqa: E501

        :param last_contacted_at: The last_contacted_at of this Contact.  # noqa: E501
        :type: int
        """
        if last_contacted_at is None:
            raise ValueError("Invalid value for `last_contacted_at`, must not be `None`")  # noqa: E501

        self._last_contacted_at = last_contacted_at

    @property
    def last_email_opened_at(self):
        """Gets the last_email_opened_at of this Contact.  # noqa: E501

        (UNIX timestamp) The time when the contact last opened an email.  # noqa: E501

        :return: The last_email_opened_at of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._last_email_opened_at

    @last_email_opened_at.setter
    def last_email_opened_at(self, last_email_opened_at):
        """Sets the last_email_opened_at of this Contact.

        (UNIX timestamp) The time when the contact last opened an email.  # noqa: E501

        :param last_email_opened_at: The last_email_opened_at of this Contact.  # noqa: E501
        :type: int
        """
        if last_email_opened_at is None:
            raise ValueError("Invalid value for `last_email_opened_at`, must not be `None`")  # noqa: E501

        self._last_email_opened_at = last_email_opened_at

    @property
    def last_email_clicked_at(self):
        """Gets the last_email_clicked_at of this Contact.  # noqa: E501

        (UNIX timestamp) The time when the contact last clicked a link in an email.  # noqa: E501

        :return: The last_email_clicked_at of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._last_email_clicked_at

    @last_email_clicked_at.setter
    def last_email_clicked_at(self, last_email_clicked_at):
        """Sets the last_email_clicked_at of this Contact.

        (UNIX timestamp) The time when the contact last clicked a link in an email.  # noqa: E501

        :param last_email_clicked_at: The last_email_clicked_at of this Contact.  # noqa: E501
        :type: int
        """
        if last_email_clicked_at is None:
            raise ValueError("Invalid value for `last_email_clicked_at`, must not be `None`")  # noqa: E501

        self._last_email_clicked_at = last_email_clicked_at

    @property
    def language_override(self):
        """Gets the language_override of this Contact.  # noqa: E501

        A preferred language setting for the contact, used by the Intercom Messenger even if their browser settings change.  # noqa: E501

        :return: The language_override of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._language_override

    @language_override.setter
    def language_override(self, language_override):
        """Sets the language_override of this Contact.

        A preferred language setting for the contact, used by the Intercom Messenger even if their browser settings change.  # noqa: E501

        :param language_override: The language_override of this Contact.  # noqa: E501
        :type: str
        """
        if language_override is None:
            raise ValueError("Invalid value for `language_override`, must not be `None`")  # noqa: E501

        self._language_override = language_override

    @property
    def browser(self):
        """Gets the browser of this Contact.  # noqa: E501

        The name of the browser which the contact is using.  # noqa: E501

        :return: The browser of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._browser

    @browser.setter
    def browser(self, browser):
        """Sets the browser of this Contact.

        The name of the browser which the contact is using.  # noqa: E501

        :param browser: The browser of this Contact.  # noqa: E501
        :type: str
        """
        if browser is None:
            raise ValueError("Invalid value for `browser`, must not be `None`")  # noqa: E501

        self._browser = browser

    @property
    def browser_version(self):
        """Gets the browser_version of this Contact.  # noqa: E501

        The version of the browser which the contact is using.  # noqa: E501

        :return: The browser_version of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._browser_version

    @browser_version.setter
    def browser_version(self, browser_version):
        """Sets the browser_version of this Contact.

        The version of the browser which the contact is using.  # noqa: E501

        :param browser_version: The browser_version of this Contact.  # noqa: E501
        :type: str
        """
        if browser_version is None:
            raise ValueError("Invalid value for `browser_version`, must not be `None`")  # noqa: E501

        self._browser_version = browser_version

    @property
    def browser_language(self):
        """Gets the browser_language of this Contact.  # noqa: E501

        The language set by the browser which the contact is using.  # noqa: E501

        :return: The browser_language of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._browser_language

    @browser_language.setter
    def browser_language(self, browser_language):
        """Sets the browser_language of this Contact.

        The language set by the browser which the contact is using.  # noqa: E501

        :param browser_language: The browser_language of this Contact.  # noqa: E501
        :type: str
        """
        if browser_language is None:
            raise ValueError("Invalid value for `browser_language`, must not be `None`")  # noqa: E501

        self._browser_language = browser_language

    @property
    def os(self):
        """Gets the os of this Contact.  # noqa: E501

        The operating system which the contact is using.  # noqa: E501

        :return: The os of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this Contact.

        The operating system which the contact is using.  # noqa: E501

        :param os: The os of this Contact.  # noqa: E501
        :type: str
        """
        if os is None:
            raise ValueError("Invalid value for `os`, must not be `None`")  # noqa: E501

        self._os = os

    @property
    def android_app_name(self):
        """Gets the android_app_name of this Contact.  # noqa: E501

        The name of the Android app which the contact is using.  # noqa: E501

        :return: The android_app_name of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._android_app_name

    @android_app_name.setter
    def android_app_name(self, android_app_name):
        """Sets the android_app_name of this Contact.

        The name of the Android app which the contact is using.  # noqa: E501

        :param android_app_name: The android_app_name of this Contact.  # noqa: E501
        :type: str
        """

        self._android_app_name = android_app_name

    @property
    def android_app_version(self):
        """Gets the android_app_version of this Contact.  # noqa: E501

        The version of the Android app which the contact is using.  # noqa: E501

        :return: The android_app_version of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._android_app_version

    @android_app_version.setter
    def android_app_version(self, android_app_version):
        """Sets the android_app_version of this Contact.

        The version of the Android app which the contact is using.  # noqa: E501

        :param android_app_version: The android_app_version of this Contact.  # noqa: E501
        :type: str
        """

        self._android_app_version = android_app_version

    @property
    def android_device(self):
        """Gets the android_device of this Contact.  # noqa: E501

        The Android device which the contact is using.  # noqa: E501

        :return: The android_device of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._android_device

    @android_device.setter
    def android_device(self, android_device):
        """Sets the android_device of this Contact.

        The Android device which the contact is using.  # noqa: E501

        :param android_device: The android_device of this Contact.  # noqa: E501
        :type: str
        """

        self._android_device = android_device

    @property
    def android_os_version(self):
        """Gets the android_os_version of this Contact.  # noqa: E501

        The version of the Android OS which the contact is using.  # noqa: E501

        :return: The android_os_version of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._android_os_version

    @android_os_version.setter
    def android_os_version(self, android_os_version):
        """Sets the android_os_version of this Contact.

        The version of the Android OS which the contact is using.  # noqa: E501

        :param android_os_version: The android_os_version of this Contact.  # noqa: E501
        :type: str
        """

        self._android_os_version = android_os_version

    @property
    def android_sdk_version(self):
        """Gets the android_sdk_version of this Contact.  # noqa: E501

        The version of the Android SDK which the contact is using.  # noqa: E501

        :return: The android_sdk_version of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._android_sdk_version

    @android_sdk_version.setter
    def android_sdk_version(self, android_sdk_version):
        """Sets the android_sdk_version of this Contact.

        The version of the Android SDK which the contact is using.  # noqa: E501

        :param android_sdk_version: The android_sdk_version of this Contact.  # noqa: E501
        :type: str
        """

        self._android_sdk_version = android_sdk_version

    @property
    def android_last_seen_at(self):
        """Gets the android_last_seen_at of this Contact.  # noqa: E501

        (UNIX timestamp) The time when the contact was last seen on an Android device.  # noqa: E501

        :return: The android_last_seen_at of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._android_last_seen_at

    @android_last_seen_at.setter
    def android_last_seen_at(self, android_last_seen_at):
        """Sets the android_last_seen_at of this Contact.

        (UNIX timestamp) The time when the contact was last seen on an Android device.  # noqa: E501

        :param android_last_seen_at: The android_last_seen_at of this Contact.  # noqa: E501
        :type: int
        """

        self._android_last_seen_at = android_last_seen_at

    @property
    def ios_app_name(self):
        """Gets the ios_app_name of this Contact.  # noqa: E501

        The name of the iOS app which the contact is using.  # noqa: E501

        :return: The ios_app_name of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._ios_app_name

    @ios_app_name.setter
    def ios_app_name(self, ios_app_name):
        """Sets the ios_app_name of this Contact.

        The name of the iOS app which the contact is using.  # noqa: E501

        :param ios_app_name: The ios_app_name of this Contact.  # noqa: E501
        :type: str
        """

        self._ios_app_name = ios_app_name

    @property
    def ios_app_version(self):
        """Gets the ios_app_version of this Contact.  # noqa: E501

        The version of the iOS app which the contact is using.  # noqa: E501

        :return: The ios_app_version of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._ios_app_version

    @ios_app_version.setter
    def ios_app_version(self, ios_app_version):
        """Sets the ios_app_version of this Contact.

        The version of the iOS app which the contact is using.  # noqa: E501

        :param ios_app_version: The ios_app_version of this Contact.  # noqa: E501
        :type: str
        """

        self._ios_app_version = ios_app_version

    @property
    def ios_device(self):
        """Gets the ios_device of this Contact.  # noqa: E501

        The iOS device which the contact is using.  # noqa: E501

        :return: The ios_device of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._ios_device

    @ios_device.setter
    def ios_device(self, ios_device):
        """Sets the ios_device of this Contact.

        The iOS device which the contact is using.  # noqa: E501

        :param ios_device: The ios_device of this Contact.  # noqa: E501
        :type: str
        """

        self._ios_device = ios_device

    @property
    def ios_os_version(self):
        """Gets the ios_os_version of this Contact.  # noqa: E501

        The version of iOS which the contact is using.  # noqa: E501

        :return: The ios_os_version of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._ios_os_version

    @ios_os_version.setter
    def ios_os_version(self, ios_os_version):
        """Sets the ios_os_version of this Contact.

        The version of iOS which the contact is using.  # noqa: E501

        :param ios_os_version: The ios_os_version of this Contact.  # noqa: E501
        :type: str
        """

        self._ios_os_version = ios_os_version

    @property
    def ios_sdk_version(self):
        """Gets the ios_sdk_version of this Contact.  # noqa: E501

        The version of the iOS SDK which the contact is using.  # noqa: E501

        :return: The ios_sdk_version of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._ios_sdk_version

    @ios_sdk_version.setter
    def ios_sdk_version(self, ios_sdk_version):
        """Sets the ios_sdk_version of this Contact.

        The version of the iOS SDK which the contact is using.  # noqa: E501

        :param ios_sdk_version: The ios_sdk_version of this Contact.  # noqa: E501
        :type: str
        """

        self._ios_sdk_version = ios_sdk_version

    @property
    def ios_last_seen_at(self):
        """Gets the ios_last_seen_at of this Contact.  # noqa: E501

        (UNIX timestamp) The last time the contact used the iOS app.  # noqa: E501

        :return: The ios_last_seen_at of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._ios_last_seen_at

    @ios_last_seen_at.setter
    def ios_last_seen_at(self, ios_last_seen_at):
        """Sets the ios_last_seen_at of this Contact.

        (UNIX timestamp) The last time the contact used the iOS app.  # noqa: E501

        :param ios_last_seen_at: The ios_last_seen_at of this Contact.  # noqa: E501
        :type: int
        """

        self._ios_last_seen_at = ios_last_seen_at

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this Contact.  # noqa: E501

        The custom attributes which are set for the contact.  # noqa: E501

        :return: The custom_attributes of this Contact.  # noqa: E501
        :rtype: object
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this Contact.

        The custom attributes which are set for the contact.  # noqa: E501

        :param custom_attributes: The custom_attributes of this Contact.  # noqa: E501
        :type: object
        """

        self._custom_attributes = custom_attributes

    @property
    def avatar(self):
        """Gets the avatar of this Contact.  # noqa: E501


        :return: The avatar of this Contact.  # noqa: E501
        :rtype: ContactAvatar
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this Contact.


        :param avatar: The avatar of this Contact.  # noqa: E501
        :type: ContactAvatar
        """
        if avatar is None:
            raise ValueError("Invalid value for `avatar`, must not be `None`")  # noqa: E501

        self._avatar = avatar

    @property
    def tags(self):
        """Gets the tags of this Contact.  # noqa: E501


        :return: The tags of this Contact.  # noqa: E501
        :rtype: ContactTags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Contact.


        :param tags: The tags of this Contact.  # noqa: E501
        :type: ContactTags
        """

        self._tags = tags

    @property
    def notes(self):
        """Gets the notes of this Contact.  # noqa: E501


        :return: The notes of this Contact.  # noqa: E501
        :rtype: ContactNotes
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Contact.


        :param notes: The notes of this Contact.  # noqa: E501
        :type: ContactNotes
        """

        self._notes = notes

    @property
    def companies(self):
        """Gets the companies of this Contact.  # noqa: E501


        :return: The companies of this Contact.  # noqa: E501
        :rtype: ContactCompanies
        """
        return self._companies

    @companies.setter
    def companies(self, companies):
        """Sets the companies of this Contact.


        :param companies: The companies of this Contact.  # noqa: E501
        :type: ContactCompanies
        """

        self._companies = companies

    @property
    def location(self):
        """Gets the location of this Contact.  # noqa: E501


        :return: The location of this Contact.  # noqa: E501
        :rtype: ContactLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Contact.


        :param location: The location of this Contact.  # noqa: E501
        :type: ContactLocation
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def social_profiles(self):
        """Gets the social_profiles of this Contact.  # noqa: E501


        :return: The social_profiles of this Contact.  # noqa: E501
        :rtype: ContactSocialProfiles
        """
        return self._social_profiles

    @social_profiles.setter
    def social_profiles(self, social_profiles):
        """Sets the social_profiles of this Contact.


        :param social_profiles: The social_profiles of this Contact.  # noqa: E501
        :type: ContactSocialProfiles
        """
        if social_profiles is None:
            raise ValueError("Invalid value for `social_profiles`, must not be `None`")  # noqa: E501

        self._social_profiles = social_profiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Contact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Contact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
