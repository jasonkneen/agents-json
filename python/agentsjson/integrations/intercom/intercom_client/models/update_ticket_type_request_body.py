# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateTicketTypeRequestBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'category': 'str',
        'icon': 'str',
        'archived': 'bool',
        'is_internal': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'category': 'category',
        'icon': 'icon',
        'archived': 'archived',
        'is_internal': 'is_internal'
    }

    def __init__(self, name=None, description=None, category=None, icon='üéüÔ∏è', archived=None, is_internal=False):  # noqa: E501
        """UpdateTicketTypeRequestBody - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._category = None
        self._icon = None
        self._archived = None
        self._is_internal = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if category is not None:
            self.category = category
        if icon is not None:
            self.icon = icon
        if archived is not None:
            self.archived = archived
        if is_internal is not None:
            self.is_internal = is_internal

    @property
    def name(self):
        """Gets the name of this UpdateTicketTypeRequestBody.  # noqa: E501

        The name of the ticket type.  # noqa: E501

        :return: The name of this UpdateTicketTypeRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateTicketTypeRequestBody.

        The name of the ticket type.  # noqa: E501

        :param name: The name of this UpdateTicketTypeRequestBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateTicketTypeRequestBody.  # noqa: E501

        The description of the ticket type.  # noqa: E501

        :return: The description of this UpdateTicketTypeRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateTicketTypeRequestBody.

        The description of the ticket type.  # noqa: E501

        :param description: The description of this UpdateTicketTypeRequestBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def category(self):
        """Gets the category of this UpdateTicketTypeRequestBody.  # noqa: E501

        Category of the Ticket Type.  # noqa: E501

        :return: The category of this UpdateTicketTypeRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this UpdateTicketTypeRequestBody.

        Category of the Ticket Type.  # noqa: E501

        :param category: The category of this UpdateTicketTypeRequestBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["Customer", "Back-office", "Tracker"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def icon(self):
        """Gets the icon of this UpdateTicketTypeRequestBody.  # noqa: E501

        The icon of the ticket type.  # noqa: E501

        :return: The icon of this UpdateTicketTypeRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this UpdateTicketTypeRequestBody.

        The icon of the ticket type.  # noqa: E501

        :param icon: The icon of this UpdateTicketTypeRequestBody.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def archived(self):
        """Gets the archived of this UpdateTicketTypeRequestBody.  # noqa: E501

        The archived status of the ticket type.  # noqa: E501

        :return: The archived of this UpdateTicketTypeRequestBody.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this UpdateTicketTypeRequestBody.

        The archived status of the ticket type.  # noqa: E501

        :param archived: The archived of this UpdateTicketTypeRequestBody.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def is_internal(self):
        """Gets the is_internal of this UpdateTicketTypeRequestBody.  # noqa: E501

        Whether the tickets associated with this ticket type are intended for internal use only or will be shared with customers. This is currently a limited attribute.  # noqa: E501

        :return: The is_internal of this UpdateTicketTypeRequestBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """Sets the is_internal of this UpdateTicketTypeRequestBody.

        Whether the tickets associated with this ticket type are intended for internal use only or will be shared with customers. This is currently a limited attribute.  # noqa: E501

        :param is_internal: The is_internal of this UpdateTicketTypeRequestBody.  # noqa: E501
        :type: bool
        """

        self._is_internal = is_internal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateTicketTypeRequestBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateTicketTypeRequestBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
