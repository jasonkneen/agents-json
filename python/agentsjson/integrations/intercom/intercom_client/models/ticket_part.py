# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TicketPart(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'part_type': 'str',
        'body': 'str',
        'previous_ticket_state': 'str',
        'ticket_state': 'str',
        'created_at': 'int',
        'updated_at': 'int',
        'assigned_to': 'Reference',
        'author': 'TicketPartAuthor',
        'attachments': 'list[PartAttachment]',
        'external_id': 'str',
        'redacted': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'part_type': 'part_type',
        'body': 'body',
        'previous_ticket_state': 'previous_ticket_state',
        'ticket_state': 'ticket_state',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'assigned_to': 'assigned_to',
        'author': 'author',
        'attachments': 'attachments',
        'external_id': 'external_id',
        'redacted': 'redacted'
    }

    def __init__(self, type=None, id=None, part_type=None, body=None, previous_ticket_state=None, ticket_state=None, created_at=None, updated_at=None, assigned_to=None, author=None, attachments=None, external_id=None, redacted=None):  # noqa: E501
        """TicketPart - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self._part_type = None
        self._body = None
        self._previous_ticket_state = None
        self._ticket_state = None
        self._created_at = None
        self._updated_at = None
        self._assigned_to = None
        self._author = None
        self._attachments = None
        self._external_id = None
        self._redacted = None
        self.discriminator = None
        self.type = type
        self.id = id
        self.part_type = part_type
        self.body = body
        if previous_ticket_state is not None:
            self.previous_ticket_state = previous_ticket_state
        self.ticket_state = ticket_state
        self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if assigned_to is not None:
            self.assigned_to = assigned_to
        if author is not None:
            self.author = author
        if attachments is not None:
            self.attachments = attachments
        if external_id is not None:
            self.external_id = external_id
        if redacted is not None:
            self.redacted = redacted

    @property
    def type(self):
        """Gets the type of this TicketPart.  # noqa: E501

        Always ticket_part  # noqa: E501

        :return: The type of this TicketPart.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TicketPart.

        Always ticket_part  # noqa: E501

        :param type: The type of this TicketPart.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["ticket_part"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this TicketPart.  # noqa: E501

        The id representing the ticket part.  # noqa: E501

        :return: The id of this TicketPart.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TicketPart.

        The id representing the ticket part.  # noqa: E501

        :param id: The id of this TicketPart.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def part_type(self):
        """Gets the part_type of this TicketPart.  # noqa: E501

        The type of ticket part.  # noqa: E501

        :return: The part_type of this TicketPart.  # noqa: E501
        :rtype: str
        """
        return self._part_type

    @part_type.setter
    def part_type(self, part_type):
        """Sets the part_type of this TicketPart.

        The type of ticket part.  # noqa: E501

        :param part_type: The part_type of this TicketPart.  # noqa: E501
        :type: str
        """
        if part_type is None:
            raise ValueError("Invalid value for `part_type`, must not be `None`")  # noqa: E501

        self._part_type = part_type

    @property
    def body(self):
        """Gets the body of this TicketPart.  # noqa: E501

        The message body, which may contain HTML.  # noqa: E501

        :return: The body of this TicketPart.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this TicketPart.

        The message body, which may contain HTML.  # noqa: E501

        :param body: The body of this TicketPart.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def previous_ticket_state(self):
        """Gets the previous_ticket_state of this TicketPart.  # noqa: E501

        The previous state of the ticket.  # noqa: E501

        :return: The previous_ticket_state of this TicketPart.  # noqa: E501
        :rtype: str
        """
        return self._previous_ticket_state

    @previous_ticket_state.setter
    def previous_ticket_state(self, previous_ticket_state):
        """Sets the previous_ticket_state of this TicketPart.

        The previous state of the ticket.  # noqa: E501

        :param previous_ticket_state: The previous_ticket_state of this TicketPart.  # noqa: E501
        :type: str
        """
        allowed_values = ["submitted", "in_progress", "waiting_on_customer", "resolved"]  # noqa: E501
        if previous_ticket_state not in allowed_values:
            raise ValueError(
                "Invalid value for `previous_ticket_state` ({0}), must be one of {1}"  # noqa: E501
                .format(previous_ticket_state, allowed_values)
            )

        self._previous_ticket_state = previous_ticket_state

    @property
    def ticket_state(self):
        """Gets the ticket_state of this TicketPart.  # noqa: E501

        The state of the ticket.  # noqa: E501

        :return: The ticket_state of this TicketPart.  # noqa: E501
        :rtype: str
        """
        return self._ticket_state

    @ticket_state.setter
    def ticket_state(self, ticket_state):
        """Sets the ticket_state of this TicketPart.

        The state of the ticket.  # noqa: E501

        :param ticket_state: The ticket_state of this TicketPart.  # noqa: E501
        :type: str
        """
        if ticket_state is None:
            raise ValueError("Invalid value for `ticket_state`, must not be `None`")  # noqa: E501
        allowed_values = ["submitted", "in_progress", "waiting_on_customer", "resolved"]  # noqa: E501
        if ticket_state not in allowed_values:
            raise ValueError(
                "Invalid value for `ticket_state` ({0}), must be one of {1}"  # noqa: E501
                .format(ticket_state, allowed_values)
            )

        self._ticket_state = ticket_state

    @property
    def created_at(self):
        """Gets the created_at of this TicketPart.  # noqa: E501

        The time the ticket part was created.  # noqa: E501

        :return: The created_at of this TicketPart.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TicketPart.

        The time the ticket part was created.  # noqa: E501

        :param created_at: The created_at of this TicketPart.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this TicketPart.  # noqa: E501

        The last time the ticket part was updated.  # noqa: E501

        :return: The updated_at of this TicketPart.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TicketPart.

        The last time the ticket part was updated.  # noqa: E501

        :param updated_at: The updated_at of this TicketPart.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    @property
    def assigned_to(self):
        """Gets the assigned_to of this TicketPart.  # noqa: E501


        :return: The assigned_to of this TicketPart.  # noqa: E501
        :rtype: Reference
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this TicketPart.


        :param assigned_to: The assigned_to of this TicketPart.  # noqa: E501
        :type: Reference
        """

        self._assigned_to = assigned_to

    @property
    def author(self):
        """Gets the author of this TicketPart.  # noqa: E501


        :return: The author of this TicketPart.  # noqa: E501
        :rtype: TicketPartAuthor
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this TicketPart.


        :param author: The author of this TicketPart.  # noqa: E501
        :type: TicketPartAuthor
        """

        self._author = author

    @property
    def attachments(self):
        """Gets the attachments of this TicketPart.  # noqa: E501

        A list of attachments for the part.  # noqa: E501

        :return: The attachments of this TicketPart.  # noqa: E501
        :rtype: list[PartAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this TicketPart.

        A list of attachments for the part.  # noqa: E501

        :param attachments: The attachments of this TicketPart.  # noqa: E501
        :type: list[PartAttachment]
        """

        self._attachments = attachments

    @property
    def external_id(self):
        """Gets the external_id of this TicketPart.  # noqa: E501

        The external id of the ticket part  # noqa: E501

        :return: The external_id of this TicketPart.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this TicketPart.

        The external id of the ticket part  # noqa: E501

        :param external_id: The external_id of this TicketPart.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def redacted(self):
        """Gets the redacted of this TicketPart.  # noqa: E501

        Whether or not the ticket part has been redacted.  # noqa: E501

        :return: The redacted of this TicketPart.  # noqa: E501
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this TicketPart.

        Whether or not the ticket part has been redacted.  # noqa: E501

        :param redacted: The redacted of this TicketPart.  # noqa: E501
        :type: bool
        """

        self._redacted = redacted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TicketPart, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TicketPart):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
