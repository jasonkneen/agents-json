# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateTicketRequestAssignment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'admin_id': 'str',
        'assignee_id': 'str'
    }

    attribute_map = {
        'admin_id': 'admin_id',
        'assignee_id': 'assignee_id'
    }

    def __init__(self, admin_id=None, assignee_id=None):  # noqa: E501
        """UpdateTicketRequestAssignment - a model defined in Swagger"""  # noqa: E501
        self._admin_id = None
        self._assignee_id = None
        self.discriminator = None
        if admin_id is not None:
            self.admin_id = admin_id
        if assignee_id is not None:
            self.assignee_id = assignee_id

    @property
    def admin_id(self):
        """Gets the admin_id of this UpdateTicketRequestAssignment.  # noqa: E501

        The ID of the admin performing the action.  # noqa: E501

        :return: The admin_id of this UpdateTicketRequestAssignment.  # noqa: E501
        :rtype: str
        """
        return self._admin_id

    @admin_id.setter
    def admin_id(self, admin_id):
        """Sets the admin_id of this UpdateTicketRequestAssignment.

        The ID of the admin performing the action.  # noqa: E501

        :param admin_id: The admin_id of this UpdateTicketRequestAssignment.  # noqa: E501
        :type: str
        """

        self._admin_id = admin_id

    @property
    def assignee_id(self):
        """Gets the assignee_id of this UpdateTicketRequestAssignment.  # noqa: E501

        The ID of the admin or team to which the ticket is assigned. Set this 0 to unassign it.  # noqa: E501

        :return: The assignee_id of this UpdateTicketRequestAssignment.  # noqa: E501
        :rtype: str
        """
        return self._assignee_id

    @assignee_id.setter
    def assignee_id(self, assignee_id):
        """Sets the assignee_id of this UpdateTicketRequestAssignment.

        The ID of the admin or team to which the ticket is assigned. Set this 0 to unassign it.  # noqa: E501

        :param assignee_id: The assignee_id of this UpdateTicketRequestAssignment.  # noqa: E501
        :type: str
        """

        self._assignee_id = assignee_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateTicketRequestAssignment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateTicketRequestAssignment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
