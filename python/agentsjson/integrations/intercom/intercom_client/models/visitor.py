# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Visitor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'user_id': 'str',
        'anonymous': 'bool',
        'email': 'str',
        'phone': 'str',
        'name': 'str',
        'pseudonym': 'str',
        'avatar': 'VisitorAvatar',
        'app_id': 'str',
        'companies': 'VisitorCompanies',
        'location_data': 'VisitorLocationData',
        'las_request_at': 'int',
        'created_at': 'int',
        'remote_created_at': 'int',
        'signed_up_at': 'int',
        'updated_at': 'int',
        'session_count': 'int',
        'social_profiles': 'VisitorSocialProfiles',
        'owner_id': 'str',
        'unsubscribed_from_emails': 'bool',
        'marked_email_as_spam': 'bool',
        'has_hard_bounced': 'bool',
        'tags': 'VisitorTags',
        'segments': 'VisitorSegments',
        'custom_attributes': 'dict(str, str)',
        'referrer': 'str',
        'utm_campaign': 'str',
        'utm_content': 'str',
        'utm_medium': 'str',
        'utm_source': 'str',
        'utm_term': 'str',
        'do_not_track': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'user_id': 'user_id',
        'anonymous': 'anonymous',
        'email': 'email',
        'phone': 'phone',
        'name': 'name',
        'pseudonym': 'pseudonym',
        'avatar': 'avatar',
        'app_id': 'app_id',
        'companies': 'companies',
        'location_data': 'location_data',
        'las_request_at': 'las_request_at',
        'created_at': 'created_at',
        'remote_created_at': 'remote_created_at',
        'signed_up_at': 'signed_up_at',
        'updated_at': 'updated_at',
        'session_count': 'session_count',
        'social_profiles': 'social_profiles',
        'owner_id': 'owner_id',
        'unsubscribed_from_emails': 'unsubscribed_from_emails',
        'marked_email_as_spam': 'marked_email_as_spam',
        'has_hard_bounced': 'has_hard_bounced',
        'tags': 'tags',
        'segments': 'segments',
        'custom_attributes': 'custom_attributes',
        'referrer': 'referrer',
        'utm_campaign': 'utm_campaign',
        'utm_content': 'utm_content',
        'utm_medium': 'utm_medium',
        'utm_source': 'utm_source',
        'utm_term': 'utm_term',
        'do_not_track': 'do_not_track'
    }

    def __init__(self, type='visitor', id=None, user_id=None, anonymous=None, email=None, phone=None, name=None, pseudonym=None, avatar=None, app_id=None, companies=None, location_data=None, las_request_at=None, created_at=None, remote_created_at=None, signed_up_at=None, updated_at=None, session_count=None, social_profiles=None, owner_id=None, unsubscribed_from_emails=None, marked_email_as_spam=None, has_hard_bounced=None, tags=None, segments=None, custom_attributes=None, referrer=None, utm_campaign=None, utm_content=None, utm_medium=None, utm_source=None, utm_term=None, do_not_track=None):  # noqa: E501
        """Visitor - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self._user_id = None
        self._anonymous = None
        self._email = None
        self._phone = None
        self._name = None
        self._pseudonym = None
        self._avatar = None
        self._app_id = None
        self._companies = None
        self._location_data = None
        self._las_request_at = None
        self._created_at = None
        self._remote_created_at = None
        self._signed_up_at = None
        self._updated_at = None
        self._session_count = None
        self._social_profiles = None
        self._owner_id = None
        self._unsubscribed_from_emails = None
        self._marked_email_as_spam = None
        self._has_hard_bounced = None
        self._tags = None
        self._segments = None
        self._custom_attributes = None
        self._referrer = None
        self._utm_campaign = None
        self._utm_content = None
        self._utm_medium = None
        self._utm_source = None
        self._utm_term = None
        self._do_not_track = None
        self.discriminator = None
        self.type = type
        self.id = id
        self.user_id = user_id
        self.anonymous = anonymous
        self.email = email
        self.phone = phone
        self.name = name
        if pseudonym is not None:
            self.pseudonym = pseudonym
        if avatar is not None:
            self.avatar = avatar
        self.app_id = app_id
        if companies is not None:
            self.companies = companies
        if location_data is not None:
            self.location_data = location_data
        if las_request_at is not None:
            self.las_request_at = las_request_at
        self.created_at = created_at
        if remote_created_at is not None:
            self.remote_created_at = remote_created_at
        self.signed_up_at = signed_up_at
        if updated_at is not None:
            self.updated_at = updated_at
        if session_count is not None:
            self.session_count = session_count
        if social_profiles is not None:
            self.social_profiles = social_profiles
        if owner_id is not None:
            self.owner_id = owner_id
        if unsubscribed_from_emails is not None:
            self.unsubscribed_from_emails = unsubscribed_from_emails
        if marked_email_as_spam is not None:
            self.marked_email_as_spam = marked_email_as_spam
        if has_hard_bounced is not None:
            self.has_hard_bounced = has_hard_bounced
        if tags is not None:
            self.tags = tags
        if segments is not None:
            self.segments = segments
        if custom_attributes is not None:
            self.custom_attributes = custom_attributes
        if referrer is not None:
            self.referrer = referrer
        if utm_campaign is not None:
            self.utm_campaign = utm_campaign
        if utm_content is not None:
            self.utm_content = utm_content
        if utm_medium is not None:
            self.utm_medium = utm_medium
        if utm_source is not None:
            self.utm_source = utm_source
        if utm_term is not None:
            self.utm_term = utm_term
        if do_not_track is not None:
            self.do_not_track = do_not_track

    @property
    def type(self):
        """Gets the type of this Visitor.  # noqa: E501

        Value is 'visitor'  # noqa: E501

        :return: The type of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Visitor.

        Value is 'visitor'  # noqa: E501

        :param type: The type of this Visitor.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def id(self):
        """Gets the id of this Visitor.  # noqa: E501

        The Intercom defined id representing the Visitor.  # noqa: E501

        :return: The id of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Visitor.

        The Intercom defined id representing the Visitor.  # noqa: E501

        :param id: The id of this Visitor.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this Visitor.  # noqa: E501

        Automatically generated identifier for the Visitor.  # noqa: E501

        :return: The user_id of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Visitor.

        Automatically generated identifier for the Visitor.  # noqa: E501

        :param user_id: The user_id of this Visitor.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def anonymous(self):
        """Gets the anonymous of this Visitor.  # noqa: E501

        Identifies if this visitor is anonymous.  # noqa: E501

        :return: The anonymous of this Visitor.  # noqa: E501
        :rtype: bool
        """
        return self._anonymous

    @anonymous.setter
    def anonymous(self, anonymous):
        """Sets the anonymous of this Visitor.

        Identifies if this visitor is anonymous.  # noqa: E501

        :param anonymous: The anonymous of this Visitor.  # noqa: E501
        :type: bool
        """
        if anonymous is None:
            raise ValueError("Invalid value for `anonymous`, must not be `None`")  # noqa: E501

        self._anonymous = anonymous

    @property
    def email(self):
        """Gets the email of this Visitor.  # noqa: E501

        The email of the visitor.  # noqa: E501

        :return: The email of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Visitor.

        The email of the visitor.  # noqa: E501

        :param email: The email of this Visitor.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this Visitor.  # noqa: E501

        The phone number of the visitor.  # noqa: E501

        :return: The phone of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Visitor.

        The phone number of the visitor.  # noqa: E501

        :param phone: The phone of this Visitor.  # noqa: E501
        :type: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    @property
    def name(self):
        """Gets the name of this Visitor.  # noqa: E501

        The name of the visitor.  # noqa: E501

        :return: The name of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Visitor.

        The name of the visitor.  # noqa: E501

        :param name: The name of this Visitor.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def pseudonym(self):
        """Gets the pseudonym of this Visitor.  # noqa: E501

        The pseudonym of the visitor.  # noqa: E501

        :return: The pseudonym of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._pseudonym

    @pseudonym.setter
    def pseudonym(self, pseudonym):
        """Sets the pseudonym of this Visitor.

        The pseudonym of the visitor.  # noqa: E501

        :param pseudonym: The pseudonym of this Visitor.  # noqa: E501
        :type: str
        """

        self._pseudonym = pseudonym

    @property
    def avatar(self):
        """Gets the avatar of this Visitor.  # noqa: E501


        :return: The avatar of this Visitor.  # noqa: E501
        :rtype: VisitorAvatar
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this Visitor.


        :param avatar: The avatar of this Visitor.  # noqa: E501
        :type: VisitorAvatar
        """

        self._avatar = avatar

    @property
    def app_id(self):
        """Gets the app_id of this Visitor.  # noqa: E501

        The id of the app the visitor is associated with.  # noqa: E501

        :return: The app_id of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this Visitor.

        The id of the app the visitor is associated with.  # noqa: E501

        :param app_id: The app_id of this Visitor.  # noqa: E501
        :type: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")  # noqa: E501

        self._app_id = app_id

    @property
    def companies(self):
        """Gets the companies of this Visitor.  # noqa: E501


        :return: The companies of this Visitor.  # noqa: E501
        :rtype: VisitorCompanies
        """
        return self._companies

    @companies.setter
    def companies(self, companies):
        """Sets the companies of this Visitor.


        :param companies: The companies of this Visitor.  # noqa: E501
        :type: VisitorCompanies
        """

        self._companies = companies

    @property
    def location_data(self):
        """Gets the location_data of this Visitor.  # noqa: E501


        :return: The location_data of this Visitor.  # noqa: E501
        :rtype: VisitorLocationData
        """
        return self._location_data

    @location_data.setter
    def location_data(self, location_data):
        """Sets the location_data of this Visitor.


        :param location_data: The location_data of this Visitor.  # noqa: E501
        :type: VisitorLocationData
        """

        self._location_data = location_data

    @property
    def las_request_at(self):
        """Gets the las_request_at of this Visitor.  # noqa: E501

        The time the Lead last recorded making a request.  # noqa: E501

        :return: The las_request_at of this Visitor.  # noqa: E501
        :rtype: int
        """
        return self._las_request_at

    @las_request_at.setter
    def las_request_at(self, las_request_at):
        """Sets the las_request_at of this Visitor.

        The time the Lead last recorded making a request.  # noqa: E501

        :param las_request_at: The las_request_at of this Visitor.  # noqa: E501
        :type: int
        """

        self._las_request_at = las_request_at

    @property
    def created_at(self):
        """Gets the created_at of this Visitor.  # noqa: E501

        The time the Visitor was added to Intercom.  # noqa: E501

        :return: The created_at of this Visitor.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Visitor.

        The time the Visitor was added to Intercom.  # noqa: E501

        :param created_at: The created_at of this Visitor.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def remote_created_at(self):
        """Gets the remote_created_at of this Visitor.  # noqa: E501

        The time the Visitor was added to Intercom.  # noqa: E501

        :return: The remote_created_at of this Visitor.  # noqa: E501
        :rtype: int
        """
        return self._remote_created_at

    @remote_created_at.setter
    def remote_created_at(self, remote_created_at):
        """Sets the remote_created_at of this Visitor.

        The time the Visitor was added to Intercom.  # noqa: E501

        :param remote_created_at: The remote_created_at of this Visitor.  # noqa: E501
        :type: int
        """

        self._remote_created_at = remote_created_at

    @property
    def signed_up_at(self):
        """Gets the signed_up_at of this Visitor.  # noqa: E501

        The time the Visitor signed up for your product.  # noqa: E501

        :return: The signed_up_at of this Visitor.  # noqa: E501
        :rtype: int
        """
        return self._signed_up_at

    @signed_up_at.setter
    def signed_up_at(self, signed_up_at):
        """Sets the signed_up_at of this Visitor.

        The time the Visitor signed up for your product.  # noqa: E501

        :param signed_up_at: The signed_up_at of this Visitor.  # noqa: E501
        :type: int
        """
        if signed_up_at is None:
            raise ValueError("Invalid value for `signed_up_at`, must not be `None`")  # noqa: E501

        self._signed_up_at = signed_up_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Visitor.  # noqa: E501

        The last time the Visitor was updated.  # noqa: E501

        :return: The updated_at of this Visitor.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Visitor.

        The last time the Visitor was updated.  # noqa: E501

        :param updated_at: The updated_at of this Visitor.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    @property
    def session_count(self):
        """Gets the session_count of this Visitor.  # noqa: E501

        The number of sessions the Visitor has had.  # noqa: E501

        :return: The session_count of this Visitor.  # noqa: E501
        :rtype: int
        """
        return self._session_count

    @session_count.setter
    def session_count(self, session_count):
        """Sets the session_count of this Visitor.

        The number of sessions the Visitor has had.  # noqa: E501

        :param session_count: The session_count of this Visitor.  # noqa: E501
        :type: int
        """

        self._session_count = session_count

    @property
    def social_profiles(self):
        """Gets the social_profiles of this Visitor.  # noqa: E501


        :return: The social_profiles of this Visitor.  # noqa: E501
        :rtype: VisitorSocialProfiles
        """
        return self._social_profiles

    @social_profiles.setter
    def social_profiles(self, social_profiles):
        """Sets the social_profiles of this Visitor.


        :param social_profiles: The social_profiles of this Visitor.  # noqa: E501
        :type: VisitorSocialProfiles
        """

        self._social_profiles = social_profiles

    @property
    def owner_id(self):
        """Gets the owner_id of this Visitor.  # noqa: E501

        The id of the admin that owns the Visitor.  # noqa: E501

        :return: The owner_id of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Visitor.

        The id of the admin that owns the Visitor.  # noqa: E501

        :param owner_id: The owner_id of this Visitor.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def unsubscribed_from_emails(self):
        """Gets the unsubscribed_from_emails of this Visitor.  # noqa: E501

        Whether the Visitor is unsubscribed from emails.  # noqa: E501

        :return: The unsubscribed_from_emails of this Visitor.  # noqa: E501
        :rtype: bool
        """
        return self._unsubscribed_from_emails

    @unsubscribed_from_emails.setter
    def unsubscribed_from_emails(self, unsubscribed_from_emails):
        """Sets the unsubscribed_from_emails of this Visitor.

        Whether the Visitor is unsubscribed from emails.  # noqa: E501

        :param unsubscribed_from_emails: The unsubscribed_from_emails of this Visitor.  # noqa: E501
        :type: bool
        """

        self._unsubscribed_from_emails = unsubscribed_from_emails

    @property
    def marked_email_as_spam(self):
        """Gets the marked_email_as_spam of this Visitor.  # noqa: E501

        Identifies if this visitor has marked an email as spam.  # noqa: E501

        :return: The marked_email_as_spam of this Visitor.  # noqa: E501
        :rtype: bool
        """
        return self._marked_email_as_spam

    @marked_email_as_spam.setter
    def marked_email_as_spam(self, marked_email_as_spam):
        """Sets the marked_email_as_spam of this Visitor.

        Identifies if this visitor has marked an email as spam.  # noqa: E501

        :param marked_email_as_spam: The marked_email_as_spam of this Visitor.  # noqa: E501
        :type: bool
        """

        self._marked_email_as_spam = marked_email_as_spam

    @property
    def has_hard_bounced(self):
        """Gets the has_hard_bounced of this Visitor.  # noqa: E501

        Identifies if this visitor has had a hard bounce.  # noqa: E501

        :return: The has_hard_bounced of this Visitor.  # noqa: E501
        :rtype: bool
        """
        return self._has_hard_bounced

    @has_hard_bounced.setter
    def has_hard_bounced(self, has_hard_bounced):
        """Sets the has_hard_bounced of this Visitor.

        Identifies if this visitor has had a hard bounce.  # noqa: E501

        :param has_hard_bounced: The has_hard_bounced of this Visitor.  # noqa: E501
        :type: bool
        """

        self._has_hard_bounced = has_hard_bounced

    @property
    def tags(self):
        """Gets the tags of this Visitor.  # noqa: E501


        :return: The tags of this Visitor.  # noqa: E501
        :rtype: VisitorTags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Visitor.


        :param tags: The tags of this Visitor.  # noqa: E501
        :type: VisitorTags
        """

        self._tags = tags

    @property
    def segments(self):
        """Gets the segments of this Visitor.  # noqa: E501


        :return: The segments of this Visitor.  # noqa: E501
        :rtype: VisitorSegments
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this Visitor.


        :param segments: The segments of this Visitor.  # noqa: E501
        :type: VisitorSegments
        """

        self._segments = segments

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this Visitor.  # noqa: E501

        The custom attributes you have set on the Visitor.  # noqa: E501

        :return: The custom_attributes of this Visitor.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this Visitor.

        The custom attributes you have set on the Visitor.  # noqa: E501

        :param custom_attributes: The custom_attributes of this Visitor.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_attributes = custom_attributes

    @property
    def referrer(self):
        """Gets the referrer of this Visitor.  # noqa: E501

        The referer of the visitor.  # noqa: E501

        :return: The referrer of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._referrer

    @referrer.setter
    def referrer(self, referrer):
        """Sets the referrer of this Visitor.

        The referer of the visitor.  # noqa: E501

        :param referrer: The referrer of this Visitor.  # noqa: E501
        :type: str
        """

        self._referrer = referrer

    @property
    def utm_campaign(self):
        """Gets the utm_campaign of this Visitor.  # noqa: E501

        The utm_campaign of the visitor.  # noqa: E501

        :return: The utm_campaign of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._utm_campaign

    @utm_campaign.setter
    def utm_campaign(self, utm_campaign):
        """Sets the utm_campaign of this Visitor.

        The utm_campaign of the visitor.  # noqa: E501

        :param utm_campaign: The utm_campaign of this Visitor.  # noqa: E501
        :type: str
        """

        self._utm_campaign = utm_campaign

    @property
    def utm_content(self):
        """Gets the utm_content of this Visitor.  # noqa: E501

        The utm_content of the visitor.  # noqa: E501

        :return: The utm_content of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._utm_content

    @utm_content.setter
    def utm_content(self, utm_content):
        """Sets the utm_content of this Visitor.

        The utm_content of the visitor.  # noqa: E501

        :param utm_content: The utm_content of this Visitor.  # noqa: E501
        :type: str
        """

        self._utm_content = utm_content

    @property
    def utm_medium(self):
        """Gets the utm_medium of this Visitor.  # noqa: E501

        The utm_medium of the visitor.  # noqa: E501

        :return: The utm_medium of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._utm_medium

    @utm_medium.setter
    def utm_medium(self, utm_medium):
        """Sets the utm_medium of this Visitor.

        The utm_medium of the visitor.  # noqa: E501

        :param utm_medium: The utm_medium of this Visitor.  # noqa: E501
        :type: str
        """

        self._utm_medium = utm_medium

    @property
    def utm_source(self):
        """Gets the utm_source of this Visitor.  # noqa: E501

        The utm_source of the visitor.  # noqa: E501

        :return: The utm_source of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._utm_source

    @utm_source.setter
    def utm_source(self, utm_source):
        """Sets the utm_source of this Visitor.

        The utm_source of the visitor.  # noqa: E501

        :param utm_source: The utm_source of this Visitor.  # noqa: E501
        :type: str
        """

        self._utm_source = utm_source

    @property
    def utm_term(self):
        """Gets the utm_term of this Visitor.  # noqa: E501

        The utm_term of the visitor.  # noqa: E501

        :return: The utm_term of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._utm_term

    @utm_term.setter
    def utm_term(self, utm_term):
        """Sets the utm_term of this Visitor.

        The utm_term of the visitor.  # noqa: E501

        :param utm_term: The utm_term of this Visitor.  # noqa: E501
        :type: str
        """

        self._utm_term = utm_term

    @property
    def do_not_track(self):
        """Gets the do_not_track of this Visitor.  # noqa: E501

        Identifies if this visitor has do not track enabled.  # noqa: E501

        :return: The do_not_track of this Visitor.  # noqa: E501
        :rtype: bool
        """
        return self._do_not_track

    @do_not_track.setter
    def do_not_track(self, do_not_track):
        """Sets the do_not_track of this Visitor.

        Identifies if this visitor has do not track enabled.  # noqa: E501

        :param do_not_track: The do_not_track of this Visitor.  # noqa: E501
        :type: bool
        """

        self._do_not_track = do_not_track

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Visitor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Visitor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
