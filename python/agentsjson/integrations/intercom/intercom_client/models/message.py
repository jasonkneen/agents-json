# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Message(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'created_at': 'int',
        'subject': 'str',
        'body': 'str',
        'message_type': 'str',
        'conversation_id': 'str'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'created_at': 'created_at',
        'subject': 'subject',
        'body': 'body',
        'message_type': 'message_type',
        'conversation_id': 'conversation_id'
    }

    def __init__(self, type=None, id=None, created_at=None, subject=None, body=None, message_type=None, conversation_id=None):  # noqa: E501
        """Message - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self._created_at = None
        self._subject = None
        self._body = None
        self._message_type = None
        self._conversation_id = None
        self.discriminator = None
        self.type = type
        self.id = id
        self.created_at = created_at
        self.subject = subject
        self.body = body
        self.message_type = message_type
        self.conversation_id = conversation_id

    @property
    def type(self):
        """Gets the type of this Message.  # noqa: E501

        The type of the message  # noqa: E501

        :return: The type of this Message.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Message.

        The type of the message  # noqa: E501

        :param type: The type of this Message.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def id(self):
        """Gets the id of this Message.  # noqa: E501

        The id representing the message.  # noqa: E501

        :return: The id of this Message.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Message.

        The id representing the message.  # noqa: E501

        :param id: The id of this Message.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Message.  # noqa: E501

        The time the conversation was created.  # noqa: E501

        :return: The created_at of this Message.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Message.

        The time the conversation was created.  # noqa: E501

        :param created_at: The created_at of this Message.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def subject(self):
        """Gets the subject of this Message.  # noqa: E501

        The subject of the message. Only present if message_type: email.  # noqa: E501

        :return: The subject of this Message.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Message.

        The subject of the message. Only present if message_type: email.  # noqa: E501

        :param subject: The subject of this Message.  # noqa: E501
        :type: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def body(self):
        """Gets the body of this Message.  # noqa: E501

        The message body, which may contain HTML.  # noqa: E501

        :return: The body of this Message.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Message.

        The message body, which may contain HTML.  # noqa: E501

        :param body: The body of this Message.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def message_type(self):
        """Gets the message_type of this Message.  # noqa: E501

        The type of message that was sent. Can be email, inapp, facebook or twitter.  # noqa: E501

        :return: The message_type of this Message.  # noqa: E501
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this Message.

        The type of message that was sent. Can be email, inapp, facebook or twitter.  # noqa: E501

        :param message_type: The message_type of this Message.  # noqa: E501
        :type: str
        """
        if message_type is None:
            raise ValueError("Invalid value for `message_type`, must not be `None`")  # noqa: E501
        allowed_values = ["email", "inapp", "facebook", "twitter"]  # noqa: E501
        if message_type not in allowed_values:
            raise ValueError(
                "Invalid value for `message_type` ({0}), must be one of {1}"  # noqa: E501
                .format(message_type, allowed_values)
            )

        self._message_type = message_type

    @property
    def conversation_id(self):
        """Gets the conversation_id of this Message.  # noqa: E501

        The associated conversation_id  # noqa: E501

        :return: The conversation_id of this Message.  # noqa: E501
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id):
        """Sets the conversation_id of this Message.

        The associated conversation_id  # noqa: E501

        :param conversation_id: The conversation_id of this Message.  # noqa: E501
        :type: str
        """
        if conversation_id is None:
            raise ValueError("Invalid value for `conversation_id`, must not be `None`")  # noqa: E501

        self._conversation_id = conversation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Message, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Message):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
