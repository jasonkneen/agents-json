# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class DataExportApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cancel_data_export(self, job_identifier, **kwargs):  # noqa: E501
        """Cancel content data export  # noqa: E501

        You can cancel your job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_data_export(job_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_identifier: job_identifier (required)
        :param IntercomVersion intercom_version:
        :return: DataExport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_data_export_with_http_info(job_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_data_export_with_http_info(job_identifier, **kwargs)  # noqa: E501
            return data

    def cancel_data_export_with_http_info(self, job_identifier, **kwargs):  # noqa: E501
        """Cancel content data export  # noqa: E501

        You can cancel your job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_data_export_with_http_info(job_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_identifier: job_identifier (required)
        :param IntercomVersion intercom_version:
        :return: DataExport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_identifier', 'intercom_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_data_export" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_identifier' is set
        if ('job_identifier' not in params or
                params['job_identifier'] is None):
            raise ValueError("Missing the required parameter `job_identifier` when calling `cancel_data_export`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_identifier' in params:
            path_params['job_identifier'] = params['job_identifier']  # noqa: E501

        query_params = []

        header_params = {}
        if 'intercom_version' in params:
            header_params['Intercom-Version'] = params['intercom_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/export/cancel/{job_identifier}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataExport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_data_export(self, **kwargs):  # noqa: E501
        """Create content data export  # noqa: E501

        To create your export job, you need to send a `POST` request to the export endpoint `https://api.intercom.io/export/content/data`.  The only parameters you need to provide are the range of dates that you want exported.  >🚧 Limit of one active job > > You can only have one active job per workspace. You will receive a HTTP status code of 429 with the message Exceeded rate limit of 1 pending message data export jobs if you attempt to create a second concurrent job.  >❗️ Updated_at not included > > It should be noted that the timeframe only includes messages sent during the time period and not messages that were only updated during this period. For example, if a message was updated yesterday but sent two days ago, you would need to set the created_at_after date before the message was sent to include that in your retrieval job.  >📘 Date ranges are inclusive > > Requesting data for 2018-06-01 until 2018-06-30 will get all data for those days including those specified - e.g. 2018-06-01 00:00:00 until 2018-06-30 23:59:99.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_data_export(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateDataExportsRequest body:
        :param IntercomVersion intercom_version:
        :return: DataExport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_data_export_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_data_export_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_data_export_with_http_info(self, **kwargs):  # noqa: E501
        """Create content data export  # noqa: E501

        To create your export job, you need to send a `POST` request to the export endpoint `https://api.intercom.io/export/content/data`.  The only parameters you need to provide are the range of dates that you want exported.  >🚧 Limit of one active job > > You can only have one active job per workspace. You will receive a HTTP status code of 429 with the message Exceeded rate limit of 1 pending message data export jobs if you attempt to create a second concurrent job.  >❗️ Updated_at not included > > It should be noted that the timeframe only includes messages sent during the time period and not messages that were only updated during this period. For example, if a message was updated yesterday but sent two days ago, you would need to set the created_at_after date before the message was sent to include that in your retrieval job.  >📘 Date ranges are inclusive > > Requesting data for 2018-06-01 until 2018-06-30 will get all data for those days including those specified - e.g. 2018-06-01 00:00:00 until 2018-06-30 23:59:99.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_data_export_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateDataExportsRequest body:
        :param IntercomVersion intercom_version:
        :return: DataExport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'intercom_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_data_export" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'intercom_version' in params:
            header_params['Intercom-Version'] = params['intercom_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/export/content/data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataExport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_data_export(self, job_identifier, **kwargs):  # noqa: E501
        """Download content data export  # noqa: E501

        When a job has a status of complete, and thus a filled download_url, you can download your data by hitting that provided URL, formatted like so: https://api.intercom.io/download/content/data/xyz1234.  Your exported message data will be streamed continuously back down to you in a gzipped CSV format.  > 📘 Octet header required > > You will have to specify the header Accept: `application/octet-stream` when hitting this endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_data_export(job_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_identifier: job_identifier (required)
        :param IntercomVersion intercom_version:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_data_export_with_http_info(job_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.download_data_export_with_http_info(job_identifier, **kwargs)  # noqa: E501
            return data

    def download_data_export_with_http_info(self, job_identifier, **kwargs):  # noqa: E501
        """Download content data export  # noqa: E501

        When a job has a status of complete, and thus a filled download_url, you can download your data by hitting that provided URL, formatted like so: https://api.intercom.io/download/content/data/xyz1234.  Your exported message data will be streamed continuously back down to you in a gzipped CSV format.  > 📘 Octet header required > > You will have to specify the header Accept: `application/octet-stream` when hitting this endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_data_export_with_http_info(job_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_identifier: job_identifier (required)
        :param IntercomVersion intercom_version:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_identifier', 'intercom_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_data_export" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_identifier' is set
        if ('job_identifier' not in params or
                params['job_identifier'] is None):
            raise ValueError("Missing the required parameter `job_identifier` when calling `download_data_export`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_identifier' in params:
            path_params['job_identifier'] = params['job_identifier']  # noqa: E501

        query_params = []

        header_params = {}
        if 'intercom_version' in params:
            header_params['Intercom-Version'] = params['intercom_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/download/content/data/{job_identifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_data_export(self, job_identifier, **kwargs):  # noqa: E501
        """Show content data export  # noqa: E501

        You can view the status of your job by sending a `GET` request to the URL `https://api.intercom.io/export/content/data/{job_identifier}` - the `{job_identifier}` is the value returned in the response when you first created the export job. More on it can be seen in the Export Job Model.  > 🚧 Jobs expire after two days > All jobs that have completed processing (and are thus available to download from the provided URL) will have an expiry limit of two days from when the export ob completed. After this, the data will no longer be available.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_export(job_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_identifier: job_identifier (required)
        :param IntercomVersion intercom_version:
        :return: DataExport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_data_export_with_http_info(job_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.get_data_export_with_http_info(job_identifier, **kwargs)  # noqa: E501
            return data

    def get_data_export_with_http_info(self, job_identifier, **kwargs):  # noqa: E501
        """Show content data export  # noqa: E501

        You can view the status of your job by sending a `GET` request to the URL `https://api.intercom.io/export/content/data/{job_identifier}` - the `{job_identifier}` is the value returned in the response when you first created the export job. More on it can be seen in the Export Job Model.  > 🚧 Jobs expire after two days > All jobs that have completed processing (and are thus available to download from the provided URL) will have an expiry limit of two days from when the export ob completed. After this, the data will no longer be available.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_export_with_http_info(job_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_identifier: job_identifier (required)
        :param IntercomVersion intercom_version:
        :return: DataExport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_identifier', 'intercom_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_data_export" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_identifier' is set
        if ('job_identifier' not in params or
                params['job_identifier'] is None):
            raise ValueError("Missing the required parameter `job_identifier` when calling `get_data_export`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_identifier' in params:
            path_params['job_identifier'] = params['job_identifier']  # noqa: E501

        query_params = []

        header_params = {}
        if 'intercom_version' in params:
            header_params['Intercom-Version'] = params['intercom_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/export/content/data/{job_identifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataExport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
