# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class SubscriptionTypesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def attach_subscription_type_to_contact(self, contact_id, **kwargs):  # noqa: E501
        """Add subscription to a contact  # noqa: E501

        You can add a specific subscription to a contact. In Intercom, we have two different subscription types based on user consent - opt-out and opt-in:    1.Attaching a contact to an opt-out subscription type will opt that user out from receiving messages related to that subscription type.    2.Attaching a contact to an opt-in subscription type will opt that user in to receiving messages related to that subscription type.  This will return a subscription type model for the subscription type that was added to the contact.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_subscription_type_to_contact(contact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contact_id: The unique identifier for the contact which is given by Intercom (required)
        :param ContactIdSubscriptionsBody body:
        :param IntercomVersion intercom_version:
        :return: SubscriptionType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attach_subscription_type_to_contact_with_http_info(contact_id, **kwargs)  # noqa: E501
        else:
            (data) = self.attach_subscription_type_to_contact_with_http_info(contact_id, **kwargs)  # noqa: E501
            return data

    def attach_subscription_type_to_contact_with_http_info(self, contact_id, **kwargs):  # noqa: E501
        """Add subscription to a contact  # noqa: E501

        You can add a specific subscription to a contact. In Intercom, we have two different subscription types based on user consent - opt-out and opt-in:    1.Attaching a contact to an opt-out subscription type will opt that user out from receiving messages related to that subscription type.    2.Attaching a contact to an opt-in subscription type will opt that user in to receiving messages related to that subscription type.  This will return a subscription type model for the subscription type that was added to the contact.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_subscription_type_to_contact_with_http_info(contact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contact_id: The unique identifier for the contact which is given by Intercom (required)
        :param ContactIdSubscriptionsBody body:
        :param IntercomVersion intercom_version:
        :return: SubscriptionType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contact_id', 'body', 'intercom_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attach_subscription_type_to_contact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contact_id' is set
        if ('contact_id' not in params or
                params['contact_id'] is None):
            raise ValueError("Missing the required parameter `contact_id` when calling `attach_subscription_type_to_contact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'contact_id' in params:
            path_params['contact_id'] = params['contact_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'intercom_version' in params:
            header_params['Intercom-Version'] = params['intercom_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/contacts/{contact_id}/subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubscriptionType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def detach_subscription_type_to_contact(self, contact_id, subscription_id, **kwargs):  # noqa: E501
        """Remove subscription from a contact  # noqa: E501

        You can remove a specific subscription from a contact. This will return a subscription type model for the subscription type that was removed from the contact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detach_subscription_type_to_contact(contact_id, subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contact_id: The unique identifier for the contact which is given by Intercom (required)
        :param str subscription_id: The unique identifier for the subscription type which is given by Intercom (required)
        :param IntercomVersion intercom_version:
        :return: SubscriptionType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.detach_subscription_type_to_contact_with_http_info(contact_id, subscription_id, **kwargs)  # noqa: E501
        else:
            (data) = self.detach_subscription_type_to_contact_with_http_info(contact_id, subscription_id, **kwargs)  # noqa: E501
            return data

    def detach_subscription_type_to_contact_with_http_info(self, contact_id, subscription_id, **kwargs):  # noqa: E501
        """Remove subscription from a contact  # noqa: E501

        You can remove a specific subscription from a contact. This will return a subscription type model for the subscription type that was removed from the contact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detach_subscription_type_to_contact_with_http_info(contact_id, subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contact_id: The unique identifier for the contact which is given by Intercom (required)
        :param str subscription_id: The unique identifier for the subscription type which is given by Intercom (required)
        :param IntercomVersion intercom_version:
        :return: SubscriptionType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contact_id', 'subscription_id', 'intercom_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detach_subscription_type_to_contact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contact_id' is set
        if ('contact_id' not in params or
                params['contact_id'] is None):
            raise ValueError("Missing the required parameter `contact_id` when calling `detach_subscription_type_to_contact`")  # noqa: E501
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `detach_subscription_type_to_contact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'contact_id' in params:
            path_params['contact_id'] = params['contact_id']  # noqa: E501
        if 'subscription_id' in params:
            path_params['subscription_id'] = params['subscription_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'intercom_version' in params:
            header_params['Intercom-Version'] = params['intercom_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/contacts/{contact_id}/subscriptions/{subscription_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubscriptionType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_subscription_types(self, **kwargs):  # noqa: E501
        """List subscription types  # noqa: E501

        You can list all subscription types. A list of subscription type objects will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_subscription_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IntercomVersion intercom_version:
        :return: SubscriptionTypeList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_subscription_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_subscription_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_subscription_types_with_http_info(self, **kwargs):  # noqa: E501
        """List subscription types  # noqa: E501

        You can list all subscription types. A list of subscription type objects will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_subscription_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IntercomVersion intercom_version:
        :return: SubscriptionTypeList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['intercom_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_subscription_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'intercom_version' in params:
            header_params['Intercom-Version'] = params['intercom_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/subscription_types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubscriptionTypeList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_subscriptions_for_a_contact(self, contact_id, **kwargs):  # noqa: E501
        """List subscriptions for a contact  # noqa: E501

        You can fetch a list of subscription types that are attached to a contact. These can be subscriptions that a user has 'opted-in' to or has 'opted-out' from, depending on the subscription type. This will return a list of Subscription Type objects that the contact is associated with.  The data property will show a combined list of:    1.Opt-out subscription types that the user has opted-out from.   2.Opt-in subscription types that the user has opted-in to receiving.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_subscriptions_for_a_contact(contact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contact_id: The unique identifier for the contact which is given by Intercom (required)
        :param IntercomVersion intercom_version:
        :return: SubscriptionTypeList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_subscriptions_for_a_contact_with_http_info(contact_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_subscriptions_for_a_contact_with_http_info(contact_id, **kwargs)  # noqa: E501
            return data

    def list_subscriptions_for_a_contact_with_http_info(self, contact_id, **kwargs):  # noqa: E501
        """List subscriptions for a contact  # noqa: E501

        You can fetch a list of subscription types that are attached to a contact. These can be subscriptions that a user has 'opted-in' to or has 'opted-out' from, depending on the subscription type. This will return a list of Subscription Type objects that the contact is associated with.  The data property will show a combined list of:    1.Opt-out subscription types that the user has opted-out from.   2.Opt-in subscription types that the user has opted-in to receiving.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_subscriptions_for_a_contact_with_http_info(contact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contact_id: The unique identifier for the contact which is given by Intercom (required)
        :param IntercomVersion intercom_version:
        :return: SubscriptionTypeList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contact_id', 'intercom_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_subscriptions_for_a_contact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contact_id' is set
        if ('contact_id' not in params or
                params['contact_id'] is None):
            raise ValueError("Missing the required parameter `contact_id` when calling `list_subscriptions_for_a_contact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'contact_id' in params:
            path_params['contact_id'] = params['contact_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'intercom_version' in params:
            header_params['Intercom-Version'] = params['intercom_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/contacts/{contact_id}/subscriptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubscriptionTypeList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
