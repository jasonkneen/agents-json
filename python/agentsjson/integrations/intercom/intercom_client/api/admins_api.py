# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class AdminsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def identify_admin(self, **kwargs):  # noqa: E501
        """Identify an admin  # noqa: E501

         You can view the currently authorised admin along with the embedded app object (a \"workspace\" in legacy terminology).  > ðŸš§ Single Sign On > > If you are building a custom \"Log in with Intercom\" flow for your site, and you call the `/me` endpoint to identify the logged-in user, you should not accept any sign-ins from users with unverified email addresses as it poses a potential impersonation security risk.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.identify_admin(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IntercomVersion intercom_version:
        :return: AdminWithApp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.identify_admin_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.identify_admin_with_http_info(**kwargs)  # noqa: E501
            return data

    def identify_admin_with_http_info(self, **kwargs):  # noqa: E501
        """Identify an admin  # noqa: E501

         You can view the currently authorised admin along with the embedded app object (a \"workspace\" in legacy terminology).  > ðŸš§ Single Sign On > > If you are building a custom \"Log in with Intercom\" flow for your site, and you call the `/me` endpoint to identify the logged-in user, you should not accept any sign-ins from users with unverified email addresses as it poses a potential impersonation security risk.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.identify_admin_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IntercomVersion intercom_version:
        :return: AdminWithApp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['intercom_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method identify_admin" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'intercom_version' in params:
            header_params['Intercom-Version'] = params['intercom_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/me', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminWithApp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_activity_logs(self, created_at_after, **kwargs):  # noqa: E501
        """List all activity logs  # noqa: E501

        You can get a log of activities by all admins in an app.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_activity_logs(created_at_after, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str created_at_after: The start date that you request data for. It must be formatted as a UNIX timestamp. (required)
        :param IntercomVersion intercom_version:
        :param str created_at_before: The end date that you request data for. It must be formatted as a UNIX timestamp.
        :return: ActivityLogList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_activity_logs_with_http_info(created_at_after, **kwargs)  # noqa: E501
        else:
            (data) = self.list_activity_logs_with_http_info(created_at_after, **kwargs)  # noqa: E501
            return data

    def list_activity_logs_with_http_info(self, created_at_after, **kwargs):  # noqa: E501
        """List all activity logs  # noqa: E501

        You can get a log of activities by all admins in an app.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_activity_logs_with_http_info(created_at_after, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str created_at_after: The start date that you request data for. It must be formatted as a UNIX timestamp. (required)
        :param IntercomVersion intercom_version:
        :param str created_at_before: The end date that you request data for. It must be formatted as a UNIX timestamp.
        :return: ActivityLogList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['created_at_after', 'intercom_version', 'created_at_before']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_activity_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'created_at_after' is set
        if ('created_at_after' not in params or
                params['created_at_after'] is None):
            raise ValueError("Missing the required parameter `created_at_after` when calling `list_activity_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'created_at_after' in params:
            query_params.append(('created_at_after', params['created_at_after']))  # noqa: E501
        if 'created_at_before' in params:
            query_params.append(('created_at_before', params['created_at_before']))  # noqa: E501

        header_params = {}
        if 'intercom_version' in params:
            header_params['Intercom-Version'] = params['intercom_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/admins/activity_logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ActivityLogList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_admins(self, **kwargs):  # noqa: E501
        """List all admins  # noqa: E501

        You can fetch a list of admins for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_admins(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IntercomVersion intercom_version:
        :return: AdminList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_admins_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_admins_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_admins_with_http_info(self, **kwargs):  # noqa: E501
        """List all admins  # noqa: E501

        You can fetch a list of admins for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_admins_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IntercomVersion intercom_version:
        :return: AdminList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['intercom_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_admins" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'intercom_version' in params:
            header_params['Intercom-Version'] = params['intercom_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/admins', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_admin(self, admin_id, **kwargs):  # noqa: E501
        """Retrieve an admin  # noqa: E501

        You can retrieve the details of a single admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_admin(admin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str admin_id: The unique identifier of a given admin (required)
        :param IntercomVersion intercom_version:
        :return: Admin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_admin_with_http_info(admin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_admin_with_http_info(admin_id, **kwargs)  # noqa: E501
            return data

    def retrieve_admin_with_http_info(self, admin_id, **kwargs):  # noqa: E501
        """Retrieve an admin  # noqa: E501

        You can retrieve the details of a single admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_admin_with_http_info(admin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str admin_id: The unique identifier of a given admin (required)
        :param IntercomVersion intercom_version:
        :return: Admin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['admin_id', 'intercom_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_admin" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'admin_id' is set
        if ('admin_id' not in params or
                params['admin_id'] is None):
            raise ValueError("Missing the required parameter `admin_id` when calling `retrieve_admin`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'admin_id' in params:
            path_params['admin_id'] = params['admin_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'intercom_version' in params:
            header_params['Intercom-Version'] = params['intercom_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/admins/{admin_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Admin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_away_admin(self, admin_id, **kwargs):  # noqa: E501
        """Set an admin to away  # noqa: E501

        You can set an Admin as away for the Inbox.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_away_admin(admin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str admin_id: The unique identifier of a given admin (required)
        :param AdminIdAwayBody body:
        :param IntercomVersion intercom_version:
        :return: Admin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_away_admin_with_http_info(admin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_away_admin_with_http_info(admin_id, **kwargs)  # noqa: E501
            return data

    def set_away_admin_with_http_info(self, admin_id, **kwargs):  # noqa: E501
        """Set an admin to away  # noqa: E501

        You can set an Admin as away for the Inbox.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_away_admin_with_http_info(admin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str admin_id: The unique identifier of a given admin (required)
        :param AdminIdAwayBody body:
        :param IntercomVersion intercom_version:
        :return: Admin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['admin_id', 'body', 'intercom_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_away_admin" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'admin_id' is set
        if ('admin_id' not in params or
                params['admin_id'] is None):
            raise ValueError("Missing the required parameter `admin_id` when calling `set_away_admin`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'admin_id' in params:
            path_params['admin_id'] = params['admin_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'intercom_version' in params:
            header_params['Intercom-Version'] = params['intercom_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/admins/{admin_id}/away', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Admin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
