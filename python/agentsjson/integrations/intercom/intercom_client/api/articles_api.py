# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    OpenAPI spec version: 2.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class ArticlesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_article(self, **kwargs):  # noqa: E501
        """Create an article  # noqa: E501

        You can create a new article by making a POST request to `https://api.intercom.io/articles`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_article(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateArticleRequest body:
        :param IntercomVersion intercom_version:
        :return: Article
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_article_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_article_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_article_with_http_info(self, **kwargs):  # noqa: E501
        """Create an article  # noqa: E501

        You can create a new article by making a POST request to `https://api.intercom.io/articles`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_article_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateArticleRequest body:
        :param IntercomVersion intercom_version:
        :return: Article
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'intercom_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_article" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'intercom_version' in params:
            header_params['Intercom-Version'] = params['intercom_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/articles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Article',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_article(self, article_id, **kwargs):  # noqa: E501
        """Delete an article  # noqa: E501

        You can delete a single article by making a DELETE request to `https://api.intercom.io/articles/<id>`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_article(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str article_id: The unique identifier for the article which is given by Intercom. (required)
        :param IntercomVersion intercom_version:
        :return: DeletedArticleObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_article_with_http_info(article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_article_with_http_info(article_id, **kwargs)  # noqa: E501
            return data

    def delete_article_with_http_info(self, article_id, **kwargs):  # noqa: E501
        """Delete an article  # noqa: E501

        You can delete a single article by making a DELETE request to `https://api.intercom.io/articles/<id>`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_article_with_http_info(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str article_id: The unique identifier for the article which is given by Intercom. (required)
        :param IntercomVersion intercom_version:
        :return: DeletedArticleObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'intercom_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_article" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params or
                params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `delete_article`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'intercom_version' in params:
            header_params['Intercom-Version'] = params['intercom_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/articles/{article_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeletedArticleObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_articles(self, **kwargs):  # noqa: E501
        """List all articles  # noqa: E501

        You can fetch a list of all articles by making a GET request to `https://api.intercom.io/articles`.  > ðŸ“˜ How are the articles sorted and ordered? > > Articles will be returned in descending order on the `updated_at` attribute. This means if you need to iterate through results then we'll show the most recently updated articles first.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_articles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IntercomVersion intercom_version:
        :param int page: The page of results to fetch. Defaults to first page
        :param int per_page: How many results to display per page. Defaults to 15
        :return: ArticleList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_articles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_articles_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_articles_with_http_info(self, **kwargs):  # noqa: E501
        """List all articles  # noqa: E501

        You can fetch a list of all articles by making a GET request to `https://api.intercom.io/articles`.  > ðŸ“˜ How are the articles sorted and ordered? > > Articles will be returned in descending order on the `updated_at` attribute. This means if you need to iterate through results then we'll show the most recently updated articles first.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_articles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IntercomVersion intercom_version:
        :param int page: The page of results to fetch. Defaults to first page
        :param int per_page: How many results to display per page. Defaults to 15
        :return: ArticleList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['intercom_version', 'page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_articles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501

        header_params = {}
        if 'intercom_version' in params:
            header_params['Intercom-Version'] = params['intercom_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/articles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArticleList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_article(self, article_id, **kwargs):  # noqa: E501
        """Retrieve an article  # noqa: E501

        You can fetch the details of a single article by making a GET request to `https://api.intercom.io/articles/<id>`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_article(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str article_id: The unique identifier for the article which is given by Intercom. (required)
        :param IntercomVersion intercom_version:
        :return: Article
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_article_with_http_info(article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_article_with_http_info(article_id, **kwargs)  # noqa: E501
            return data

    def retrieve_article_with_http_info(self, article_id, **kwargs):  # noqa: E501
        """Retrieve an article  # noqa: E501

        You can fetch the details of a single article by making a GET request to `https://api.intercom.io/articles/<id>`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_article_with_http_info(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str article_id: The unique identifier for the article which is given by Intercom. (required)
        :param IntercomVersion intercom_version:
        :return: Article
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'intercom_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_article" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params or
                params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `retrieve_article`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'intercom_version' in params:
            header_params['Intercom-Version'] = params['intercom_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/articles/{article_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Article',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_articles(self, **kwargs):  # noqa: E501
        """Search for articles  # noqa: E501

        You can search for articles by making a GET request to `https://api.intercom.io/articles/search`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_articles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IntercomVersion intercom_version:
        :param str phrase: The phrase within your articles to search for.
        :param str state: The state of the Articles returned. One of `published`, `draft` or `all`.
        :param int help_center_id: The ID of the Help Center to search in.
        :param bool highlight: Return a highlighted version of the matching content within your articles. Refer to the response schema for more details.
        :return: SearchArticlesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_articles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_articles_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_articles_with_http_info(self, **kwargs):  # noqa: E501
        """Search for articles  # noqa: E501

        You can search for articles by making a GET request to `https://api.intercom.io/articles/search`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_articles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IntercomVersion intercom_version:
        :param str phrase: The phrase within your articles to search for.
        :param str state: The state of the Articles returned. One of `published`, `draft` or `all`.
        :param int help_center_id: The ID of the Help Center to search in.
        :param bool highlight: Return a highlighted version of the matching content within your articles. Refer to the response schema for more details.
        :return: SearchArticlesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['intercom_version', 'phrase', 'state', 'help_center_id', 'highlight']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_articles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'phrase' in params:
            query_params.append(('phrase', params['phrase']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'help_center_id' in params:
            query_params.append(('help_center_id', params['help_center_id']))  # noqa: E501
        if 'highlight' in params:
            query_params.append(('highlight', params['highlight']))  # noqa: E501

        header_params = {}
        if 'intercom_version' in params:
            header_params['Intercom-Version'] = params['intercom_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/articles/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchArticlesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_article(self, article_id, **kwargs):  # noqa: E501
        """Update an article  # noqa: E501

        You can update the details of a single article by making a PUT request to `https://api.intercom.io/articles/<id>`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_article(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str article_id: The unique identifier for the article which is given by Intercom. (required)
        :param UpdateArticleRequestBody body:
        :param IntercomVersion intercom_version:
        :return: Article
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_article_with_http_info(article_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_article_with_http_info(article_id, **kwargs)  # noqa: E501
            return data

    def update_article_with_http_info(self, article_id, **kwargs):  # noqa: E501
        """Update an article  # noqa: E501

        You can update the details of a single article by making a PUT request to `https://api.intercom.io/articles/<id>`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_article_with_http_info(article_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str article_id: The unique identifier for the article which is given by Intercom. (required)
        :param UpdateArticleRequestBody body:
        :param IntercomVersion intercom_version:
        :return: Article
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['article_id', 'body', 'intercom_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_article" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'article_id' is set
        if ('article_id' not in params or
                params['article_id'] is None):
            raise ValueError("Missing the required parameter `article_id` when calling `update_article`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'article_id' in params:
            path_params['article_id'] = params['article_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'intercom_version' in params:
            header_params['Intercom-Version'] = params['intercom_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/articles/{article_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Article',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
